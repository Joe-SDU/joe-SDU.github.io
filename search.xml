<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>写在前面</title>
    <url>/2020/11/13/%E8%AE%B0%E5%BD%95%E7%94%9F%E6%B4%BB/%E5%86%99%E5%9C%A8%E5%89%8D%E9%9D%A2/</url>
    <content><![CDATA[<p>Talk is cheap,show me the code.<br>        -linus</p>
]]></content>
      <categories>
        <category>记录生活</category>
      </categories>
  </entry>
  <entry>
    <title>Javascript基础知识</title>
    <url>/2020/11/13/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/Javascript%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>搭建一个小型博客需要的前导知识</category>
      </categories>
  </entry>
  <entry>
    <title>CSS基础知识</title>
    <url>/2020/11/13/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/CSS%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>搭建一个小型博客需要的前导知识</category>
      </categories>
  </entry>
  <entry>
    <title>HTML基础知识</title>
    <url>/2020/11/13/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/HTML%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="HTML基础篇"><a href="#HTML基础篇" class="headerlink" title="HTML基础篇"></a><strong>HTML基础篇</strong></h2><blockquote>
<p>超文本标记语言（英语：HyperText Markup Language，简称：HTML）是一种用于创建网页的标准标记语言。</p>
</blockquote>
<a id="more"></a>
<ul>
<li><input disabled="" type="checkbox"> HTML的基本框架<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>这是小徐的html页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这里是标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p1</span>&gt;</span>这里是第一段<span class="tag">&lt;/<span class="name">p1</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>注意:HTML中<xxx>代表一个标记，标记通常是成对存在的。</li>
<li><input disabled="" type="checkbox"> 如何开始编辑HTML</li>
</ul>
<p>1.直接采用记事本，具体操作很简单:鼠标停留在桌面–&gt;右键–&gt;建立文本文件–&gt;键入代码块–&gt;修改文件后缀为.html–&gt;保存文件–&gt;再次打开该文件。</p>
<blockquote>
<p>值得注意的是，默认解释html文件的浏览器是你电脑上设置的默认浏览器，windows用户默认浏览器可在设置里修改。</p>
</blockquote>
<p>2.使用VScode、sublime Text等文本编辑器进行html文件的编写。</p>
<ul>
<li><p><input disabled="" type="checkbox">  HTML中的保留字<br> 所谓保留字，就是一组html语法规范里出现的关键字或者符号，包括&lt;和&gt;等等，浏览器在遇到这些符号时会不清楚到底是一个标签还是小于号/大于号。我们可以用实体数字来解决此问题。常见的实体数字如下:</p>
<table>
<thead>
<tr>
<th>保留字</th>
<th>实体名称(不推荐)</th>
<th>实体编号</th>
</tr>
</thead>
<tbody><tr>
<td>&lt;</td>
<td>&amp;it</td>
<td>&amp;#60</td>
</tr>
<tr>
<td>&gt;</td>
<td>&amp;gt</td>
<td>&amp;#62</td>
</tr>
<tr>
<td>空格</td>
<td>&amp;nbsp</td>
<td>&amp;#160</td>
</tr>
</tbody></table>
</li>
<li><p><input disabled="" type="checkbox">  HTML标题<br>HTML标题，也称heading，是通过h1到h6六个标签定义的，标题会被默认显示成大字、粗体。我们给出实例:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是第一个标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>这是第二个标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p><input disabled="" type="checkbox">  HTML段落<br>HTML段落，也称paragraph，是通过p标签定义的。我们给出实例:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>Tips:默认情况下浏览器会在标题前后增加默认空行，会在块级元素后增加一个空行。<br>标题不可做他用，搜索引擎用标题为网页的结构和内容编制索引。<br>网页标题从h1到h6优先级递减。</p>
</blockquote>
</li>
<li><p><input disabled="" type="checkbox">  HTML水平线<br>HTML水平线，用来在界面中分割内容，用hr表示，我们给出实例:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">hr</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>第一部分<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hr</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>第二部分<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hr</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p><input disabled="" type="checkbox">  HTML注释<br>注释是给编写代码的人看的，不会影响网页结构，格式如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这里是注释 --&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><input disabled="" type="checkbox">  HTML链接<br>HTML链接，也称link，是通过a标签定义的。我们给出实例:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;joe-sdu.top&quot;</span>&gt;</span>顺着网线就能找到小徐!<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>其中href后面跟着的是链接地址，两个标签里的话是网页显示的文字，点击这句话就能跳转。</p>
</li>
<li><p><input disabled="" type="checkbox">  HTML图像<br>HTML图像，是通过img标签定义的。我们给出实例:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;C:/Users/images/小徐的照片屋&quot;</span> <span class="attr">width</span> = <span class="string">&quot;100&quot;</span> <span class="attr">height</span> = <span class="string">&quot;200&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>这个例子似乎有点特殊，原因在于，它没有成对的标签，而是在一个标签里加入了/，同时它引入了几个属性，src:也称source，代表存放图片的路径，width:希望展示图片的宽度，height:希望展示图片的高度。</p>
</li>
<li><p><input disabled="" type="checkbox">  HTML元素<br>HTML元素，指的是在开始标记和结束标记之间的内容(也就是上面所说的一对标签之内的内容)。HTML元素语法如下:</p>
</li>
<li><p>HTML元素以开始标记为起始。</p>
</li>
<li><p>HTML元素以结束标记为结束。</p>
</li>
<li><p>HTML元素内容是位于开始和结束标签之间的内容。</p>
</li>
<li><p>HTML某些元素具有空内容。</p>
</li>
<li><p>HTML空元素在开始标记中就结束。</p>
</li>
<li><p>HTML大多数元素可以拥有属性，比如上面的img。</p>
</li>
<li><p>HTML元素可以嵌套，简而言之就是一个元素中可以包含其他元素。<br>我们针对一些特殊的HTML元素进行解释:</p>
</li>
<li><p>HTML中的html元素，它定义了整个html文档。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	这里是其他元素内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>HTML中的body元素，它定义了文档的主体。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	这里是其他元素内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>HTML中的空元素，以换行为例:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>Tips:html中的标签最好采用小写，即使html对大小写并不敏感。</p>
</blockquote>
</li>
<li><p><input disabled="" type="checkbox">  HTML属性</p>
</li>
<li><p>HTML中的属性总是以键值对的形式出现，且在开始标签中规定，属性值总是要打引号，属性采用小写(尽管html不区分大小写)。我们给出一些针对性属性及其含义:</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>定义的标签</th>
<th>符号</th>
</tr>
</thead>
<tbody><tr>
<td>链接</td>
<td>a</td>
<td>href</td>
</tr>
<tr>
<td>居中排列标题</td>
<td>h</td>
<td>align</td>
</tr>
<tr>
<td>背景颜色</td>
<td>body</td>
<td>bgcolor</td>
</tr>
<tr>
<td>表格边框</td>
<td>table</td>
<td>boder</td>
</tr>
</tbody></table>
</li>
<li><p>下面是一些适用于大多数HTML元素的属性:</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>符号</th>
</tr>
</thead>
<tbody><tr>
<td>规定元素的内容</td>
<td>class</td>
</tr>
<tr>
<td>规定元素唯一的id</td>
<td>id</td>
</tr>
<tr>
<td>规定元素的行内样式</td>
<td>style</td>
</tr>
<tr>
<td>规定元素额外的信息</td>
<td>title</td>
</tr>
</tbody></table>
<p><a href="https://www.w3schools.com/html/">更多具体属性可点击查看</a></p>
</li>
<li><p><input disabled="" type="checkbox">  HTML样式<br>HTML样式通过style属性来设置，在以前，有些样式可以通过一些标签和属性来实现。然而在HTML的发展过程中，有些标签和属性逐渐被淘汰，我们应该尽量避免使用，它们是:</p>
<table>
<thead>
<tr>
<th>标签名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>center</td>
<td>定义居中的内容</td>
</tr>
<tr>
<td>font/basefont</td>
<td>定义字体</td>
</tr>
<tr>
<td>s/strike</td>
<td>定义删除线文本</td>
</tr>
<tr>
<td>u</td>
<td>定义下划线文本</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>属性名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>align</td>
<td>定义文字对齐方式</td>
</tr>
<tr>
<td>bgcolor</td>
<td>定义背景颜色</td>
</tr>
<tr>
<td>color</td>
<td>定义文本颜色</td>
</tr>
</tbody></table>
</li>
<li><p>我们用对应的样式代替上面的标签和属性:</p>
</li>
</ul>
<p>1.用background-color样式代替bgcolor:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">style</span> = <span class="string">&quot;background-color:green&quot;</span>&gt;</span> <span class="comment">&lt;!-- 这是绿色的主体 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span> = <span class="string">&quot;background-color:red&quot;</span>&gt;</span>这是红色的标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span> = <span class="string">&quot;background-color:blue&quot;</span>&gt;</span>这是蓝色的段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="HTML进阶篇"><a href="#HTML进阶篇" class="headerlink" title="HTML进阶篇"></a>HTML进阶篇</h2><p><strong>小徐还没来得及写哦~</strong></p>
<h2 id="很适合学习的时候听的歌呀"><a href="#很适合学习的时候听的歌呀" class="headerlink" title="很适合学习的时候听的歌呀!"></a>很适合学习的时候听的歌呀!</h2><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=35847042&auto=1&height=66"></iframe>]]></content>
      <categories>
        <category>搭建一个小型博客需要的前导知识</category>
      </categories>
  </entry>
  <entry>
    <title>树</title>
    <url>/2020/11/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%A0%E9%A2%98%E7%AD%94%E6%A1%88/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84--%E6%A0%91/</url>
    <content><![CDATA[<p>鉴于自己在看机械工业出版社的数据结构时，常常苦于没有答案，便觉得有必要整理出一份自己的答案，虽然不一定完全正确，实现也不一定高效，但总有些参考价值叭。</p>
<a id="more"></a>
<h2 id="二叉树和其他树-page280"><a href="#二叉树和其他树-page280" class="headerlink" title="二叉树和其他树:page280"></a>二叉树和其他树:page280</h2><ul>
<li>T20-24<blockquote>
<p>Tips:按照惯例给出整个类的实现，类方法包含了第20-24题，我们稍后做解释。</p>
</blockquote>
</li>
</ul>
<ol>
<li>首先是异常类，不再作解释。<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> EXCEPTION_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EXCEPTION_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">illegalParameterValue</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	illegalParameterValue(<span class="keyword">const</span> <span class="built_in">string</span>&amp; errMsg = <span class="string">&quot;illegal value!&quot;</span>) : error(errMsg) &#123;&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="built_in">string</span> error;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></li>
<li>其次是用到的的队列类，在此之前我们已经实现过。<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 纯虚基类</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> QUEUE_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> QUEUE_H_</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">queue</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">virtual</span> ~<span class="built_in">queue</span>() &#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> T&amp; <span class="title">front</span><span class="params">()</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> T&amp; <span class="title">back</span><span class="params">()</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">const</span> T&amp; theElement)</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 队列实现</span></span><br><span class="line"><span class="comment">// created on Oct.23.2020 by Joe</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ARRAYQUEUE_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ARRAYQUEUE_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;PureBaseQueue.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">arrayQueue</span> :</span> <span class="keyword">public</span> <span class="built_in">queue</span>&lt;T&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	arrayQueue(<span class="keyword">int</span> initialCapacity = <span class="number">20</span>);</span><br><span class="line">	~arrayQueue() &#123; <span class="keyword">delete</span>[]element; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> theFront == theBack; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> (theBack - theFront + arrayLength) % arrayLength; &#125;</span><br><span class="line">	<span class="function">T&amp; <span class="title">front</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">	<span class="function">T&amp; <span class="title">back</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">const</span> T&amp; theElement)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	T* element;</span><br><span class="line">	<span class="keyword">int</span> theFront;</span><br><span class="line">	<span class="keyword">int</span> theBack;</span><br><span class="line">	<span class="keyword">int</span> arrayLength;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">arrayQueue&lt;T&gt;::arrayQueue(<span class="keyword">int</span> initialCapacity)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">		<span class="keyword">throw</span>;</span><br><span class="line">	arrayLength = initialCapacity;</span><br><span class="line">	theFront = theBack = <span class="number">0</span>;</span><br><span class="line">	element = <span class="keyword">new</span> T[initialCapacity];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">T&amp; arrayQueue&lt;T&gt;::front() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (theFront == theBack)</span><br><span class="line">		<span class="keyword">throw</span>;</span><br><span class="line">	<span class="keyword">return</span> element[(theFront + <span class="number">1</span>) % arrayLength];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">T&amp; arrayQueue&lt;T&gt;::back() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (theFront == theBack)</span><br><span class="line">		<span class="keyword">throw</span>;</span><br><span class="line">	<span class="keyword">return</span> element[theBack];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">void</span> arrayQueue&lt;T&gt;::pop()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (theFront == theBack)</span><br><span class="line">		<span class="keyword">throw</span>;</span><br><span class="line">	theFront = (theFront + <span class="number">1</span>) % arrayLength;</span><br><span class="line">	element[theFront].~T();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">void</span> arrayQueue&lt;T&gt;::push(<span class="keyword">const</span> T&amp; theElement)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> ((theBack + <span class="number">1</span>) % arrayLength == theFront)</span><br><span class="line">	&#123;</span><br><span class="line">		T* newQueue = <span class="keyword">new</span> T[<span class="number">2</span> * arrayLength];</span><br><span class="line">		<span class="keyword">int</span> start = (theFront + <span class="number">1</span>) % arrayLength;</span><br><span class="line">		<span class="keyword">if</span> (start &lt; <span class="number">2</span>)</span><br><span class="line">			<span class="built_in">std</span>::copy(element + start, element + start + arrayLength - <span class="number">1</span>, newQueue);</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">std</span>::copy(element + start, element + arrayLength, newQueue);</span><br><span class="line">			<span class="built_in">std</span>::copy(element, element + theBack + <span class="number">1</span>, newQueue + arrayLength - start);</span><br><span class="line">		&#125;</span><br><span class="line">		theFront = <span class="number">2</span> * arrayLength - <span class="number">1</span>;</span><br><span class="line">		theBack = arrayLength - <span class="number">2</span>;</span><br><span class="line">		arrayLength *= <span class="number">2</span>;</span><br><span class="line">		<span class="keyword">delete</span>[]element;</span><br><span class="line">		element = newQueue;</span><br><span class="line">	&#125;</span><br><span class="line">	theBack = (theBack + <span class="number">1</span>) % arrayLength;</span><br><span class="line">	element[theBack] = theElement;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></li>
<li>数组实现的树。<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数组实现的树</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ARRAYTREE_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ARRAYTREE_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;exception.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;arrayQueue.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">pair</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::copy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">arrayTree</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	arrayTree() = <span class="keyword">default</span>;</span><br><span class="line">	~arrayTree() &#123; <span class="keyword">delete</span>[]tree; &#125;</span><br><span class="line">	<span class="comment">/*														*\</span></span><br><span class="line"><span class="comment">	  | attention: default visit function can be changed!</span></span><br><span class="line"><span class="comment">	\*														*/</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">preOrder</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">inOrder</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">postOrder</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">levelOrder</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">initialize</span><span class="params">(<span class="built_in">pair</span>&lt;<span class="keyword">bool</span>, T&gt;* theTree, <span class="keyword">int</span> theSize)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="comment">// private methods</span></span><br><span class="line">	<span class="built_in">pair</span>&lt;<span class="keyword">bool</span>, T&gt;* tree;</span><br><span class="line">	<span class="keyword">int</span> treeSize;</span><br><span class="line">	<span class="keyword">int</span> arraySize;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">changeLength1D</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">inOrder</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">postOrder</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">void</span> arrayTree&lt;T&gt;::changeLength1D()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">pair</span>&lt;<span class="keyword">bool</span>, T&gt;* temp = <span class="keyword">new</span> <span class="built_in">pair</span>&lt;<span class="keyword">bool</span>,T&gt;[<span class="number">2</span> * arraySize];</span><br><span class="line">	copy(tree, tree + arraySize, temp);</span><br><span class="line">	arraySize *= <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">delete</span>[]tree;</span><br><span class="line">	tree = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// preOrder traversal:sita(n)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">void</span> arrayTree&lt;T&gt;::preOrder(<span class="keyword">int</span> index)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (index &lt;= treeSize &amp;&amp; tree[index].first != <span class="literal">false</span>) &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; tree[index].second &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">		preOrder(<span class="number">2</span> * index);</span><br><span class="line">		preOrder(<span class="number">2</span> * index + <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// inOrder traversal:sita(n)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">void</span> arrayTree&lt;T&gt;::inOrder(<span class="keyword">int</span> index)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (index &lt;= treeSize &amp;&amp; tree[index].first != <span class="literal">false</span>) &#123;</span><br><span class="line">		inOrder(<span class="number">2</span> * index);</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; tree[index].second &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">		inOrder(<span class="number">2</span> * index + <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// postOrder traversal:sita(n)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">void</span> arrayTree&lt;T&gt;::postOrder(<span class="keyword">int</span> index)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (index &lt;= treeSize &amp;&amp; tree[index].first != <span class="literal">false</span>) &#123;</span><br><span class="line">		postOrder(<span class="number">2</span> * index);</span><br><span class="line">		postOrder(<span class="number">2</span> * index + <span class="number">1</span>);</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; tree[index].second &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*													*\</span></span><br><span class="line"><span class="comment">  | to call traversal function,use functions below:</span></span><br><span class="line"><span class="comment">\*													*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">void</span> arrayTree&lt;T&gt;::preOrder()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (treeSize == <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;The tree is empty!&quot;</span>;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;前序遍历:&quot;</span>;</span><br><span class="line">	preOrder(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">void</span> arrayTree&lt;T&gt;::inOrder()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (treeSize == <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;The tree is empty!&quot;</span>;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;中序遍历:&quot;</span>;</span><br><span class="line">	inOrder(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">void</span> arrayTree&lt;T&gt;::postOrder()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (treeSize == <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;The tree is empty!&quot;</span>;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;后序遍历:&quot;</span>;</span><br><span class="line">	postOrder(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// levelOrder traversal:sita(n)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">void</span> arrayTree&lt;T&gt;::levelOrder()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (treeSize == <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;The tree is empty!&quot;</span>;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;层序遍历:&quot;</span>;</span><br><span class="line">	<span class="keyword">int</span> index = <span class="number">1</span>;</span><br><span class="line">	arrayQueue&lt;<span class="keyword">int</span>&gt; indexQueue;</span><br><span class="line">	<span class="keyword">while</span> (index &lt;= treeSize &amp;&amp; tree[index].first != <span class="literal">false</span>) &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; tree[index].second &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">		<span class="keyword">if</span> (<span class="number">2</span> * index &lt;= treeSize &amp;&amp; tree[<span class="number">2</span> * index].first != <span class="literal">false</span>) indexQueue.push(<span class="number">2</span> * index); <span class="comment">// left child</span></span><br><span class="line">		<span class="keyword">if</span> (<span class="number">2</span> * index + <span class="number">1</span> &lt;= treeSize &amp;&amp; tree[<span class="number">2</span> * index + <span class="number">1</span>].first != <span class="literal">false</span>) indexQueue.push(<span class="number">2</span> * index + <span class="number">1</span>); <span class="comment">// rightChild</span></span><br><span class="line">		<span class="keyword">if</span> (!indexQueue.empty()) &#123;</span><br><span class="line">			index = indexQueue.front();</span><br><span class="line">			indexQueue.pop();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// initialize a tree:sita(theSize)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">void</span> arrayTree&lt;T&gt;::initialize(<span class="built_in">pair</span>&lt;<span class="keyword">bool</span>, T&gt;* theTree, <span class="keyword">int</span> theSize)</span><br><span class="line">&#123;</span><br><span class="line">	tree = <span class="keyword">new</span> <span class="built_in">pair</span>&lt;<span class="keyword">bool</span>, T&gt;[theSize + <span class="number">1</span>];</span><br><span class="line">	arraySize = theSize+<span class="number">1</span>;</span><br><span class="line">	treeSize = theSize;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= theSize; i++) tree[i] = theTree[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></li>
<li>测试样例。<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	@copyright:all rights reserved</span></span><br><span class="line"><span class="comment">	author: Joe-sdu</span></span><br><span class="line"><span class="comment">	date:2020.11.14</span></span><br><span class="line"><span class="comment">	@declaration:this document can&#x27;t be used on bussiness</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bianryTree.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;binaryTreeNode.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">pair</span>&lt;<span class="keyword">bool</span>, <span class="keyword">char</span>&gt;* myTree = <span class="keyword">new</span> <span class="built_in">pair</span>&lt;<span class="keyword">bool</span>, <span class="keyword">char</span>&gt;[<span class="number">15</span>];</span><br><span class="line">	<span class="keyword">char</span> t;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">14</span>; i++) &#123;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">		t != <span class="string">&#x27;#&#x27;</span> ? myTree[i].first = <span class="literal">true</span>, myTree[i].second = t : myTree[i].first = <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	binaryTree&lt;<span class="keyword">char</span>&gt; tree;</span><br><span class="line">	tree.initialize(myTree, <span class="number">14</span>);</span><br><span class="line">	tree.preOrder(visit);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	tree.inOrder(visit);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	tree.postOrder(visit);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; tree.height() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	binaryTree&lt;<span class="keyword">char</span>&gt; secondTree;</span><br><span class="line">	secondTree.initialize(tree);</span><br><span class="line">	secondTree.preOrder(visit);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; secondTree.height() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="朋友推荐的好听的歌"><a href="#朋友推荐的好听的歌" class="headerlink" title="朋友推荐的好听的歌!"></a>朋友推荐的好听的歌!</h2><div align="middle"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1396205229&auto=1&height=66"></iframe></div>]]></content>
      <categories>
        <category>数据结构与算法习题答案(机械工业出版社)</category>
      </categories>
  </entry>
  <entry>
    <title>栈</title>
    <url>/2020/11/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%A0%E9%A2%98%E7%AD%94%E6%A1%88/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84--%E6%A0%88/</url>
    <content><![CDATA[<p>鉴于自己在看机械工业出版社的数据结构时，常常苦于没有答案，便觉得有必要整理出一份自己的答案，虽然不一定完全正确，实现也不一定高效，但总有些参考价值叭。</p>
<a id="more"></a>
<h2 id="栈在教材上的应用"><a href="#栈在教材上的应用" class="headerlink" title="栈在教材上的应用"></a>栈在教材上的应用</h2><blockquote>
<p>栈是一种十分有用的数据结构!!在后续学习中会不断出现对它的应用!!请大家务必掌握!!</p>
</blockquote>
<ul>
<li>栈的纯虚基类<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 纯虚基类</span></span><br><span class="line"><span class="comment">// created on 2020.10.21 by Joe</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> STACK_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STACK_H_</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">stack</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">virtual</span> ~<span class="built_in">stack</span>() &#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> T&amp; <span class="title">top</span><span class="params">()</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">const</span> T&amp; theElement)</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></li>
<li>数组实现的栈<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//数组实现的栈</span></span><br><span class="line"><span class="comment">// created on 2020.10.21 by Joe</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ARRAYSTACK_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ARRAYSTACK_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;pureBaseStack.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">arrayStack</span> :</span> <span class="keyword">public</span> <span class="built_in">stack</span>&lt;T&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	~arrayStack() &#123; <span class="keyword">delete</span>[]element; &#125;</span><br><span class="line">	arrayStack(<span class="keyword">int</span> initialCapacity = <span class="number">10</span>);</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">override</span> <span class="keyword">final</span> </span>&#123; <span class="keyword">return</span> stackTop == <span class="number">-1</span>; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">override</span> <span class="keyword">final</span> </span>&#123; <span class="keyword">return</span> stackTop + <span class="number">1</span>; &#125;</span><br><span class="line">	<span class="function">T&amp; <span class="title">top</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">override</span> <span class="keyword">final</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">const</span> T&amp; theElement)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	T* element;</span><br><span class="line">	<span class="keyword">int</span> stackTop;</span><br><span class="line">	<span class="keyword">int</span> arrayLength;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">arrayStack&lt;T&gt;::arrayStack(<span class="keyword">int</span> initialCapacity)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (initialCapacity &lt; <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">ostringstream</span> s;</span><br><span class="line">		s &lt;&lt; <span class="string">&quot;can&#x27;t creat a stack with capacity &lt;= 0!&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">throw</span> s.str();</span><br><span class="line">	&#125;</span><br><span class="line">	element = <span class="keyword">new</span> T[initialCapacity];</span><br><span class="line">	stackTop = <span class="number">-1</span>;</span><br><span class="line">	arrayLength = initialCapacity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">T&amp; arrayStack&lt;T&gt;::top() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (stackTop == <span class="number">-1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">ostringstream</span> s;</span><br><span class="line">		s &lt;&lt; <span class="string">&quot;Stack is empty!&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">throw</span> s.str();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> element[stackTop];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">void</span> arrayStack&lt;T&gt;::pop()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (stackTop == <span class="number">-1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">ostringstream</span> s;</span><br><span class="line">		s &lt;&lt; <span class="string">&quot;can&#x27;t pop from an empty stack!&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">throw</span> s.str();</span><br><span class="line">	&#125;</span><br><span class="line">	element[stackTop--].~T();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">void</span> arrayStack&lt;T&gt;::push(<span class="keyword">const</span> T&amp; theElement)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (stackTop == arrayLength - <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		arrayLength *= <span class="number">2</span>;</span><br><span class="line">		T* temp = <span class="keyword">new</span> T[arrayLength];</span><br><span class="line">		<span class="built_in">std</span>::copy(element, element + stackTop + <span class="number">1</span>, temp);</span><br><span class="line">		<span class="keyword">delete</span>[]element;</span><br><span class="line">		element = temp;</span><br><span class="line">	&#125;</span><br><span class="line">	element[++stackTop] = theElement;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></li>
<li>链表实现的栈<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// created on 2020.10.21 by Joe</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> LINKEDSTACK_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LINKEDSTACK_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;pureBaseStack.h&quot;</span></span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stackNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	T element;</span><br><span class="line">	stackNode* next;</span><br><span class="line">	stackNode() = <span class="keyword">default</span>;</span><br><span class="line">	stackNode(<span class="keyword">const</span> T&amp; theElement) : element(theElement) &#123;&#125;</span><br><span class="line">	stackNode(<span class="keyword">const</span> T&amp; theElement, stackNode&lt;T&gt;* theNext) : element(theElement), next(theNext) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">linkedStack</span> :</span> <span class="keyword">public</span> <span class="built_in">stack</span>&lt;T&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	~linkedStack();</span><br><span class="line">	linkedStack(<span class="keyword">int</span> initialCapacity = <span class="number">10</span>);</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">override</span> <span class="keyword">final</span> </span>&#123; <span class="keyword">return</span> stackSize == <span class="number">0</span>; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">override</span> <span class="keyword">final</span></span>&#123; <span class="keyword">return</span> stackSize; &#125;</span><br><span class="line">	<span class="function">T&amp; <span class="title">top</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">override</span> <span class="keyword">final</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">const</span> T&amp; theElement)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	stackNode&lt;T&gt;* stackTop;</span><br><span class="line">	<span class="keyword">int</span> stackSize;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">linkedStack&lt;T&gt;::~linkedStack()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">while</span> (stackTop != <span class="literal">nullptr</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		stackNode&lt;T&gt;* nextNode = stackTop-&gt;next;</span><br><span class="line">		<span class="keyword">delete</span> stackTop;</span><br><span class="line">		stackTop = nextNode;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">linkedStack&lt;T&gt;::linkedStack(<span class="keyword">int</span> initialCapacity)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (initialCapacity &lt; <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">ostringstream</span> s;</span><br><span class="line">		s &lt;&lt; <span class="string">&quot;can&#x27;t creat a stack with capacity &lt;= 0!&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">throw</span> s.str();</span><br><span class="line">	&#125;</span><br><span class="line">	stackSize = <span class="number">0</span>;</span><br><span class="line">	stackTop = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">T&amp; linkedStack&lt;T&gt;::top() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (stackSize == <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">ostringstream</span> s;</span><br><span class="line">		s &lt;&lt; <span class="string">&quot;Stack is empty!&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">throw</span> s.str();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> stackTop-&gt;element;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">void</span> linkedStack&lt;T&gt;::pop()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (stackSize == <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">ostringstream</span> s;</span><br><span class="line">		s &lt;&lt; <span class="string">&quot;can&#x27;t pop from an empty stack!&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">throw</span> s.str();</span><br><span class="line">	&#125;</span><br><span class="line">	stackNode&lt;T&gt;* nextNode = stackTop-&gt;next;</span><br><span class="line">	<span class="keyword">delete</span> stackTop;</span><br><span class="line">	stackTop = nextNode;</span><br><span class="line">	stackSize--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">void</span> linkedStack&lt;T&gt;::push(<span class="keyword">const</span> T&amp; theElement)</span><br><span class="line">&#123;</span><br><span class="line">	stackTop = <span class="keyword">new</span> stackNode&lt;T&gt;(theElement, stackTop);</span><br><span class="line">	stackSize++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></li>
<li>双栈共享空间<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// created on 2020.10.21 by Joe</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> TWOSTACKS_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TWOSTACKS_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">twoStack</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	~twoStack() &#123; <span class="keyword">delete</span>[]element; &#125;</span><br><span class="line">	twoStack(<span class="keyword">int</span> initialCapacity = <span class="number">10</span>);</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> stackTop1 == <span class="number">-1</span> &amp;&amp; stackTop2 == arrayLength; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> stackTop1 - stackTop2 + arrayLength + <span class="number">1</span>; &#125;</span><br><span class="line">	<span class="function">T&amp; <span class="title">top</span><span class="params">(<span class="keyword">int</span> stackNumber)</span> <span class="keyword">const</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">(<span class="keyword">int</span> stackNumber)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> stackNumber, <span class="keyword">const</span> T&amp; theElement)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	T* element;</span><br><span class="line">	<span class="keyword">int</span> stackTop1;</span><br><span class="line">	<span class="keyword">int</span> stackTop2;</span><br><span class="line">	<span class="keyword">int</span> arrayLength;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> stackNumber)</span> <span class="keyword">const</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">void</span> twoStack&lt;T&gt;::check(<span class="keyword">int</span> stackNumber) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (stackNumber &lt; <span class="number">1</span> || stackNumber &gt; <span class="number">2</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">ostringstream</span> s;</span><br><span class="line">		s &lt;&lt; <span class="string">&quot;stackNumber input error!&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">throw</span> s.str();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">twoStack&lt;T&gt;::twoStack(<span class="keyword">int</span> initialCapacity)</span><br><span class="line">&#123;</span><br><span class="line">	element = <span class="keyword">new</span> T[initialCapacity];</span><br><span class="line">	arrayLength = initialCapacity;</span><br><span class="line">	stackTop1 = <span class="number">-1</span>;</span><br><span class="line">	stackTop2 = arrayLength;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">T&amp; twoStack&lt;T&gt;::top(<span class="keyword">int</span> stackNumber) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">	check(stackNumber);</span><br><span class="line">	<span class="keyword">switch</span> (stackNumber)</span><br><span class="line">	&#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">		<span class="keyword">if</span> (stackTop1 == <span class="number">-1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">ostringstream</span> s;</span><br><span class="line">			s &lt;&lt; <span class="string">&quot;stack1 is empty!&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">			<span class="keyword">throw</span> s.str();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> element[stackTop1];</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">		<span class="keyword">if</span> (stackTop2 == arrayLength)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">ostringstream</span> s;</span><br><span class="line">			s &lt;&lt; <span class="string">&quot;stack2 is empty!&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">			<span class="keyword">throw</span> s.str();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> element[stackTop2];</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">void</span> twoStack&lt;T&gt;::pop(<span class="keyword">int</span> stackNumber)</span><br><span class="line">&#123;</span><br><span class="line">	check(stackNumber);</span><br><span class="line">	<span class="keyword">switch</span> (stackNumber)</span><br><span class="line">	&#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">		<span class="keyword">if</span> (stackTop1 == <span class="number">-1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">ostringstream</span> s;</span><br><span class="line">			s &lt;&lt; <span class="string">&quot;stack1 is empty!&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">			<span class="keyword">throw</span> s.str();</span><br><span class="line">		&#125;</span><br><span class="line">		element[stackTop1--].~T();</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">		<span class="keyword">if</span> (stackTop2 == arrayLength)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">ostringstream</span> s;</span><br><span class="line">			s &lt;&lt; <span class="string">&quot;stack2 is empty!&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">			<span class="keyword">throw</span> s.str();</span><br><span class="line">		&#125;</span><br><span class="line">		element[stackTop2++].~T();</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">void</span> twoStack&lt;T&gt;::push(<span class="keyword">int</span> stackNumber, <span class="keyword">const</span> T&amp; theElement)</span><br><span class="line">&#123;</span><br><span class="line">	check(stackNumber);</span><br><span class="line">	<span class="keyword">if</span> (stackTop1 + <span class="number">1</span> == stackTop2)</span><br><span class="line">	&#123;</span><br><span class="line">		T* temp = <span class="keyword">new</span> T[<span class="number">2</span> * arrayLength];</span><br><span class="line">		<span class="built_in">std</span>::copy(element, element + stackTop1 + <span class="number">1</span>, temp);</span><br><span class="line">		<span class="built_in">std</span>::copy(element + stackTop2, element + arrayLength, temp + arrayLength + stackTop2);</span><br><span class="line">		<span class="keyword">delete</span>[]element;</span><br><span class="line">		element = temp;</span><br><span class="line">		stackTop2 = arrayLength + stackTop2;</span><br><span class="line">		arrayLength *= <span class="number">2</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">switch</span> (stackNumber)</span><br><span class="line">	&#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">		element[++stackTop1] = theElement;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">		element[--stackTop2] = theElement;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></li>
<li>括号匹配<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 括号匹配</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;arrayStack.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="comment">// complexity of time:O(s.size())</span></span><br><span class="line"><span class="comment">// extra complexity of space:O(s.size())</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">matchWithStack</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	arrayStack&lt;<span class="keyword">char</span>&gt; matchStack;</span><br><span class="line">	<span class="keyword">char</span> temp;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.size(); i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (s[i] == <span class="string">&#x27;&#123;&#x27;</span> || s[i] == <span class="string">&#x27;[&#x27;</span> || s[i] == <span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">			matchStack.push(s[i]);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (s[i] == <span class="string">&#x27;&#125;&#x27;</span> || s[i] == <span class="string">&#x27;]&#x27;</span> || s[i] == <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			temp = matchStack.top();</span><br><span class="line">			<span class="keyword">if</span> (temp == s[i])</span><br><span class="line">				matchStack.pop();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (!matchStack.empty())</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>列车重排<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//列车重排</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;arrayStack.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">arrayStack&lt;<span class="keyword">int</span>&gt;* rails;</span><br><span class="line"><span class="keyword">int</span> numberOfCars;</span><br><span class="line"><span class="keyword">int</span> numberOfTrails;</span><br><span class="line"><span class="keyword">int</span> smallestCar;</span><br><span class="line"><span class="keyword">int</span> itsTrail;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">outputCarFromTrail</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	rails[itsTrail].pop();</span><br><span class="line">	smallestCar = numberOfCars + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= numberOfTrails; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (!rails[i].empty() &amp;&amp; rails[i].top() &lt; smallestCar)</span><br><span class="line">		&#123;</span><br><span class="line">			smallestCar = rails[i].top();</span><br><span class="line">			itsTrail = i;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">inputCarToTrail</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> bestTrail = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> bestTop = numberOfCars + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= numberOfTrails; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (!rails[i].empty())</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> d = rails[i].top();</span><br><span class="line">			<span class="keyword">if</span> (n &lt; d &amp;&amp; d &lt; bestTop)</span><br><span class="line">			&#123;</span><br><span class="line">				bestTop = d;</span><br><span class="line">				bestTrail = i;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			bestTrail = i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (bestTrail == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	rails[bestTrail].push(n);</span><br><span class="line">	<span class="keyword">if</span> (n &lt; smallestCar)</span><br><span class="line">	&#123;</span><br><span class="line">		smallestCar = n;</span><br><span class="line">		itsTrail = bestTrail;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">railRoad</span><span class="params">(<span class="keyword">int</span> input[], <span class="keyword">int</span> theNumberOfCars, <span class="keyword">int</span> theNumberOfTrails)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	numberOfCars = theNumberOfCars;</span><br><span class="line">	numberOfTrails = theNumberOfTrails;</span><br><span class="line">	rails = <span class="keyword">new</span> arrayStack&lt;<span class="keyword">int</span>&gt;[theNumberOfTrails + <span class="number">1</span>];</span><br><span class="line">	smallestCar = numberOfCars + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">int</span> nextCarToOutput = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= numberOfCars; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (input[i] == nextCarToOutput)</span><br><span class="line">		&#123;</span><br><span class="line">			nextCarToOutput++;</span><br><span class="line">			<span class="keyword">while</span> (smallestCar == nextCarToOutput)</span><br><span class="line">			&#123;</span><br><span class="line">				outputCarFromTrail();</span><br><span class="line">				nextCarToOutput++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="keyword">if</span> (!inputCarToTrail(input[i]))</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>离线等价类<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 离线等价类</span></span><br><span class="line"><span class="comment">// offline equiralence classes</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;arrayStack.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">offlineEquiralenceClasses</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n, r;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	<span class="keyword">if</span> (n &lt; <span class="number">2</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;can&#x27;t calculate set with elements &lt; 2&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; r;</span><br><span class="line">	<span class="keyword">if</span> (r &lt; <span class="number">2</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;can&#x27;t calculate set with relations &lt; 2&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	arrayStack&lt;<span class="keyword">int</span>&gt;* <span class="built_in">list</span> = <span class="keyword">new</span> arrayStack&lt;<span class="keyword">int</span>&gt;[n + <span class="number">1</span>];</span><br><span class="line">	<span class="keyword">int</span> a, b;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= r; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">		<span class="built_in">list</span>[a].push(b);</span><br><span class="line">		<span class="built_in">list</span>[b].push(a);</span><br><span class="line">	&#125;</span><br><span class="line">	arrayStack&lt;<span class="keyword">int</span>&gt; unprocessedList;</span><br><span class="line">	<span class="keyword">bool</span> *out = <span class="keyword">new</span> <span class="keyword">bool</span>[n + <span class="number">1</span>];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		out[i] = <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">int</span> tol = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (!out[i])</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;class &quot;</span> &lt;&lt; tol &lt;&lt; <span class="string">&quot; is:&quot;</span> &lt;&lt; <span class="string">&quot; [&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;,&quot;</span>;</span><br><span class="line">			out[i] = <span class="literal">true</span>;</span><br><span class="line">			unprocessedList.push(i);</span><br><span class="line">			<span class="keyword">while</span> (!unprocessedList.empty())</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">int</span> j = unprocessedList.top();</span><br><span class="line">				unprocessedList.pop();</span><br><span class="line">				<span class="keyword">while</span> (!<span class="built_in">list</span>[j].empty())</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">int</span> q = <span class="built_in">list</span>[j].top();</span><br><span class="line">					<span class="built_in">list</span>[j].pop();</span><br><span class="line">					<span class="keyword">if</span> (!out[q])</span><br><span class="line">					&#123;</span><br><span class="line">						<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; q &lt;&lt; <span class="string">&quot;,&quot;</span>;</span><br><span class="line">						out[q] = <span class="literal">true</span>;</span><br><span class="line">						unprocessedList.push(q);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;]&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">			tol++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>汉诺塔<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 汉诺塔</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;arrayStack.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line">arrayStack&lt;<span class="keyword">int</span>&gt; Hanoi[<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">moveAndShow</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (n &gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		moveAndShow(n - <span class="number">1</span>, x, z, y);</span><br><span class="line">		<span class="keyword">int</span> d = Hanoi[x].top();</span><br><span class="line">		Hanoi[x].pop();</span><br><span class="line">		Hanoi[y].push(d);</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;从&quot;</span> &lt;&lt; x &lt;&lt; <span class="string">&quot;移动[&quot;</span> &lt;&lt; d &lt;&lt; <span class="string">&quot;]&quot;</span> &lt;&lt; <span class="string">&quot;到&quot;</span> &lt;&lt; y &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		moveAndShow(n - <span class="number">1</span>, z, y, x);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HanoiTower</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">		Hanoi[<span class="number">1</span>].push(i);</span><br><span class="line">	moveAndShow(n, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>迷宫老鼠<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 迷宫老鼠</span></span><br><span class="line"><span class="comment">// find path in a maze</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;arrayStack.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> maze[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">position</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> row, col;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">findPath</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> size;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入迷宫尺寸:&quot;</span>;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; size;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= size; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		maze[<span class="number">0</span>][i] = maze[size + <span class="number">1</span>][i] = <span class="number">1</span>;</span><br><span class="line">		maze[i][<span class="number">0</span>] = maze[i][size + <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	arrayStack&lt;position&gt;* path = <span class="keyword">new</span> arrayStack&lt;position&gt;;</span><br><span class="line">	<span class="keyword">int</span> barrRow, barrCol;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入障碍数量:&quot;</span>;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; barrRow &gt;&gt; barrCol;</span><br><span class="line">		<span class="keyword">while</span>(barrRow &lt; <span class="number">1</span> || barrCol &lt; <span class="number">1</span> || barrRow &gt; size || barrCol &gt; size)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入的障碍物有误，请输入正确的障碍物坐标:&quot;</span>;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; barrRow &gt;&gt; barrCol;</span><br><span class="line">		&#125;</span><br><span class="line">		maze[barrRow][barrCol] = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	position end;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入终点位置:&quot;</span>;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; end.row &gt;&gt; end.col;</span><br><span class="line">	<span class="keyword">while</span> (end.row &lt; <span class="number">0</span> || end.col &lt; <span class="number">0</span> || end.row &gt; size + <span class="number">1</span> || end.col &gt; size + <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;终点位置不符合规范，请重新输入:&quot;</span>;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; end.row &gt;&gt; end.col;</span><br><span class="line">	&#125;</span><br><span class="line">	position offset[<span class="number">4</span>];</span><br><span class="line">	offset[<span class="number">0</span>].row = <span class="number">0</span>; offset[<span class="number">0</span>].col = <span class="number">1</span>;</span><br><span class="line">	offset[<span class="number">1</span>].row = <span class="number">1</span>; offset[<span class="number">1</span>].col = <span class="number">0</span>;</span><br><span class="line">	offset[<span class="number">2</span>].row = <span class="number">0</span>; offset[<span class="number">2</span>].col = <span class="number">-1</span>;</span><br><span class="line">	offset[<span class="number">3</span>].row = <span class="number">-1</span>; offset[<span class="number">3</span>].col = <span class="number">0</span>;</span><br><span class="line">	position here;</span><br><span class="line">	here.row = <span class="number">1</span>; here.col = <span class="number">1</span>;</span><br><span class="line">	maze[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">int</span> option = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> lastOption = <span class="number">3</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span> (here.row != end.row || here.col != end.col)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> r, c;</span><br><span class="line">		<span class="keyword">while</span> (option &lt;= lastOption)</span><br><span class="line">		&#123;</span><br><span class="line">			r = here.row + offset[option].row;</span><br><span class="line">			c = here.col + offset[option].col;</span><br><span class="line">			<span class="keyword">if</span> (maze[r][c] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">			option++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (option &lt;= lastOption)</span><br><span class="line">		&#123;</span><br><span class="line">			path-&gt;push(here);</span><br><span class="line">			here.row = r;</span><br><span class="line">			here.col = c;</span><br><span class="line">			maze[r][c] = <span class="number">1</span>;</span><br><span class="line">			option = <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (path-&gt;empty())</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">			position next = path-&gt;top();</span><br><span class="line">			path-&gt;pop();</span><br><span class="line">			<span class="keyword">if</span> (next.row == here.row)</span><br><span class="line">				option = <span class="number">2</span> + next.col - here.col;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				option = <span class="number">3</span> + (next.row - here.row) % <span class="number">4</span>;</span><br><span class="line">			here = next;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (!path-&gt;empty())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;(&quot;</span> &lt;&lt; path-&gt;top().row &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; path-&gt;top().col &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		path-&gt;pop();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>开关盒布线<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 开关盒布线</span></span><br><span class="line"><span class="comment">// check net and judge</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;linkedStack.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">checkBox</span><span class="params">(<span class="keyword">int</span> net[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	linkedStack&lt;<span class="keyword">int</span>&gt;* s = <span class="keyword">new</span> linkedStack&lt;<span class="keyword">int</span>&gt;(n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (!s-&gt;empty())</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (net[i] == net[s-&gt;top()])</span><br><span class="line">				s-&gt;pop();</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				s-&gt;push(i);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			s-&gt;push(i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (!s-&gt;empty())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;box is not routable!&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;box is routable!&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="栈的习题"><a href="#栈的习题" class="headerlink" title="栈的习题"></a>栈的习题</h2>还没开始哦~</li>
</ul>
]]></content>
      <categories>
        <category>数据结构与算法习题答案(机械工业出版社)</category>
      </categories>
  </entry>
</search>
