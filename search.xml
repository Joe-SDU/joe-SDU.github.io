<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>/2021/01/15/ACM/%E7%AE%97%E6%B3%95%E5%92%8C%E6%A8%A1%E6%9D%BF%E6%80%BB%E7%BB%93/%E5%8F%8C%E5%90%91%E5%B9%BF%E6%90%9C/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2021/01/15/ACM/%E7%AE%97%E6%B3%95%E5%92%8C%E6%A8%A1%E6%9D%BF%E6%80%BB%E7%BB%93/A-star%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2021/01/15/ACM/%E7%AE%97%E6%B3%95%E5%92%8C%E6%A8%A1%E6%9D%BF%E6%80%BB%E7%BB%93/%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97%E5%B9%BF%E6%90%9C%E5%92%8C%E5%A4%9A%E6%BA%90BFS/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2021/01/15/ACM/%E5%B7%A5%E5%85%B7/gdb/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>CSS基础知识</title>
    <url>/2020/11/13/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/CSS%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>搭建一个小型博客需要的前导知识</category>
      </categories>
  </entry>
  <entry>
    <title>for循环简写陷阱</title>
    <url>/2020/11/13/C++%E8%AF%AD%E8%A8%80%E7%BB%86%E8%8A%82/for%E5%BE%AA%E7%8E%AF%E7%BB%86%E8%8A%82/</url>
    <content><![CDATA[<h2 id="for循环细节"><a href="#for循环细节" class="headerlink" title="for循环细节"></a>for循环细节</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> a[N], b[N];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 统计字符串长度陷阱!!</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> s1, s2;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; a + <span class="number">1</span> &gt;&gt; b + <span class="number">1</span>;</span><br><span class="line">	<span class="comment">// 会隐藏外部的s1和s2</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, s1 = <span class="number">0</span>; a[i]; i++, s1++);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, s2 = <span class="number">0</span>; b[i]; i++, s2++);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 正确做法</span></span><br><span class="line">	s1 = s2 = <span class="number">0</span>;</span><br><span class="line">	<span class="comment">/* do something */</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C++细节</category>
      </categories>
  </entry>
  <entry>
    <title>构造函数成员初始化顺序</title>
    <url>/2020/11/13/C++%E8%AF%AD%E8%A8%80%E7%BB%86%E8%8A%82/%E6%88%90%E5%91%98%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%BA%E5%BA%8F/</url>
    <content><![CDATA[<h2 id="构造函数里的成员初始化顺序"><a href="#构造函数里的成员初始化顺序" class="headerlink" title="构造函数里的成员初始化顺序"></a>构造函数里的成员初始化顺序</h2><a id="more"></a>
<ul>
<li>我们以一个案例开头<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">int</span> j;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	X(<span class="keyword">int</span> val) : j(val),i(j) &#123; &#125; <span class="comment">// undefined</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li>C++类构造函数初始化成员时，顺序与该成员在类中出现的顺序一致，这也就是说，上面的类中<br>，即使构造函数初值列表中貌似时j先被初始化，实际上编译器先初始化了i，此时j未确定，会产生未定义的结果。</li>
<li>g++下编译给出如下警告:<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;xxx&#x27;</span> will be initialized after [-Wreorder].</span><br></pre></td></tr></table></figure></li>
<li>g++下生成汇编:<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="meta">	.file</span>	<span class="string">&quot;class.cpp&quot;</span></span><br><span class="line"><span class="meta">	.text</span></span><br><span class="line"><span class="meta">	.section</span> .rdata,<span class="string">&quot;dr&quot;</span></span><br><span class="line"><span class="symbol">_ZStL19piecewise_construct:</span></span><br><span class="line"><span class="meta">	.space</span> <span class="number">1</span></span><br><span class="line"><span class="meta">.lcomm</span> _ZStL8__ioinit,<span class="number">1</span>,<span class="number">1</span></span><br><span class="line"><span class="meta">	.section</span>	.text$_ZN1XC1Ei,<span class="string">&quot;x&quot;</span></span><br><span class="line"><span class="meta">	.linkonce</span> discard</span><br><span class="line"><span class="meta">	.align</span> <span class="number">2</span></span><br><span class="line"><span class="meta">	.globl</span>	_ZN1XC1Ei</span><br><span class="line"><span class="meta">	.def</span>	_ZN1XC1Ei<span class="comment">;	.scl	2;	.type	32;	.endef</span></span><br><span class="line"><span class="meta">	.seh_proc</span>	_ZN1XC1Ei</span><br><span class="line"><span class="symbol">_ZN1XC1Ei:</span></span><br><span class="line">	pushq	%rbp</span><br><span class="line"><span class="meta">	.seh_pushreg</span>	%rbp</span><br><span class="line">	<span class="keyword">movq</span>	%rsp, %rbp</span><br><span class="line"><span class="meta">	.seh_setframe</span>	%rbp, <span class="number">0</span></span><br><span class="line"><span class="meta">	.seh_endprologue</span></span><br><span class="line">	<span class="keyword">movq</span>	%rcx, <span class="number">16</span>(%rbp)</span><br><span class="line">	movl	%edx, <span class="number">24</span>(%rbp)</span><br><span class="line">	<span class="keyword">movq</span>	<span class="number">16</span>(%rbp), %rax</span><br><span class="line">	movl	<span class="number">4</span>(%rax), %edx</span><br><span class="line">	<span class="keyword">movq</span>	<span class="number">16</span>(%rbp), %rax</span><br><span class="line">	movl	%edx, (%rax)</span><br><span class="line">	<span class="keyword">movq</span>	<span class="number">16</span>(%rbp), %rax</span><br><span class="line">	movl	<span class="number">24</span>(%rbp), %edx</span><br><span class="line">	movl	%edx, <span class="number">4</span>(%rax)</span><br><span class="line">	<span class="keyword">nop</span></span><br><span class="line">	popq	%rbp</span><br><span class="line">	<span class="keyword">ret</span></span><br><span class="line"><span class="meta">	.seh_endproc</span></span><br><span class="line"><span class="meta">	.def</span>	__main<span class="comment">;	.scl	2;	.type	32;	.endef</span></span><br><span class="line"><span class="meta">	.text</span></span><br><span class="line"><span class="meta">	.globl</span>	main</span><br><span class="line"><span class="meta">	.def</span>	main<span class="comment">;	.scl	2;	.type	32;	.endef</span></span><br><span class="line"><span class="meta">	.seh_proc</span>	main</span><br><span class="line"><span class="symbol">main:</span></span><br><span class="line">	pushq	%rbp</span><br><span class="line"><span class="meta">	.seh_pushreg</span>	%rbp</span><br><span class="line">	<span class="keyword">movq</span>	%rsp, %rbp</span><br><span class="line"><span class="meta">	.seh_setframe</span>	%rbp, <span class="number">0</span></span><br><span class="line">	subq	<span class="number">$48</span>, %rsp</span><br><span class="line"><span class="meta">	.seh_stackalloc</span>	<span class="number">48</span></span><br><span class="line"><span class="meta">	.seh_endprologue</span></span><br><span class="line">	<span class="keyword">call</span>	__main</span><br><span class="line">	leaq	-<span class="number">8</span>(%rbp), %rax</span><br><span class="line">	movl	<span class="number">$3</span>, %edx</span><br><span class="line">	<span class="keyword">movq</span>	%rax, %rcx</span><br><span class="line">	<span class="keyword">call</span>	_ZN1XC1Ei</span><br><span class="line">	movl	<span class="number">$0</span>, %eax</span><br><span class="line">	addq	<span class="number">$48</span>, %rsp</span><br><span class="line">	popq	%rbp</span><br><span class="line">	<span class="keyword">ret</span></span><br><span class="line"><span class="meta">	.seh_endproc</span></span><br><span class="line"><span class="meta">	.def</span>	__tcf_0<span class="comment">;	.scl	3;	.type	32;	.endef</span></span><br><span class="line"><span class="meta">	.seh_proc</span>	__tcf_0</span><br><span class="line"><span class="symbol">__tcf_0:</span></span><br><span class="line">	pushq	%rbp</span><br><span class="line"><span class="meta">	.seh_pushreg</span>	%rbp</span><br><span class="line">	<span class="keyword">movq</span>	%rsp, %rbp</span><br><span class="line"><span class="meta">	.seh_setframe</span>	%rbp, <span class="number">0</span></span><br><span class="line">	subq	<span class="number">$32</span>, %rsp</span><br><span class="line"><span class="meta">	.seh_stackalloc</span>	<span class="number">32</span></span><br><span class="line"><span class="meta">	.seh_endprologue</span></span><br><span class="line">	leaq	_ZStL8__ioinit(%rip), %rcx</span><br><span class="line">	<span class="keyword">call</span>	_ZNSt8ios_base4InitD1Ev</span><br><span class="line">	<span class="keyword">nop</span></span><br><span class="line">	addq	<span class="number">$32</span>, %rsp</span><br><span class="line">	popq	%rbp</span><br><span class="line">	<span class="keyword">ret</span></span><br><span class="line"><span class="meta">	.seh_endproc</span></span><br><span class="line"><span class="meta">	.def</span>	_Z41__static_initialization_and_destruction_0ii<span class="comment">;	.scl	3;	.type	32;	.endef</span></span><br><span class="line"><span class="meta">	.seh_proc</span>	_Z41__static_initialization_and_destruction_0ii</span><br><span class="line"><span class="symbol">_Z41__static_initialization_and_destruction_0ii:</span></span><br><span class="line">	pushq	%rbp</span><br><span class="line"><span class="meta">	.seh_pushreg</span>	%rbp</span><br><span class="line">	<span class="keyword">movq</span>	%rsp, %rbp</span><br><span class="line"><span class="meta">	.seh_setframe</span>	%rbp, <span class="number">0</span></span><br><span class="line">	subq	<span class="number">$32</span>, %rsp</span><br><span class="line"><span class="meta">	.seh_stackalloc</span>	<span class="number">32</span></span><br><span class="line"><span class="meta">	.seh_endprologue</span></span><br><span class="line">	movl	%ecx, <span class="number">16</span>(%rbp)</span><br><span class="line">	movl	%edx, <span class="number">24</span>(%rbp)</span><br><span class="line">	cmpl	<span class="number">$1</span>, <span class="number">16</span>(%rbp)</span><br><span class="line">	<span class="keyword">jne</span>	.L7</span><br><span class="line">	cmpl	<span class="number">$65535</span>, <span class="number">24</span>(%rbp)</span><br><span class="line">	<span class="keyword">jne</span>	.L7</span><br><span class="line">	leaq	_ZStL8__ioinit(%rip), %rcx</span><br><span class="line">	<span class="keyword">call</span>	_ZNSt8ios_base4InitC1Ev</span><br><span class="line">	leaq	__tcf_0(%rip), %rcx</span><br><span class="line">	<span class="keyword">call</span>	atexit</span><br><span class="line"><span class="symbol">.L7:</span></span><br><span class="line">	<span class="keyword">nop</span></span><br><span class="line">	addq	<span class="number">$32</span>, %rsp</span><br><span class="line">	popq	%rbp</span><br><span class="line">	<span class="keyword">ret</span></span><br><span class="line"><span class="meta">	.seh_endproc</span></span><br><span class="line"><span class="meta">	.def</span>	_GLOBAL__sub_I_main<span class="comment">;	.scl	3;	.type	32;	.endef</span></span><br><span class="line"><span class="meta">	.seh_proc</span>	_GLOBAL__sub_I_main</span><br><span class="line"><span class="symbol">_GLOBAL__sub_I_main:</span></span><br><span class="line">	pushq	%rbp</span><br><span class="line"><span class="meta">	.seh_pushreg</span>	%rbp</span><br><span class="line">	<span class="keyword">movq</span>	%rsp, %rbp</span><br><span class="line"><span class="meta">	.seh_setframe</span>	%rbp, <span class="number">0</span></span><br><span class="line">	subq	<span class="number">$32</span>, %rsp</span><br><span class="line"><span class="meta">	.seh_stackalloc</span>	<span class="number">32</span></span><br><span class="line"><span class="meta">	.seh_endprologue</span></span><br><span class="line">	movl	<span class="number">$65535</span>, %edx</span><br><span class="line">	movl	<span class="number">$1</span>, %ecx</span><br><span class="line">	<span class="keyword">call</span>	_Z41__static_initialization_and_destruction_0ii</span><br><span class="line">	<span class="keyword">nop</span></span><br><span class="line">	addq	<span class="number">$32</span>, %rsp</span><br><span class="line">	popq	%rbp</span><br><span class="line">	<span class="keyword">ret</span></span><br><span class="line"><span class="meta">	.seh_endproc</span></span><br><span class="line"><span class="meta">	.section</span>	.ctors,<span class="string">&quot;w&quot;</span></span><br><span class="line"><span class="meta">	.align</span> <span class="number">8</span></span><br><span class="line"><span class="meta">	.quad</span>	_GLOBAL__sub_I_main</span><br><span class="line"><span class="meta">	.ident</span>	<span class="string">&quot;GCC: (x86_64-posix-sjlj-rev0, Built by MinGW-W64 project) 8.1.0&quot;</span></span><br><span class="line"><span class="meta">	.def</span>	_ZNSt8ios_base4InitD1Ev<span class="comment">;	.scl	2;	.type	32;	.endef</span></span><br><span class="line"><span class="meta">	.def</span>	_ZNSt8ios_base4InitC1Ev<span class="comment">;	.scl	2;	.type	32;	.endef</span></span><br><span class="line"><span class="meta">	.def</span>	atexit<span class="comment">;	.scl	2;	.type	32;	.endef</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>C++细节</category>
      </categories>
  </entry>
  <entry>
    <title>宏定义</title>
    <url>/2020/11/17/C++%E8%AF%AD%E8%A8%80%E7%BB%86%E8%8A%82/%E5%AE%8F%E5%AE%9A%E4%B9%89/</url>
    <content><![CDATA[<h2 id="C-宏-macro-的定义与使用"><a href="#C-宏-macro-的定义与使用" class="headerlink" title="C++宏(macro)的定义与使用"></a>C++宏(macro)的定义与使用</h2><a id="more"></a>
<ul>
<li>C++里的宏的执行方式很简单，就是直接进行替换，它不占用运行时间，但是会使得展开后代码变长。</li>
<li>普通宏定义注意事项</li>
</ul>
<p>1.宏名一般大写。<br>2.宏名替换发生在预处理阶段。<br>3.宏定义末尾一般不加分号。<br>4.宏定义不分配内存。<br>5.宏定义的作用域是其后的程序。<br>6.宏定义可以嵌套。</p>
<ul>
<li>带参宏</li>
</ul>
<p>1.尽量多加括号。<br>2.宏名和括号间不要有空格。<br>3.宏不做计算。</p>
<ul>
<li>一些基础宏定义方式<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dd double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX(A,B) ((A) &gt; (B)? A : B)</span></span><br></pre></td></tr></table></figure></li>
<li>特殊符号#和##</li>
</ul>
<p>1.#是转换符，它把一个符号直接转换成字符串，如下:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TOSTRING( S ) #S</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; TOSTRING( myTest );</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Tips:#@表示用单引号表示字符。<br>输出如下</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">myTest</span><br></pre></td></tr></table></figure>
<p>2.##是连接符，它把两个记号连接成一个，如下:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实际定义了x1和x2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEF_X( n ) x##n</span></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">DEF_X</span><span class="params">( <span class="number">1</span> )</span> </span>= <span class="number">4</span>;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">DEF_X</span><span class="params">( <span class="number">2</span> )</span> </span>= <span class="number">3</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>变参宏:一个十分有用的技术，它的使用有两种方式。</li>
</ul>
<p>1.不给变参名字，采用默认变参__VA_ARGS__代替可变参数，如下:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> print(s,...) printf(s,__VA_ARGS__)</span></span><br><span class="line">print(<span class="string">&quot;hello,I am %s,I am %d years old&quot;</span>,<span class="string">&quot;Joe&quot;</span>,<span class="number">18</span>);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>上面的这种做法是有一定问题的，因为按照常理我们可以只用printf打印字符串，像面这样做的话，如下代码</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">print(<span class="string">&quot;my life&quot;</span>);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>将被替换为print(“my life”,);这在g++下报错(MSVC不报错很奇怪…)。</p>
</blockquote>
<ul>
<li>解决方式有两种:</li>
</ul>
<p>1.采用转换符#，因为__VA_ARGS__无值，所以#__VA_ARGS__将其转换为空字符串，而字符串的拼接操作时被允许的。<br>2.采用连接符##，原理一样，不再赘述。</p>
<p>2.给变参起名字(常用名字有args等等)，如下演示:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> prints(s,args...) fprintf(stderr,s,args)</span></span><br><span class="line">prints(hello, I am % s, I am % d years old<span class="string">&quot;,&quot;</span>Joe<span class="string">&quot;,18);</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>若变参为空，解决方式和上面的默认变参宏一样。(MSVC下第二种方式竟然报错)。</p>
</blockquote>
<ul>
<li>预定义宏: 编译器支持且默认自带的宏，常见的有<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cout</span> &lt;&lt; __LINE__ &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 返回当前行号</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; __FILE__ &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 当前文件名(绝对路径)</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; __TIME__ &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 当前文件编译时间</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; __DATE__ &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 编译日期</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; __TIMESTAMP__ &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 最后一次修改源代码的时间</span></span><br></pre></td></tr></table></figure></li>
<li>补充一个有用的技术，它使得C++编译后的函数名称修饰方式和C语言相同，采用了预定义宏__cplusplus<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">.........<span class="keyword">do</span> something</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>简而言之，如上代码使得重载非法，因为C语言不支持函数重载。</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>C++细节</category>
      </categories>
  </entry>
  <entry>
    <title>HTML基础知识</title>
    <url>/2020/11/13/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/HTML%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="HTML基础篇"><a href="#HTML基础篇" class="headerlink" title="HTML基础篇"></a><strong>HTML基础篇</strong></h2><blockquote>
<p>超文本标记语言（英语：HyperText Markup Language，简称：HTML）是一种用于创建网页的标准标记语言。</p>
</blockquote>
<a id="more"></a>
<ul>
<li><input disabled="" type="checkbox"> HTML的基本框架<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>这是小徐的html页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这里是标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p1</span>&gt;</span>这里是第一段<span class="tag">&lt;/<span class="name">p1</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>注意:HTML中<xxx>代表一个标记，标记通常是成对存在的。</li>
<li><input disabled="" type="checkbox"> 如何开始编辑HTML</li>
</ul>
<p>1.直接采用记事本，具体操作很简单:鼠标停留在桌面–&gt;右键–&gt;建立文本文件–&gt;键入代码块–&gt;修改文件后缀为.html–&gt;保存文件–&gt;再次打开该文件。</p>
<blockquote>
<p>值得注意的是，默认解释html文件的浏览器是你电脑上设置的默认浏览器，windows用户默认浏览器可在设置里修改。</p>
</blockquote>
<p>2.使用VScode、sublime Text等文本编辑器进行html文件的编写。</p>
<ul>
<li><p><input disabled="" type="checkbox">  HTML中的保留字<br> 所谓保留字，就是一组html语法规范里出现的关键字或者符号，包括&lt;和&gt;等等，浏览器在遇到这些符号时会不清楚到底是一个标签还是小于号/大于号。我们可以用实体数字来解决此问题。常见的实体数字如下:</p>
<table>
<thead>
<tr>
<th>保留字</th>
<th>实体名称(不推荐)</th>
<th>实体编号</th>
</tr>
</thead>
<tbody><tr>
<td>&lt;</td>
<td>&amp;it</td>
<td>&amp;#60</td>
</tr>
<tr>
<td>&gt;</td>
<td>&amp;gt</td>
<td>&amp;#62</td>
</tr>
<tr>
<td>空格</td>
<td>&amp;nbsp</td>
<td>&amp;#160</td>
</tr>
</tbody></table>
</li>
<li><p><input disabled="" type="checkbox">  HTML标题<br>HTML标题，也称heading，是通过h1到h6六个标签定义的，标题会被默认显示成大字、粗体。我们给出实例:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是第一个标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>这是第二个标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p><input disabled="" type="checkbox">  HTML段落<br>HTML段落，也称paragraph，是通过p标签定义的。我们给出实例:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>Tips:默认情况下浏览器会在标题前后增加默认空行，会在块级元素后增加一个空行。<br>标题不可做他用，搜索引擎用标题为网页的结构和内容编制索引。<br>网页标题从h1到h6优先级递减。</p>
</blockquote>
</li>
<li><p><input disabled="" type="checkbox">  HTML水平线<br>HTML水平线，用来在界面中分割内容，用hr表示，我们给出实例:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">hr</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>第一部分<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hr</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>第二部分<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hr</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p><input disabled="" type="checkbox">  HTML注释<br>注释是给编写代码的人看的，不会影响网页结构，格式如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这里是注释 --&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><input disabled="" type="checkbox">  HTML链接<br>HTML链接，也称link，是通过a标签定义的。我们给出实例:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;joe-sdu.top&quot;</span>&gt;</span>顺着网线就能找到小徐!<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>其中href后面跟着的是链接地址，两个标签里的话是网页显示的文字，点击这句话就能跳转。</p>
</li>
<li><p><input disabled="" type="checkbox">  HTML图像<br>HTML图像，是通过img标签定义的。我们给出实例:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;C:/Users/images/小徐的照片屋&quot;</span> <span class="attr">width</span> = <span class="string">&quot;100&quot;</span> <span class="attr">height</span> = <span class="string">&quot;200&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>这个例子似乎有点特殊，原因在于，它没有成对的标签，而是在一个标签里加入了/，同时它引入了几个属性，src:也称source，代表存放图片的路径，width:希望展示图片的宽度，height:希望展示图片的高度。</p>
</li>
<li><p><input disabled="" type="checkbox">  HTML元素<br>HTML元素，指的是在开始标记和结束标记之间的内容(也就是上面所说的一对标签之内的内容)。HTML元素语法如下:</p>
</li>
<li><p>HTML元素以开始标记为起始。</p>
</li>
<li><p>HTML元素以结束标记为结束。</p>
</li>
<li><p>HTML元素内容是位于开始和结束标签之间的内容。</p>
</li>
<li><p>HTML某些元素具有空内容。</p>
</li>
<li><p>HTML空元素在开始标记中就结束。</p>
</li>
<li><p>HTML大多数元素可以拥有属性，比如上面的img。</p>
</li>
<li><p>HTML元素可以嵌套，简而言之就是一个元素中可以包含其他元素。<br>我们针对一些特殊的HTML元素进行解释:</p>
</li>
<li><p>HTML中的html元素，它定义了整个html文档。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	这里是其他元素内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>HTML中的body元素，它定义了文档的主体。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	这里是其他元素内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>HTML中的空元素，以换行为例:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>Tips:html中的标签最好采用小写，即使html对大小写并不敏感。</p>
</blockquote>
</li>
<li><p><input disabled="" type="checkbox">  HTML属性</p>
</li>
<li><p>HTML中的属性总是以键值对的形式出现，且在开始标签中规定，属性值总是要打引号，属性采用小写(尽管html不区分大小写)。我们给出一些针对性属性及其含义:</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>定义的标签</th>
<th>符号</th>
</tr>
</thead>
<tbody><tr>
<td>链接</td>
<td>a</td>
<td>href</td>
</tr>
<tr>
<td>居中排列标题</td>
<td>h</td>
<td>align</td>
</tr>
<tr>
<td>背景颜色</td>
<td>body</td>
<td>bgcolor</td>
</tr>
<tr>
<td>表格边框</td>
<td>table</td>
<td>boder</td>
</tr>
</tbody></table>
</li>
<li><p>下面是一些适用于大多数HTML元素的属性:</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>符号</th>
</tr>
</thead>
<tbody><tr>
<td>规定元素的内容</td>
<td>class</td>
</tr>
<tr>
<td>规定元素唯一的id</td>
<td>id</td>
</tr>
<tr>
<td>规定元素的行内样式</td>
<td>style</td>
</tr>
<tr>
<td>规定元素额外的信息</td>
<td>title</td>
</tr>
</tbody></table>
<p><a href="https://www.w3schools.com/html/">更多具体属性可点击查看</a></p>
</li>
<li><p><input disabled="" type="checkbox">  HTML样式<br>HTML样式通过style属性来设置，在以前，有些样式可以通过一些标签和属性来实现。然而在HTML的发展过程中，有些标签和属性逐渐被淘汰，我们应该尽量避免使用，它们是:</p>
<table>
<thead>
<tr>
<th>标签名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>center</td>
<td>定义居中的内容</td>
</tr>
<tr>
<td>font/basefont</td>
<td>定义字体</td>
</tr>
<tr>
<td>s/strike</td>
<td>定义删除线文本</td>
</tr>
<tr>
<td>u</td>
<td>定义下划线文本</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>属性名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>align</td>
<td>定义文字对齐方式</td>
</tr>
<tr>
<td>bgcolor</td>
<td>定义背景颜色</td>
</tr>
<tr>
<td>color</td>
<td>定义文本颜色</td>
</tr>
</tbody></table>
</li>
<li><p>我们用对应的样式代替上面的标签和属性:</p>
</li>
</ul>
<p>1.用background-color样式代替bgcolor:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">style</span> = <span class="string">&quot;background-color:green&quot;</span>&gt;</span> <span class="comment">&lt;!-- 这是绿色的主体 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span> = <span class="string">&quot;background-color:red&quot;</span>&gt;</span>这是红色的标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span> = <span class="string">&quot;background-color:blue&quot;</span>&gt;</span>这是蓝色的段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="HTML进阶篇"><a href="#HTML进阶篇" class="headerlink" title="HTML进阶篇"></a>HTML进阶篇</h2><p><strong>小徐还没来得及写哦~</strong></p>
<h2 id="很适合学习的时候听的歌呀"><a href="#很适合学习的时候听的歌呀" class="headerlink" title="很适合学习的时候听的歌呀!"></a>很适合学习的时候听的歌呀!</h2><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=35847042&auto=1&height=66"></iframe>]]></content>
      <categories>
        <category>搭建一个小型博客需要的前导知识</category>
      </categories>
  </entry>
  <entry>
    <title>Javascript基础知识</title>
    <url>/2020/11/13/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/Javascript%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>搭建一个小型博客需要的前导知识</category>
      </categories>
  </entry>
  <entry>
    <title>git</title>
    <url>/2021/01/30/%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%B7%A5%E5%85%B7/git/</url>
    <content><![CDATA[<h3 id="git"><a href="#git" class="headerlink" title="git"></a>git</h3><a id="more"></a>

<h5 id="git基本命令"><a href="#git基本命令" class="headerlink" title="git基本命令"></a>git基本命令</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add (filename, ., *)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git commit -m &#39;description&#39;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git reflog &#x2F;&#x2F; 返回滚</span><br></pre></td></tr></table></figure>



<h5 id="git三大区域"><a href="#git三大区域" class="headerlink" title="git三大区域"></a>git三大区域</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">工作区:红色，待管理的文件和新修改的文件存储于此。</span><br><span class="line">暂存区:绿色，通过git add提交的文件。</span><br><span class="line">版本库:无色，通过git commit提交的文件。</span><br></pre></td></tr></table></figure>



<h5 id="git回滚"><a href="#git回滚" class="headerlink" title="git回滚"></a>git回滚</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git reset --hard + 版本号(git (ref)log查看): 从版本库直接切回工作区未管理分区</span><br><span class="line">git reset --mix + 版本号: 从版本库直接切回工作区已经管理的分区</span><br><span class="line">git reset --soft + 版本号: 从版本库切回暂存区</span><br><span class="line">git reset HEAD + 文件名: 从暂存区切到工作区已管理分区</span><br><span class="line">git checkout -- + 文件名: 把已经修改的工作区文件变成未被修改状态</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>实用工具</category>
      </categories>
  </entry>
  <entry>
    <title>linux入门</title>
    <url>/2020/11/13/%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%B7%A5%E5%85%B7/linux/</url>
    <content><![CDATA[<h2 id="我的linux初体验"><a href="#我的linux初体验" class="headerlink" title="我的linux初体验"></a>我的linux初体验</h2><a id="more"></a>

]]></content>
      <categories>
        <category>实用工具</category>
      </categories>
  </entry>
  <entry>
    <title>npm的使用</title>
    <url>/2020/11/13/%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%B7%A5%E5%85%B7/npm/</url>
    <content><![CDATA[<h2 id="npm介绍"><a href="#npm介绍" class="headerlink" title="npm介绍"></a>npm介绍</h2><p>npm，全称Node package manager，是一个方便快捷的包管理器。它的发展与node.js相辅相成。<br>什么是包管理器呢?其实理解起来很简单，就是帮助我们管理一大堆代码的仓库，有了它以后，我们需要啥代码就可以直接在里面拿。</p>
<h2 id="npm的常用命令"><a href="#npm的常用命令" class="headerlink" title="npm的常用命令"></a>npm的常用命令</h2><ul>
<li>npm install package<blockquote>
<p>此命令下载package</p>
</blockquote>
</li>
<li>npm uninstall package<blockquote>
<p>此命令卸载package</p>
</blockquote>
</li>
<li>npm ls<blockquote>
<p>此命令查看本地全部的package</p>
</blockquote>
</li>
<li>npm search package<blockquote>
<p>此命令查询package的详细信息</p>
</blockquote>
</li>
<li>npm -v<blockquote>
<p>此命令查看当前npm的版本</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>实用工具</category>
      </categories>
  </entry>
  <entry>
    <title>主定理的应用</title>
    <url>/2020/11/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%A0%E9%A2%98%E7%AD%94%E6%A1%88/%E4%B8%BB%E5%AE%9A%E7%90%86%E7%9A%84%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<h2 id="何为主定理"><a href="#何为主定理" class="headerlink" title="何为主定理?"></a>何为主定理?</h2><ul>
<li><input disabled="" type="checkbox"> Wikipedia对主定理的描述是:它提供了渐进大O表示许多由分治法得到的递推式的方法。详细介绍可以参考算法导论。<blockquote>
<p>Tips: 不是所有递推关系式都可以用主定理。</p>
</blockquote>
<a id="more"></a>

</li>
</ul>
<h2 id="主定理通常的应用情形"><a href="#主定理通常的应用情形" class="headerlink" title="主定理通常的应用情形"></a>主定理通常的应用情形</h2><ul>
<li>假设有递推式:<br>$$ T(n) = aT(\dfrac {n}{b})+f(n), 其中a\geq1, b&gt;1 $$<br>其中，n是问题的规模，a为子问题数量，\dfrac {n}{b}为每个子问题的规模, f(n)是除递归外额外的工作。那么主定理通常有以下形式:<table>
<thead>
<tr>
<th>递推关系式</th>
<th>时间复杂度</th>
</tr>
</thead>
<tbody><tr>
<td>$$T(n) = T(\dfrac {n}{2}) + \varTheta(1)$$</td>
<td>$$\varTheta(\log n)$$</td>
</tr>
<tr>
<td>$$T(n) = 2T(\dfrac {n}{2}) + \varTheta(1)$$</td>
<td>$$\varTheta(n)$$</td>
</tr>
<tr>
<td>$$T(n) = 2T(\dfrac {n}{2}) + O(\log n)$$</td>
<td>$$\varTheta(n)$$</td>
</tr>
<tr>
<td>$$T(n) = 2T(\dfrac {n}{2}) + \varTheta(n)$$</td>
<td>$$\varTheta(n\log n)$$</td>
</tr>
</tbody></table>
</li>
</ul>
<h2 id="参考文献和资料"><a href="#参考文献和资料" class="headerlink" title="参考文献和资料"></a>参考文献和资料</h2><ul>
<li>Wikipedia，2020年10月12日更新版。</li>
<li>算法导论。</li>
<li>Michael T. Goodrich and Roberto Tamassia. Algorithm Design: Foundation, Analysis, and Internet Examples. Wiley, 2002. ISBN 0-471-38365-1. The master theorem (including the version of Case 2 included here, which is stronger than the one from CLRS) is on pp. 268–270.</li>
</ul>
]]></content>
      <categories>
        <category>数据结构与算法习题答案(机械工业出版社)</category>
      </categories>
  </entry>
  <entry>
    <title>关于数据结构与算法的一点约定</title>
    <url>/2020/11/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%A0%E9%A2%98%E7%AD%94%E6%A1%88/%E5%89%8D%E8%A8%80/</url>
    <content><![CDATA[<h2 id="代码约定"><a href="#代码约定" class="headerlink" title="代码约定"></a>代码约定</h2><ul>
<li><input disabled="" type="checkbox"> 代码块统一采用Times New Roman字体，点击右上角即可复制。</li>
<li><input disabled="" type="checkbox"> 代码在MSVC上编译通过，理论上只要环境相同copy下来就能跑。<a id="more"></a>
<blockquote>
<p>我的编译环境: </p>
</blockquote>
</li>
<li>IDE: Microsoft Visual Studio 2019</li>
<li>Target: x86_64-w64-mingw32</li>
<li>gcc: gcc version 8.1.0 (x86_64-posix-sjlj-rev0, Built by MinGW-W64 project)</li>
</ul>
<h2 id="答案约定"><a href="#答案约定" class="headerlink" title="答案约定"></a>答案约定</h2><ul>
<li><input disabled="" type="checkbox"> 有错的答案请私信回复我哈。</li>
</ul>
<h2 id="重复代码约定"><a href="#重复代码约定" class="headerlink" title="重复代码约定"></a>重复代码约定</h2><ul>
<li><input disabled="" type="checkbox"> 如果某代码在前面已经给出，后面不再赘述，只是简单提及。</li>
</ul>
<h2 id="题目顺序约定"><a href="#题目顺序约定" class="headerlink" title="题目顺序约定"></a>题目顺序约定</h2><ul>
<li><input disabled="" type="checkbox"> 题目不会按照第一题到最后一题的顺序给出，而是在比较自然的地方引入。题目前会标注题号。</li>
</ul>
]]></content>
      <categories>
        <category>数据结构与算法习题答案(机械工业出版社)</category>
      </categories>
  </entry>
  <entry>
    <title>跳表和散列</title>
    <url>/2020/11/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%A0%E9%A2%98%E7%AD%94%E6%A1%88/%E8%B7%B3%E8%A1%A8%E5%92%8C%E6%95%A3%E5%88%97/</url>
    <content><![CDATA[<p>鉴于自己在看机械工业出版社的数据结构时，常常苦于没有答案，便觉得有必要整理出一份自己的答案，虽然不一定完全正确，实现也不一定高效，但总有些参考价值叭。</p>
<a id="more"></a>
<h2 id="字典在教材上实现"><a href="#字典在教材上实现" class="headerlink" title="字典在教材上实现"></a>字典在教材上实现</h2><ul>
<li>纯虚基类<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> DICTIONARY_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DICTIONARY_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">pair</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K,<span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">dictionary</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">virtual</span> ~dictionary() &#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">	virtual pair&lt;const K, E&gt;* find(const K&amp; theKey) const = 0;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">const</span> <span class="built_in">pair</span>&lt;<span class="keyword">const</span> K, E&gt;&amp; thePair)</span> </span>= <span class="number">0</span>;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">erase</span><span class="params">(<span class="keyword">const</span> K&amp; theKey)</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></li>
<li>头节点<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> PAIRNODE_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PAIRNODE_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K,<span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pairNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="built_in">pair</span>&lt;<span class="keyword">const</span> K, E&gt; element;</span><br><span class="line">	pairNode&lt;K, E&gt;* next;</span><br><span class="line">	pairNode() &#123;&#125;</span><br><span class="line">	pairNode(<span class="keyword">const</span> <span class="built_in">pair</span>&lt;<span class="keyword">const</span> K, E&gt;&amp; thePair) : element(thePair) &#123;&#125;</span><br><span class="line">	pairNode(<span class="keyword">const</span> <span class="built_in">pair</span>&lt;<span class="keyword">const</span> K, E&gt;&amp; thePair, pairNode&lt;K, E&gt;* theNext)</span><br><span class="line">		: element(thePair), next(theNext) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></li>
<li>链式实现<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> SORTEDCHAIN_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SORTEDCHAIN_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;dictionary.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;pairNode.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* @copyright: all rights reserved.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* @author: Joe-sdu.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* @date: Nov.21.2020</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K,<span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">sortedChain</span> :</span> <span class="keyword">public</span> dictionary&lt;K, E&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	sortedChain();</span><br><span class="line">	~sortedChain();</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">override</span> </span>&#123; <span class="keyword">return</span> dictSize == <span class="number">0</span>; &#125; <span class="comment">// C++11</span></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">override</span> </span>&#123; <span class="keyword">return</span> dictSize; &#125; <span class="comment">// C++11</span></span><br><span class="line">	pair&lt;const K, E&gt;* find(const K&amp; theKey) const;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">const</span> <span class="built_in">pair</span>&lt;<span class="keyword">const</span> K, E&gt;&amp; thePair)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">erase</span><span class="params">(<span class="keyword">const</span> K&amp; theKey)</span></span>;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">		Explanation:</span></span><br><span class="line"><span class="comment">		1. find return nullptr when we can&#x27;t find the element.</span></span><br><span class="line"><span class="comment">		2. erase do nothing when we can&#x27;t find the element.</span></span><br><span class="line"><span class="comment">		find、insert and erase cost: O(dictSize).</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	pairNode&lt;K, E&gt;* firstNode;</span><br><span class="line">	<span class="keyword">int</span> dictSize;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K,<span class="keyword">typename</span> E&gt;</span><br><span class="line">sortedChain&lt;K, E&gt;::sortedChain()</span><br><span class="line">&#123;</span><br><span class="line">	firstNode = <span class="literal">nullptr</span>;</span><br><span class="line">	dictSize = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K,<span class="keyword">typename</span> E&gt;</span><br><span class="line">sortedChain&lt;K, E&gt;::~sortedChain()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">while</span> (firstNode != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">		pairNode&lt;K, E&gt;* nextNode = firstNode-&gt;next;</span><br><span class="line">		<span class="keyword">delete</span> firstNode;</span><br><span class="line">		firstNode = nextNode;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K,<span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="built_in">pair</span>&lt;<span class="keyword">const</span> K, E&gt;* sortedChain&lt;K, E&gt;::find(<span class="keyword">const</span> K&amp; theKey)<span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">	pairNode&lt;K, E&gt;* currNode = firstNode;</span><br><span class="line">	<span class="keyword">while</span> (currNode != <span class="literal">nullptr</span> &amp;&amp; currNode-&gt;element.first &lt; theKey) &#123;</span><br><span class="line">		currNode = currNode-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (currNode != <span class="literal">nullptr</span> &amp;&amp; currNode-&gt;element.first == theKey) <span class="keyword">return</span> &amp;currNode-&gt;element;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K,<span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="keyword">void</span> sortedChain&lt;K, E&gt;::insert(<span class="keyword">const</span> <span class="built_in">pair</span>&lt;<span class="keyword">const</span> K, E&gt;&amp; thePair)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">		three situations:</span></span><br><span class="line"><span class="comment">		1. no element.</span></span><br><span class="line"><span class="comment">		2. insert in the middle.</span></span><br><span class="line"><span class="comment">		3. had the key before.</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	pairNode&lt;K, E&gt;* currNode = firstNode, trailNode = <span class="literal">nullptr</span>;</span><br><span class="line">	<span class="keyword">while</span> (currNode != <span class="literal">nullptr</span> &amp;&amp; currNode-&gt;element.first &lt; thePair.first) &#123;</span><br><span class="line">		trailNode = currNode;</span><br><span class="line">		currNode = currNode-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (currNode != <span class="literal">nullptr</span> &amp;&amp; currNode-&gt;element.first == thePair.first) &#123;</span><br><span class="line">		currNode-&gt;element.second = thePair.second; <span class="comment">// update</span></span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	pairNode&lt;K, E&gt;* newNode = <span class="keyword">new</span> pairNode(thePair, currNode);</span><br><span class="line">	<span class="keyword">if</span> (trailNode == <span class="literal">nullptr</span>) firstNode = newNode;</span><br><span class="line">	<span class="keyword">else</span> trailNode-&gt;next = newNode;</span><br><span class="line">	dictSize++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K,<span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="keyword">void</span> sortedChain&lt;K, E&gt;::erase(<span class="keyword">const</span> K&amp; theKey)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">		Two situations:</span></span><br><span class="line"><span class="comment">		1. erase firstNode.</span></span><br><span class="line"><span class="comment">		2. not find.</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	pairNode&lt;K, E&gt;* currNode = firstNode, trailNode = <span class="literal">nullptr</span>;</span><br><span class="line">	<span class="keyword">while</span> (currNode != <span class="literal">nullptr</span> &amp;&amp; currNode-&gt;element.first &lt; theKey) &#123;</span><br><span class="line">		trailNode = currNode;</span><br><span class="line">		currNode = currNode-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (currNode != <span class="literal">nullptr</span> &amp;&amp; currNode-&gt;element.first == theKey) &#123;</span><br><span class="line">		pairNode&lt;K, E&gt;* deleteNode = currNode;</span><br><span class="line">		<span class="keyword">if</span> (trailNode == <span class="literal">nullptr</span>) firstNode = currNode-&gt;next;</span><br><span class="line">		<span class="keyword">else</span> trailNode-&gt;next = currNode-&gt;next;</span><br><span class="line">		<span class="keyword">delete</span> currNode;</span><br><span class="line">		dictSize--;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>数据结构与算法习题答案(机械工业出版社)</category>
      </categories>
  </entry>
  <entry>
    <title>队列</title>
    <url>/2020/11/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%A0%E9%A2%98%E7%AD%94%E6%A1%88/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84--%E9%98%9F%E5%88%97/</url>
    <content><![CDATA[<p>鉴于自己在看机械工业出版社的数据结构时，常常苦于没有答案，便觉得有必要整理出一份自己的答案，虽然不一定完全正确，实现也不一定高效，但总有些参考价值叭。</p>
<a id="more"></a>
<h2 id="队列类的实现"><a href="#队列类的实现" class="headerlink" title="队列类的实现"></a>队列类的实现</h2><blockquote>
<p>队列的实现较为简单，我们给出具体的类，然后再讨论队列的习题。</p>
</blockquote>
<ul>
<li>纯虚基类<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> QUEUE_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> QUEUE_H_</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">queue</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">virtual</span> ~<span class="built_in">queue</span>() &#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> T&amp; <span class="title">front</span><span class="params">()</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> T&amp; <span class="title">back</span><span class="params">()</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">const</span> T&amp; theElement)</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></li>
<li>数组实现的队列<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 总是要从别的文件粘贴栈过来好烦，用stl又不太正经</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ARRAYQUEUE_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ARRAYQUEUE_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;PureBaseQueue.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">arrayQueue</span> :</span> <span class="keyword">public</span> <span class="built_in">queue</span>&lt;T&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	arrayQueue(<span class="keyword">int</span> initialCapacity = <span class="number">20</span>);</span><br><span class="line">	~arrayQueue() &#123; <span class="keyword">delete</span>[]element; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> theFront == theBack; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> (theBack - theFront + arrayLength) % arrayLength; &#125;</span><br><span class="line">	<span class="function">T&amp; <span class="title">front</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">	<span class="function">T&amp; <span class="title">back</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">const</span> T&amp; theElement)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	T* element;</span><br><span class="line">	<span class="keyword">int</span> theFront;</span><br><span class="line">	<span class="keyword">int</span> theBack;</span><br><span class="line">	<span class="keyword">int</span> arrayLength;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">arrayQueue&lt;T&gt;::arrayQueue(<span class="keyword">int</span> initialCapacity)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">		<span class="keyword">throw</span>;</span><br><span class="line">	arrayLength = initialCapacity;</span><br><span class="line">	theFront = theBack = <span class="number">0</span>;</span><br><span class="line">	element = <span class="keyword">new</span> T[initialCapacity];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">T&amp; arrayQueue&lt;T&gt;::front() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (theFront == theBack)</span><br><span class="line">		<span class="keyword">throw</span>;</span><br><span class="line">	<span class="keyword">return</span> element[(theFront + <span class="number">1</span>) % arrayLength];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">T&amp; arrayQueue&lt;T&gt;::back() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (theFront == theBack)</span><br><span class="line">		<span class="keyword">throw</span>;</span><br><span class="line">	<span class="keyword">return</span> element[theBack];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">void</span> arrayQueue&lt;T&gt;::pop()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (theFront == theBack)</span><br><span class="line">		<span class="keyword">throw</span>;</span><br><span class="line">	theFront = (theFront + <span class="number">1</span>) % arrayLength;</span><br><span class="line">	element[theFront].~T();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">void</span> arrayQueue&lt;T&gt;::push(<span class="keyword">const</span> T&amp; theElement)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> ((theBack + <span class="number">1</span>) % arrayLength == theFront)</span><br><span class="line">	&#123;</span><br><span class="line">		T* newQueue = <span class="keyword">new</span> T[<span class="number">2</span> * arrayLength];</span><br><span class="line">		<span class="keyword">int</span> start = (theFront + <span class="number">1</span>) % arrayLength;</span><br><span class="line">		<span class="keyword">if</span> (start &lt; <span class="number">2</span>)</span><br><span class="line">			<span class="built_in">std</span>::copy(element + start, element + start + arrayLength - <span class="number">1</span>, newQueue);</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">std</span>::copy(element + start, element + arrayLength, newQueue);</span><br><span class="line">			<span class="built_in">std</span>::copy(element, element + theBack + <span class="number">1</span>, newQueue + arrayLength - start);</span><br><span class="line">		&#125;</span><br><span class="line">		theFront = <span class="number">2</span> * arrayLength - <span class="number">1</span>;</span><br><span class="line">		theBack = arrayLength - <span class="number">2</span>;</span><br><span class="line">		arrayLength *= <span class="number">2</span>;</span><br><span class="line">		<span class="keyword">delete</span>[]element;</span><br><span class="line">		element = newQueue;</span><br><span class="line">	&#125;</span><br><span class="line">	theBack = (theBack + <span class="number">1</span>) % arrayLength;</span><br><span class="line">	element[theBack] = theElement;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></li>
<li>链表实现的队列<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// created on Oct.23.2020 by Joe</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> LINKEDQUEUE_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LINKEDQUEUE_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;PureBaseQueue.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">chainNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	T element;</span><br><span class="line">	chainNode&lt;T&gt;* next;</span><br><span class="line">	chainNode() = <span class="keyword">default</span>;</span><br><span class="line">	chainNode(<span class="keyword">const</span> T&amp; theElement) : element(theElement) &#123;&#125;</span><br><span class="line">	chainNode(<span class="keyword">const</span> T&amp; theElement, chainNode&lt;T&gt;* theNext) : element(theElement), next(theNext) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">linkedQueue</span> :</span> <span class="keyword">public</span> <span class="built_in">queue</span>&lt;T&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	linkedQueue(<span class="keyword">int</span> initialCapacity = <span class="number">20</span>);</span><br><span class="line">	~linkedQueue();</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> queueSize == <span class="number">0</span>; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> queueSize; &#125;</span><br><span class="line">	<span class="function">T&amp; <span class="title">front</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">	<span class="function">T&amp; <span class="title">back</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">const</span> T&amp; theElement)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	chainNode&lt;T&gt;* theFront;</span><br><span class="line">	chainNode&lt;T&gt;* theBack;</span><br><span class="line">	<span class="keyword">int</span> queueSize;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">linkedQueue&lt;T&gt;::linkedQueue(<span class="keyword">int</span> initialCapacity)</span><br><span class="line">&#123;</span><br><span class="line">	theFront = theBack = <span class="literal">nullptr</span>;</span><br><span class="line">	queueSize = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">linkedQueue&lt;T&gt;::~linkedQueue()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">while</span> (theFront != <span class="literal">nullptr</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		chainNode&lt;T&gt;* nextNode = theFront-&gt;next;</span><br><span class="line">		<span class="keyword">delete</span> theFront;</span><br><span class="line">		theFront = nextNode;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">T&amp; linkedQueue&lt;T&gt;::front() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (queueSize == <span class="number">0</span>)</span><br><span class="line">		<span class="keyword">throw</span>;</span><br><span class="line">	<span class="keyword">return</span> theFront-&gt;element;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">T&amp; linkedQueue&lt;T&gt;::back() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (queueSize == <span class="number">0</span>)</span><br><span class="line">		<span class="keyword">throw</span>;</span><br><span class="line">	<span class="keyword">return</span> theBack-&gt;element;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">void</span> linkedQueue&lt;T&gt;::pop()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (queueSize == <span class="number">0</span>)</span><br><span class="line">		<span class="keyword">throw</span>;</span><br><span class="line">	chainNode&lt;T&gt;* nextNode = theFront-&gt;next;</span><br><span class="line">	<span class="keyword">delete</span> theFront;</span><br><span class="line">	theFront = nextNode;</span><br><span class="line">	queueSize--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">void</span> linkedQueue&lt;T&gt;::push(<span class="keyword">const</span> T&amp; theElement)</span><br><span class="line">&#123;</span><br><span class="line">	chainNode&lt;T&gt;* newNode = <span class="keyword">new</span> chainNode&lt;T&gt;(theElement, <span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">if</span> (queueSize == <span class="number">0</span>)</span><br><span class="line">		theFront = theBack = newNode;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		theBack-&gt;next = newNode;</span><br><span class="line">		theBack = newNode;</span><br><span class="line">	&#125;</span><br><span class="line">	queueSize++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>数据结构与算法习题答案(机械工业出版社)</category>
      </categories>
  </entry>
  <entry>
    <title>Latex介绍</title>
    <url>/2020/11/15/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91/latex/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>文本编辑工具</category>
      </categories>
  </entry>
  <entry>
    <title>Markdown介绍</title>
    <url>/2020/11/15/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91/markdown/</url>
    <content><![CDATA[<a id="more"></a>
<h2 id="MarkDown编辑代码块"><a href="#MarkDown编辑代码块" class="headerlink" title="MarkDown编辑代码块"></a>MarkDown编辑代码块</h2>]]></content>
      <categories>
        <category>文本编辑工具</category>
      </categories>
  </entry>
  <entry>
    <title>ACM</title>
    <url>/2020/11/22/%E8%AE%B0%E5%BD%95%E7%94%9F%E6%B4%BB/acm%E5%85%A5%E9%98%9F/</url>
    <content><![CDATA[<h2 id="ACM"><a href="#ACM" class="headerlink" title="ACM"></a>ACM</h2><a id="more"></a>
<p>很早就想打ACM了，其实是因为长期以来的颓废、盲目和人际交往上的压力让我不得不去找点事做。ACM是不二之选。<br>我也愿意投入很长很长的时间去学习、去提高。<br>当然，我深知自己已然不可能成为TopCoder，因为当我还在迷茫的时候，早就有无数像我一样热爱的人们踏上了他们的征途。<br>我也没想过夺金，只希望能够不留遗憾吧。<br>第一次接触编程，大概是在2019年年底，更确切地说，开始接触代码是在2020年二月，中途也断过几个月。八个月以来，其实自己并没有学很多东西，就算学了也不深入，因为自己不确定学的东西是不是有用，尤其是当自己看到一些可能用不到的算法的时候。最开始接触到的语言是C语言，起初我以为学完一门语言，就能做出任何想做的东西(新手的幼稚想法)。后来慢慢接触了C++语言，这也是我目前用的最多的语言啦!五月份到八月份还零星地学了些Python和Js。我并不是个智力很好的人，我在初中高中时也并没有很出彩，大多时候都是靠时间叠经验。高二的时候常听见背后有人说我只会学习，当时感觉很难受，于是在紧张的高二暑假我还跑去学了吉他。高三的时候又迷恋上了羽毛球，几乎一有时间就去打。大家的议论确实改变了我的行为。但那只是从前，现在绝对不可能了。前几天看见高中的同学(如果你看见了的话我还是得对高中说过的话感到抱歉)说进了大学就变了个人了，我实在不能更认同她的话了。但是我确实一直在追求着喜欢的事情，这点让我很骄傲(即使越来越多的人渐渐疏远了)。<br>我在高中有过两段情感经历(很难去直面自己的错误)。因为错误的处理方式和表达，我几乎是犯下了最让人痛恨的错误(起码我这么认为)。去年暑假我最好最好的朋友在少林寺下山的路上突然问我这件事，我矢口否认并且尽快逃避了全部的问题。我是真的很抱歉，我也不知道我为什么是那样子的人，我也很胆小不敢面对错误。在那之后我也特别敏感。四月份的时候好朋友开玩笑似地对我说他和学姐谈恋爱了，我惊喜地跑出去和他打电话，还说要对他好一点，他的那句”要你教我做事”让我很羞愧。我确实没有资格。这一年一直在为自己的行为负责，不可避免地失去很多原本的好朋友。我有个日历，上面写着每个好朋友地生日。从某天开始，我最好的朋友似乎就和我断了联系，我很抱歉，真的很抱歉，我不知道怎么做。时间一长，我开始怀疑自己的资格和人品。八月买了一支Picasso的钢笔，在珠海写了一封信，我想生日那天肯定可以好好地说说自己的想法(因为实在是压抑太久了)。但是当日历到达他生日地那一天，我却不敢说些什么。<br>同样的事情在这两个月发生了好几次。我越来越不能确定我在大家(我所认为的重要的人)眼里的分量了。有段时间好像很抑郁，但是还是得压抑着发很多coding动态，显得自己过得很好很积极向上，其实过的很糟糕，生活很糟糕，心情也很糟糕，天气也很糟糕。因为我确实没有资格矫情，去年的这个时候，有人因为我也抑郁了很久吧。我只是自作自受罢了。确实想念好朋友了，希望在西安过得好而且多认识些值得的新朋友。<br>对所有我的奇怪，偏执，坏人品伤害到的人说抱歉啦，毕竟博客也有500浏览量了也并不少了。<br>以后决心好好打ACM了，我得找到一个能让我一直做下去，让我忙到忘记烦恼的事业。这两天的小排位赛一次RANK1，一次RANK3+3次first blood也鼓励了自己。另外也希望队友多多加油未来可期。一年后(最多两年后)希望站在CCPC某赛区的领奖台上，拿到一块银牌，这样自己也不会有遗憾了。<br>啊对，以后会回去当高中老师，希望可以和大家一起加油。</p>
]]></content>
      <categories>
        <category>记录生活</category>
      </categories>
  </entry>
  <entry>
    <title>写在前面</title>
    <url>/2020/11/13/%E8%AE%B0%E5%BD%95%E7%94%9F%E6%B4%BB/%E5%86%99%E5%9C%A8%E5%89%8D%E9%9D%A2/</url>
    <content><![CDATA[<blockquote>
<p>我爱高三坐后排的日子</p>
</blockquote>
]]></content>
      <categories>
        <category>记录生活</category>
      </categories>
  </entry>
  <entry>
    <title>我会采更多的雏菊</title>
    <url>/2020/11/18/%E8%AE%B0%E5%BD%95%E7%94%9F%E6%B4%BB/%E6%88%91%E4%BC%9A%E9%87%87%E6%9B%B4%E5%A4%9A%E7%9A%84%E9%9B%8F%E8%8F%8A/</url>
    <content><![CDATA[<h2 id="我会采更多的雏菊"><a href="#我会采更多的雏菊" class="headerlink" title="我会采更多的雏菊"></a><strong>我会采更多的雏菊</strong></h2><ul>
<li>纳·斯代尔<a id="more"></a>

</li>
</ul>
<p>如果我能够从头活过，<br>我会试着犯更多的错。 </p>
<p>我会放松一点，我会灵活一点。<br>我会比这一趟过得傻。<br>很少有什么事情能让我当真。 </p>
<p>我会疯狂一些，我会少讲点卫生。<br>我会冒更多的险。我会更经常的旅行。<br>我会爬更多的山，游更多的河，看更多的日落。<br>我会多吃冰激凌，少吃豆子。<br>我会惹更多的麻烦，可是不在想象中担忧。 </p>
<p>你看，我小心翼翼地稳健地理智地活着。<br>一个又一个小时，一天又一天。 </p>
<p>噢，我有过难忘的时刻。<br>如果我能够重来一次，我会要更多这样的时刻。 </p>
<p>事实上，我不需要别的什么，<br>仅仅是时刻，一个接着一个。<br>而不是每天都操心着以后的漫长日子。 </p>
<p>我曾经不论到哪里都不忘记带上：<br>温度计，热水壶，雨衣和降落伞。 </p>
<p>如果我能够重来一次，<br>我会到处走走，什么都试试，并且轻装上阵。<br>如果我能够重头活过，<br>我会延长打赤脚的时光。<br>从尽早的春天到尽晚的秋天。 </p>
<p>我会更经常的逃学。<br>我不会考那么高的分数，除非是一不小心。<br>我会多骑些旋转木马，<br>我会采更多的雏菊。</p>
<ul>
<li><strong>我也会采更多的雏菊</strong><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=506094660&auto=1&height=66"></iframe></li>
</ul>
]]></content>
      <categories>
        <category>记录生活</category>
      </categories>
  </entry>
  <entry>
    <title>周赛总结</title>
    <url>/2020/11/18/ACM/%E5%91%A8%E8%B5%9B%E6%80%BB%E7%BB%93/%E5%91%A8%E8%B5%9B%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>ACM专题</category>
      </categories>
  </entry>
  <entry>
    <title>动态规划专题</title>
    <url>/2020/11/18/ACM/%E7%AE%97%E6%B3%95%E5%92%8C%E6%A8%A1%E6%9D%BF%E6%80%BB%E7%BB%93/acm-dp%E4%B8%93%E9%A2%98/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>ACM专题</category>
      </categories>
  </entry>
  <entry>
    <title>基础算法</title>
    <url>/2020/01/10/ACM/%E7%AE%97%E6%B3%95%E5%92%8C%E6%A8%A1%E6%9D%BF%E6%80%BB%E7%BB%93/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<ul>
<li><p>快速排序O(nlogn)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span> q[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> i = l - <span class="number">1</span>, j = r + <span class="number">1</span>, x = q[l + r &gt;&gt; <span class="number">1</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(i &lt; j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(q[++ i] &lt; x);</span><br><span class="line">        <span class="keyword">while</span>(q[-- j] &gt; x);</span><br><span class="line">        <span class="keyword">if</span>(i &lt; j) swap(q[i], q[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    quick_sort(q, l, j); quick_sort(q, j + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>归并排序O(nlogn)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_sort</span><span class="params">(<span class="keyword">int</span> q[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    merge_sort(q, l, mid); merge_sort(q, mid + <span class="number">1</span>, r);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> i = l, j = mid + <span class="number">1</span>, k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= mid &amp;&amp; j &lt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(q[i] &lt;= q[j]) tmp[k ++] = q[i ++];</span><br><span class="line">        <span class="keyword">else</span> tmp[k ++] = q[j ++];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(i &lt;= mid) tmp[k ++] = q[i ++];</span><br><span class="line">    <span class="keyword">while</span>(j &lt;= r) tmp[k ++] = q[j ++];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(i = l, k = <span class="number">0</span>;i &lt;= r;i ++, k ++) q[i] = tmp[k];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>二分(logn)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">int</span> l = <span class="number">0</span>, r = n - <span class="number">1</span>;</span><br><span class="line"> <span class="keyword">while</span>(l &lt; r)</span><br><span class="line">&#123;</span><br><span class="line">      <span class="keyword">int</span> mid = l + r (+ <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span>(a[mid] &gt;= x) r = mid;</span><br><span class="line">      <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li>
<li><p><input disabled="" type="checkbox">  高精度加减乘除</p>
</li>
<li><p>高精度加法</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">add</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; A, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; C;</span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; A.size() || i &lt; B.size();i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; A.size()) t += A[i];</span><br><span class="line">        <span class="keyword">if</span>(i &lt; B.size()) t += B[i];</span><br><span class="line">        C.push_back(t % <span class="number">10</span>);</span><br><span class="line">        t /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(t) C.push_back(<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>高精度减法</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; A, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(A.size() != B.size()) <span class="keyword">return</span> A.size() &gt; B.size();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = A.size() - <span class="number">1</span>;i &gt;= <span class="number">0</span>;i --)</span><br><span class="line">        <span class="keyword">if</span>(A[i] != B[i]) <span class="keyword">return</span> A[i] &gt; B[i];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">sub</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; A, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; C;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>, t = <span class="number">0</span>;i &lt; A.size();i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        t = A[i] - t;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; B.size()) t -= B[i];</span><br><span class="line">        C.push_back((t + <span class="number">10</span>) % <span class="number">10</span>);</span><br><span class="line">        t = t &lt; <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(C.size() &gt; <span class="number">1</span> &amp;&amp; !C.back()) C.pop_back();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p> 高精度乘法</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">mul</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; A, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; C;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>, t = <span class="number">0</span>;i &lt; A.size() || t;i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; A.size()) t += A[i] * b;</span><br><span class="line">        C.push_back(t % <span class="number">10</span>);</span><br><span class="line">        t /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(C.size() &gt; <span class="number">1</span> &amp;&amp; !C.back()) C.pop_back();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>高精度除法</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">div</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; A, <span class="keyword">int</span> b, <span class="keyword">int</span>&amp; r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; C;</span><br><span class="line">    r = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = A.size() - <span class="number">1</span>;i &gt;= <span class="number">0</span>;i --)</span><br><span class="line">    &#123;</span><br><span class="line">        r = r * <span class="number">10</span> + A[i];</span><br><span class="line">        C.push_back(r / b);</span><br><span class="line">        r %= b;</span><br><span class="line">    &#125;</span><br><span class="line">    reverse(C.begin(), C.end());</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(C.size() &gt; <span class="number">1</span> &amp;&amp; !C.back()) C.pop_back();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>压位高精度(加法，压9位)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> base = <span class="number">1e9</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">add</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; A, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; C;</span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; A.size() || i &lt; B.size();i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; A.size()) t += A[i];</span><br><span class="line">        <span class="keyword">if</span>(i &lt; B.size()) t += B[i];</span><br><span class="line">        C.push_back(t % base);</span><br><span class="line">        t /= base;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(t) C.push_back(<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 压位</span></span><br><span class="line">    <span class="built_in">string</span> a, b;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; A, B;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = a.size() - <span class="number">1</span>, j = <span class="number">0</span>, t = <span class="number">1</span>, s = <span class="number">0</span>;i &gt;= <span class="number">0</span>;i --)</span><br><span class="line">    &#123;</span><br><span class="line">        s += t * (a[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        j ++; t *= <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span>(j == <span class="number">9</span> || !i)</span><br><span class="line">        &#123;</span><br><span class="line">            A.push_back(s);</span><br><span class="line">            j = s = <span class="number">0</span>;</span><br><span class="line">            t = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = b.size() - <span class="number">1</span>, j = <span class="number">0</span>, t = <span class="number">1</span>, s = <span class="number">0</span>;i &gt;= <span class="number">0</span>;i --)</span><br><span class="line">    &#123;</span><br><span class="line">        s += t * (b[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        j ++; t *= <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span>(j == <span class="number">9</span> || !i)</span><br><span class="line">        &#123;</span><br><span class="line">            B.push_back(s);</span><br><span class="line">            j = s = <span class="number">0</span>;</span><br><span class="line">            t = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">auto</span> C = add(A, B);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; C.back();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = C.size() - <span class="number">2</span>;i &gt;= <span class="number">0</span>;i --) <span class="built_in">printf</span>(<span class="string">&quot;%09d&quot;</span>, C[i]);</span><br></pre></td></tr></table></figure>
</li>
<li><p><input disabled="" type="checkbox">  位运算:</p>
</li>
<li><p>第K位是否是1</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">i &gt;&gt; k &amp; <span class="number">1</span></span><br></pre></td></tr></table></figure></li>
<li><p>是否是奇数/末尾为1</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">k &amp; <span class="number">1</span></span><br></pre></td></tr></table></figure></li>
<li><p>得到最后一位1表示的数</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>离散化</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">sort(alls.begin(), alls.end());</span><br><span class="line">alls.erase(unique(alls.begin(), alls.end()), alls.end());</span><br></pre></td></tr></table></figure></li>
<li><p>区间合并</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="built_in">vector</span>&lt;PII&gt;&amp; segs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;PII&gt; res;</span><br><span class="line">    </span><br><span class="line">    sort(segs.begin(), segs.end());</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> st = <span class="number">-2e9</span>, ed = <span class="number">-2e9</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> seg : segs)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ed &lt; seg.first)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(st != <span class="number">-2e9</span>) res.push_back(&#123;st, ed&#125;);</span><br><span class="line">            st = seg.first; ed = seg.second;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> ed = max(ed, seg.second);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(st != <span class="number">-2e9</span>) res.push_back(&#123;st, ed&#125;);</span><br><span class="line">    </span><br><span class="line">    segs = res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>ACM专题</category>
      </categories>
  </entry>
  <entry>
    <title>最大连续和</title>
    <url>/2020/12/13/ACM/%E7%AE%97%E6%B3%95%E5%92%8C%E6%A8%A1%E6%9D%BF%E6%80%BB%E7%BB%93/%E6%9C%80%E5%A4%A7%E8%BF%9E%E7%BB%AD%E5%92%8C%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>##O(nlogn) 分治法</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxsum</span><span class="params">(<span class="keyword">int</span>* A,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(y-x == <span class="number">1</span>) <span class="keyword">return</span> A[x];</span><br><span class="line">    <span class="keyword">int</span> m = x+(y-x)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> maxs = max(maxsum(A,x,m),maxsum(A,m,y));</span><br><span class="line">    <span class="keyword">int</span> v = <span class="number">0</span>,L = A[m<span class="number">-1</span>],R = A[m];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = m<span class="number">-1</span>;i &gt;= x;i--) L = max(L,v+=A[i]);</span><br><span class="line">    v = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = m;i &lt; y;i++) R = max(R,v+=A[i]);</span><br><span class="line">    <span class="keyword">return</span> max(maxs,L+R);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="O-n"><a href="#O-n" class="headerlink" title="O(n)"></a>O(n)</h2><ul>
<li>维护最小前缀和<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">10000</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> S[maxn];</span><br><span class="line"><span class="keyword">int</span> cur[maxn];</span><br><span class="line"><span class="keyword">int</span> prefix[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n; <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    prefix[<span class="number">0</span>] = cur[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; S[i];</span><br><span class="line">        prefix[i] = prefix[i<span class="number">-1</span>]+S[i]; <span class="comment">// prefix sum</span></span><br><span class="line">        cur[i] = min(cur[i<span class="number">-1</span>],prefix[i]); <span class="comment">// current minimum prefix</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> maxs = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++) maxs = max(maxs,prefix[i]-cur[i]);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; maxs &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="O-n-贪心"><a href="#O-n-贪心" class="headerlink" title="O(n) 贪心"></a>O(n) 贪心</h2><ul>
<li>每次从前向后扫描，记录每个位置的最大sum，若加入下一个元素会使得序列小于0，则此元素不加入，同时令sum=0</li>
<li>理由: 若加入该元素，加入该元素后的前缀序列&lt;0，则它无论如何都不可能与后面的元素组成最优解，因为后面的元素不加上它反而更大。<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">10000</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> S[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n; <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++) <span class="built_in">cin</span> &gt;&gt; S[i];</span><br><span class="line">    <span class="keyword">int</span> best = S[<span class="number">1</span>],sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(sum+S[i] &lt; <span class="number">0</span>) sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> best = max(best,sum+=S[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; best;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>ACM专题</category>
      </categories>
  </entry>
  <entry>
    <title>简单数据结构</title>
    <url>/2020/01/10/ACM/%E7%AE%97%E6%B3%95%E5%92%8C%E6%A8%A1%E6%9D%BF%E6%80%BB%E7%BB%93/%E7%AE%80%E5%8D%95%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<ul>
<li><p>单链表</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> e[N], ne[N], head, idx;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    head = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_to_head</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = x, ne[idx] = head, head= idx ++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_to_k</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] =x, ne[idx] = ne[k], ne[k] = idx ++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(k == <span class="number">-1</span>) head = ne[head];</span><br><span class="line">    <span class="keyword">else</span> ne[k] = ne[ne[k]];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>双向链表</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> e[N], l[N], r[N], idx;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    r[<span class="number">0</span>] = <span class="number">1</span>, l[<span class="number">1</span>] = <span class="number">0</span>, idx = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = x, l[idx] = k, r[idx] = r[k], l[r[k]] = idx, r[k] = idx ++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    r[l[k]] = r[k], l[r[k]] = l[k];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>模拟栈</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const int N &#x3D; 100010;</span><br><span class="line">int stk[N], tt &#x3D; -1;</span><br><span class="line"></span><br><span class="line">inline void push(int x) &#123; stk[++tt] &#x3D; x; &#125;</span><br><span class="line">inline void push(int x) &#123; --tt; &#125;</span><br><span class="line">inline bool empty() &#123; return tt &#x3D;&#x3D; -1; &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>模拟队列</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int q[N], hh &#x3D; 0, tt &#x3D; -1;</span><br><span class="line"></span><br><span class="line">inline void push(int x) &#123; q[++tt] &#x3D; x; &#125;</span><br><span class="line">inline void pop() &#123; ++hh; &#125;</span><br><span class="line">inline bool empty() &#123; return hh &lt;&#x3D; tt; &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>KMP</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>, M = <span class="number">1000010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> p[N], s[M];</span><br><span class="line"><span class="keyword">int</span> ne[N];</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; p + <span class="number">1</span> &gt;&gt; m &gt;&gt; s + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>, j = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">while</span> (j &amp;&amp; p[i] != p[j + <span class="number">1</span>]) j = ne[j];</span><br><span class="line">		<span class="keyword">if</span> (p[i] == p[j + <span class="number">1</span>]) j++;</span><br><span class="line">		ne[i] = j;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>; i &lt;= m; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">while</span> (j &amp;&amp; s[i] != p[j + <span class="number">1</span>]) j = ne[j];</span><br><span class="line">		<span class="keyword">if</span> (s[i] == p[j + <span class="number">1</span>]) j++;</span><br><span class="line">		<span class="keyword">if</span> (j == n)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">// do...</span></span><br><span class="line">			j = ne[j];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Trie</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="keyword">int</span> son[N][<span class="number">26</span>], cnt[N], idx;</span><br><span class="line"><span class="keyword">char</span> str[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">char</span> str[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; str[i] ;i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u = str[i] - <span class="string">&#x27;a&#x27;</span>; <span class="comment">// 针对性改动</span></span><br><span class="line">        <span class="keyword">if</span>(!son[p][u]) son[p][u] = ++ idx;</span><br><span class="line">        p = son[p][u];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    cnt[p] ++; <span class="comment">// 针对性改动</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">char</span> str[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; str[i] ;i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u = str[i] - <span class="string">&#x27;a&#x27;</span>; <span class="comment">// 针对性改动</span></span><br><span class="line">        <span class="keyword">if</span>(!son[p][u]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        p = son[p][u];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> cnt[p];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>朴素并查集</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> p[N], n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) p[i] = i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> p[x] != x ? p[x] = find(p[x]) : p[x];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>手打堆</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">down</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t = u;</span><br><span class="line">    <span class="keyword">if</span>(u * <span class="number">2</span> &lt;= sz &amp;&amp; h[u * <span class="number">2</span>] &lt; h[t]) t = u * <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(u * <span class="number">2</span> + <span class="number">1</span> &lt;= sz &amp;&amp; h[u * <span class="number">2</span> + <span class="number">1</span>] &lt; h[t]) t = u * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(u ^ t)</span><br><span class="line">    &#123;</span><br><span class="line">        swap(h[t], h[u]);</span><br><span class="line">        down(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">up</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(u &gt;&gt; <span class="number">1</span> &amp;&amp; h[u &gt;&gt; <span class="number">1</span>] &gt; h[u])</span><br><span class="line">    &#123;</span><br><span class="line">        swap(h[u &gt;&gt; <span class="number">1</span>], u);</span><br><span class="line">        u &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// O(n)建立堆</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = n / <span class="number">2</span>;i &gt;= <span class="number">1</span>;i --) down(i);</span><br></pre></td></tr></table></figure>
</li>
<li><p>带映射的手打堆</p>
</li>
<li><p>关键是每次移动元素都要使用heap_swap交换映射关系</p>
</li>
<li><p>hp: heap to pointer，ph: pointer to heap</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const int N &#x3D; 100010;</span><br><span class="line"></span><br><span class="line">int h[N], hp[N], ph[N], sz, idx;</span><br><span class="line"></span><br><span class="line">void heap_swap(int a, int b)</span><br><span class="line">&#123;</span><br><span class="line">    swap(h[a], h[b]);</span><br><span class="line">    swap(ph[hp[a]], ph[hp[b]]);</span><br><span class="line">    swap(hp[a], hp[b]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void down(int u)</span><br><span class="line">&#123;</span><br><span class="line">    int t &#x3D; u;</span><br><span class="line">    if(u * 2 &lt;&#x3D; sz &amp;&amp; h[u * 2] &lt; h[t]) t &#x3D; u * 2;</span><br><span class="line">    if(u * 2 + 1 &lt;&#x3D; sz &amp;&amp; h[u * 2 + 1] &lt; h[t]) t &#x3D; u * 2 + 1;</span><br><span class="line">    if(u ^ t)</span><br><span class="line">    &#123;</span><br><span class="line">        heap_swap(u, t);</span><br><span class="line">        down(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void up(int u)</span><br><span class="line">&#123;</span><br><span class="line">    while(u &gt;&gt; 1 &amp;&amp; h[u &gt;&gt; 1] &gt; h[u])</span><br><span class="line">    &#123;</span><br><span class="line">        heap_swap(u &gt;&gt; 1, u);</span><br><span class="line">        u &gt;&gt;&#x3D; 1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>开放定址(相对更快且更好写)</p>
</li>
<li><p>N最好开两倍大小且为质数，使用前一定要memset一下h数组。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">200003</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> h[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k = (x % N + N) % N;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(h[k] != INF &amp;&amp; h[k] != x)</span><br><span class="line">    &#123;</span><br><span class="line">        k ++;</span><br><span class="line">        <span class="keyword">if</span>(k == N) k = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(h, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> h);</span><br></pre></td></tr></table></figure></li>
<li><p>拉链法</p>
</li>
<li><p>使用前应该memset一下h数组</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100003</span>;</span><br><span class="line"><span class="keyword">int</span> h[N], e[N], ne[N], idx;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k = (x % N + N) % N;</span><br><span class="line">    </span><br><span class="line">    e[idx] = x, ne[idx] = h[k], h[k] = idx ++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k = (x % N + N) % N;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = h[k];i != <span class="number">-1</span>;i = ne[i])</span><br><span class="line">        <span class="keyword">if</span>(e[i] == x) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="keyword">sizeof</span> h);</span><br></pre></td></tr></table></figure></li>
<li><p>字符串哈希</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ULL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100003</span>, P = <span class="number">131</span>;</span><br><span class="line">ULL p[N], h[N];</span><br><span class="line"><span class="keyword">char</span> str[N];</span><br><span class="line"></span><br><span class="line"><span class="function">IL ULL <span class="title">get</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> h[r] - h[l - <span class="number">1</span>] * p[r - l + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> n, m;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; str + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	p[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		p[i] = p[i - <span class="number">1</span>] * P;</span><br><span class="line">		h[i] = h[i - <span class="number">1</span>] * P + str[i];</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>ACM专题</category>
      </categories>
  </entry>
  <entry>
    <title>高精度板子</title>
    <url>/2020/12/13/ACM/%E7%AE%97%E6%B3%95%E5%92%8C%E6%A8%A1%E6%9D%BF%E6%80%BB%E7%BB%93/%E9%AB%98%E7%B2%BE%E5%BA%A6%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<h2 id="高精度板子-未压位"><a href="#高精度板子-未压位" class="headerlink" title="高精度板子(未压位)"></a>高精度板子(未压位)</h2><ul>
<li>纯自己思考写得，效率待改善<a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  @copyright:all rights reserved.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *  @author:Joe-sdu.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *  @date:Dec.13.2020</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bign</span>&#123;</span></span><br><span class="line">    <span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; os,<span class="keyword">const</span> bign&amp; n);</span><br><span class="line">    bign() &#123; len = <span class="number">0</span>; <span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a)); &#125;</span><br><span class="line">    bign(<span class="keyword">int</span> n)</span><br><span class="line">    &#123;</span><br><span class="line">        len = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line">        <span class="keyword">do</span>&#123; a[len++] = n%<span class="number">10</span>; n /= <span class="number">10</span>; &#125;<span class="keyword">while</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line">    bign(<span class="keyword">const</span> <span class="keyword">char</span> *n)</span><br><span class="line">    &#123;</span><br><span class="line">        len = <span class="built_in">strlen</span>(n);</span><br><span class="line">        <span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; len;i++) a[len-i<span class="number">-1</span>] = n[i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    bign(<span class="keyword">const</span> <span class="built_in">string</span>&amp; str) &#123; *<span class="keyword">this</span> = str.c_str(); &#125;</span><br><span class="line">    bign&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> bign&amp; n)</span><br><span class="line">    &#123;</span><br><span class="line">        len = n.len;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; len;i++) a[i] = n.a[i];</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    bign <span class="keyword">operator</span>+(<span class="keyword">const</span> bign&amp; n) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        bign tmp;</span><br><span class="line">        tmp.len = *<span class="keyword">this</span> &lt; n ? n.len : len;</span><br><span class="line">        <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; tmp.len;i++)&#123;</span><br><span class="line">            tmp.a[i] = (a[i]+n.a[i]+c)%<span class="number">10</span>;</span><br><span class="line">            c = (a[i]+n.a[i]+c)/<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(c) tmp.a[tmp.len++] = c;</span><br><span class="line">        <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    bign <span class="keyword">operator</span>*(<span class="keyword">const</span> bign&amp; n) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        bign tmp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; len;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; n.len;j++)&#123;</span><br><span class="line">                tmp.a[i+j] += a[i]*n.a[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        tmp.len = len+n.len;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; tmp.len;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(tmp.a[i] &gt;= <span class="number">10</span>) &#123; tmp.a[i+<span class="number">1</span>] += tmp.a[i]/<span class="number">10</span>; tmp.a[i] %= <span class="number">10</span>; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(tmp.len &gt; <span class="number">1</span> &amp;&amp; !tmp.a[tmp.len<span class="number">-1</span>]) tmp.len--;</span><br><span class="line">        <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    bign <span class="keyword">operator</span>-(<span class="keyword">const</span> bign&amp; n) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        bign tmp; <span class="comment">// *this must &lt; n</span></span><br><span class="line">        tmp.len = len;</span><br><span class="line">        <span class="keyword">int</span> f = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; len;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> c = a[i]-n.a[i]+f;</span><br><span class="line">            <span class="keyword">if</span>(c &lt; <span class="number">0</span>) &#123; f = <span class="number">-1</span>; c += <span class="number">10</span>; &#125;</span><br><span class="line">            <span class="keyword">else</span> f = <span class="number">0</span>;</span><br><span class="line">            tmp.a[i] = c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(tmp.len &gt; <span class="number">1</span> &amp;&amp; !tmp.a[tmp.len<span class="number">-1</span>]) tmp.len--;</span><br><span class="line">        <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    bign <span class="keyword">operator</span>/(<span class="keyword">const</span> bign&amp; n) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        bign tmp = <span class="number">0</span>,r = *<span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">while</span>(r &gt;= n)&#123;</span><br><span class="line">            bign x = <span class="number">10</span>, m = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(n*x &lt;= r) &#123; x = x*<span class="number">10</span>; m = m*<span class="number">10</span>; &#125;</span><br><span class="line">            r = r - m*n;</span><br><span class="line">            tmp = tmp+m;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> bign&amp; n) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(len != n.len) <span class="keyword">return</span> len &lt; n.len;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = len<span class="number">-1</span>;i &gt;= <span class="number">0</span>;i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i] != n.a[i]) <span class="keyword">return</span> a[i] &lt; n.a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&gt;(<span class="keyword">const</span> bign&amp; n) <span class="keyword">const</span> &#123; <span class="keyword">return</span> n &lt; *<span class="keyword">this</span>; &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> bign&amp; n) <span class="keyword">const</span> &#123; <span class="keyword">return</span> !(*<span class="keyword">this</span> &lt; n) &amp;&amp; !(*<span class="keyword">this</span> &gt; n); &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>!=(<span class="keyword">const</span> bign&amp; n) <span class="keyword">const</span> &#123; <span class="keyword">return</span> !(*<span class="keyword">this</span> == n); &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&gt;=(<span class="keyword">const</span> bign&amp; n) <span class="keyword">const</span> &#123; <span class="keyword">return</span> (*<span class="keyword">this</span> &gt; n) || (*<span class="keyword">this</span> == n); &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;=(<span class="keyword">const</span> bign&amp; n) <span class="keyword">const</span> &#123; <span class="keyword">return</span> (*<span class="keyword">this</span> &lt; n) || (*<span class="keyword">this</span> == n); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="keyword">operator</span> <span class="title">bool</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> len == <span class="number">1</span> &amp;&amp; !a[<span class="number">0</span>]; &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">2000</span>];</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; os,<span class="keyword">const</span> bign&amp; n)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n.len<span class="number">-1</span>;i &gt;= <span class="number">0</span>;i--) <span class="built_in">cout</span> &lt;&lt; n.a[i];</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>ACM专题</category>
      </categories>
  </entry>
  <entry>
    <title>C++细节</title>
    <url>/2020/11/18/ACM/%E7%BB%86%E8%8A%82/C++%E7%BB%86%E8%8A%82/</url>
    <content><![CDATA[<h2 id="头文件的使用"><a href="#头文件的使用" class="headerlink" title="头文件的使用"></a>头文件的使用</h2><ul>
<li>万能头文件<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>该文件不推荐在工程中使用，因为会大大增加编译时间，同时此文件是不可移植的。</p>
</blockquote>
<h2 id="关闭流同步-cin和stdin-cout和stdout默认同步，导致了额外开销。"><a href="#关闭流同步-cin和stdin-cout和stdout默认同步，导致了额外开销。" class="headerlink" title="关闭流同步: cin和stdin/cout和stdout默认同步，导致了额外开销。"></a>关闭流同步: cin和stdin/cout和stdout默认同步，导致了额外开销。</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ios::sync_with_stdio(false);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="精度控制"><a href="#精度控制" class="headerlink" title="精度控制"></a>精度控制</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cout</span> &lt;&lt; setbase(x) <span class="comment">// 控制进制输出</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; setw(x) <span class="comment">// 控制以x位宽输出</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; fixed <span class="comment">// 以小数点方式输出</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; setprecision(x) <span class="comment">// 设置x位精度</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; unsetf(xxx) <span class="comment">// 取消xxx的精度控制</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; setiosflags(ios::xxx) <span class="comment">// 设置为以xxx形式输出，xxx比如fixed，scientific...</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; dec <span class="comment">// 十进制</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; hex <span class="comment">// 十六进制</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; oct <span class="comment">// 八进制</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; setfill(c) <span class="comment">// c做不足位填充,与setw连用</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>常用xxx如下</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">fixed</span><br><span class="line">scientific <span class="comment">// 科学计数法</span></span><br><span class="line">left <span class="comment">// 左对齐</span></span><br><span class="line">right <span class="comment">// 右对齐</span></span><br><span class="line">skipws <span class="comment">// 忽略前导空格</span></span><br><span class="line">uppercase <span class="comment">// 16进制输出时默认大写英文字母</span></span><br><span class="line">lowercase <span class="comment">// 16进制输出小写</span></span><br><span class="line">showpos <span class="comment">// 输出正数前的+号</span></span><br></pre></td></tr></table></figure></li>
<li><p>引用</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>，引用实际是通过指针实现的。</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>，引用是一个常量指针。</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>，引用在内存中占<span class="number">4</span>个字节。</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>，在对引用定义时，需要对这个常量指针初始化。</span><br></pre></td></tr></table></figure>
</li>
<li><p>常量指针: 指针指向的对象是常量。</p>
</li>
<li><p>指针常量: 指针本身是常量。</p>
</li>
<li><p>大整数</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">__int128 <span class="comment">// 非标准不推荐使用</span></span><br></pre></td></tr></table></figure></li>
<li><p>定义最大的整数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const int inf &#x3D; 0x7fffffff;</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>ACM专题</category>
      </categories>
  </entry>
  <entry>
    <title>memset/memcpy</title>
    <url>/2020/11/18/ACM/%E7%BB%86%E8%8A%82/%E5%88%9D%E5%A7%8B%E5%8C%96%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<h2 id="MEMCPY-和-MEMSET函数"><a href="#MEMCPY-和-MEMSET函数" class="headerlink" title="MEMCPY 和 MEMSET函数"></a>MEMCPY 和 MEMSET函数</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">510</span>, INF = <span class="number">1e9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> h[N], w[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(h, <span class="number">0x8f</span>, <span class="keyword">sizeof</span> h); <span class="comment">// 设置数组元素为负无穷</span></span><br><span class="line">	<span class="built_in">memset</span>(h, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> h); <span class="comment">// 设置数组元素为正无穷</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">memcpy</span>(w, h, <span class="keyword">sizeof</span> h); <span class="comment">// 按字节拷贝数组</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">memcmp</span>(w, h, <span class="keyword">sizeof</span> h); <span class="comment">// 按字节比较数组</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>ACM专题</category>
      </categories>
  </entry>
  <entry>
    <title>快读 快输</title>
    <url>/2020/01/02/ACM/%E7%BB%86%E8%8A%82/%E5%BF%AB%E8%AF%BB%E5%BF%AB%E8%BE%93/</url>
    <content><![CDATA[<ul>
<li>比scanf/printf和cin/cout更快<h2 id="快读"><a href="#快读" class="headerlink" title="快读"></a>快读</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 针对读入类型自行修改</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>, s = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span>(ch &lt; <span class="string">&#x27;0&#x27;</span> || ch &gt; <span class="string">&#x27;9&#x27;</span>) &#123; <span class="keyword">if</span>(ch == <span class="string">&#x27;-&#x27;</span>) s = <span class="number">0</span>; ch = getchar(); &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>) &#123; x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + ch - <span class="string">&#x27;0&#x27;</span>; ch = getchar(); &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> s ? x : ~(x - <span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="快写"><a href="#快写" class="headerlink" title="快写"></a>快写</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">0</span>) &#123; x = ~(x - <span class="number">1</span>); <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>); &#125;</span><br><span class="line">    <span class="keyword">if</span>(x &gt; <span class="number">9</span>) write(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM专题</category>
      </categories>
  </entry>
  <entry>
    <title>寒假集训题单2</title>
    <url>/2021/01/15/ACM/%E9%A2%98%E5%8D%95%E5%92%8C%E8%A1%A5%E9%A2%98/1.15%E9%9B%86%E8%AE%AD%E8%A1%A5%E9%A2%98/</url>
    <content><![CDATA[<h2 id="1-15补题"><a href="#1-15补题" class="headerlink" title="1.15补题"></a>1.15补题</h2><ul>
<li><p>大部分题目并没有什么难度，先放几个WA了几次的题目，以及题单中cf上的签到题。</p>
</li>
<li><p><a href="https://vjudge.net/contest/417576#problem/B">** Divide groups** </a></p>
</li>
<li><p><input disabled="" type="checkbox">  大意:给你一个有向图，其中有的点之间有两条边，有的点只有一条边，问能否将整个集合划分成两个子集，使得对于每个子集中的点都相互有两条边联通。</p>
</li>
<li><p><input disabled="" type="checkbox">  思路:既然要求每个集合中的元素都得相互联通，且恰好有只有两个集合，那么可以考虑对只有一条边联通的点进行处理，因为当两个点只有一条边相连时，它们不可能在同一个子集中。</p>
</li>
<li><p><input disabled="" type="checkbox">  具体方法: 在只有一条边或者没有边联通的点加边，然后进行二分图染色(具体染色方法见模板)。</p>
</li>
<li><p><input disabled="" type="checkbox">  存储方式: 邻接矩阵给g[N][N]。</p>
</li>
<li><p><input disabled="" type="checkbox">  染色方式: dfs或者bfs</p>
</li>
<li><p><input disabled="" type="checkbox">  代码如下:</p>
<blockquote>
<p>dfs:</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">110</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> g[N][N];</span><br><span class="line"><span class="keyword">int</span> color[N];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	color[u] = c;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		<span class="keyword">if</span> (i != u &amp;&amp; g[u][i] &lt; <span class="number">2</span>)</span><br><span class="line">			<span class="keyword">if</span> (!color[i])</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (!dfs(i, <span class="number">3</span> - c))</span><br><span class="line">					<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (color[i] == c)</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">memset</span>(g, <span class="number">0</span>, <span class="keyword">sizeof</span> g);</span><br><span class="line">		<span class="built_in">memset</span>(color, <span class="number">0</span>, <span class="keyword">sizeof</span> color);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> t;</span><br><span class="line">			<span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; t, t)</span><br><span class="line">				g[i][t]++, g[t][i]++;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">bool</span> ok = <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line">			<span class="keyword">if</span> (!color[i])</span><br><span class="line">			&#123;</span><br><span class="line">				ok = dfs(i, <span class="number">1</span>);</span><br><span class="line">				<span class="keyword">if</span> (!ok) <span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span> (ok) <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>bfs(采用模拟队列):</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">110</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> g[N][N];</span><br><span class="line"><span class="keyword">int</span> color[N];</span><br><span class="line"><span class="keyword">int</span> q[N];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	color[u] = c;</span><br><span class="line">	<span class="keyword">int</span> hh = <span class="number">0</span>, tt = <span class="number">0</span>;</span><br><span class="line">	q[hh] = u;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (hh &lt;= tt)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> t = q[hh++];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">			<span class="keyword">if</span> (i != t &amp;&amp; g[t][i] &lt; <span class="number">2</span>)</span><br><span class="line">				<span class="keyword">if</span> (color[i] == <span class="number">-1</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					color[i] = color[t] ^ <span class="number">1</span>;</span><br><span class="line">					q[++tt] = i;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span> (color[i] == color[t])</span><br><span class="line">					<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">memset</span>(g, <span class="number">0</span>, <span class="keyword">sizeof</span> g);</span><br><span class="line">		<span class="built_in">memset</span>(color, <span class="number">-1</span>, <span class="keyword">sizeof</span> color);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> t;</span><br><span class="line">			<span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; t, t)</span><br><span class="line">				g[i][t]++, g[t][i]++;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">bool</span> ok = <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line">			<span class="keyword">if</span> (color[i] == <span class="number">-1</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				ok = bfs(i, <span class="number">0</span>);</span><br><span class="line">				<span class="keyword">if</span> (!ok) <span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span> (ok) <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><a href="https://vjudge.net/contest/417576#problem/C">** C - Tree Summing **</a></p>
</li>
<li><p><input disabled="" type="checkbox">  大意:输入一个整数和一棵树，判断从根节点到叶节点是否存在一条路径上的和等于所输入的整数。</p>
</li>
<li><p><input disabled="" type="checkbox">  思路其实很简单，递归建树，但是就是很麻烦啊!!我吐辽!!主要考查字符串处理。。。</p>
</li>
<li><p><input disabled="" type="checkbox">  注意0的判断!</p>
</li>
<li><p><input disabled="" type="checkbox">  代码如下:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> w, ans;</span><br><span class="line"><span class="keyword">bool</span> ok;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span>&amp; cur)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> lp, rp;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; lp;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> x;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">cin</span> &gt;&gt; x)</span><br><span class="line">	&#123;</span><br><span class="line">		ok = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">		cur += x;</span><br><span class="line">		<span class="keyword">bool</span> ll = dfs(cur);</span><br><span class="line">		<span class="keyword">bool</span> rr = dfs(cur);</span><br><span class="line">		<span class="keyword">if</span> (ll &amp;&amp; rr) ans |= (w == cur);</span><br><span class="line">		cur -= x;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; rp;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cin</span>.clear();</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; rp;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; w)</span><br><span class="line">	&#123;</span><br><span class="line">		ok = <span class="literal">false</span>;</span><br><span class="line">		ans = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> cur = <span class="number">0</span>;</span><br><span class="line">		dfs(cur);</span><br><span class="line">		<span class="keyword">if</span> (ans) <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;yes&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;no&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


</li>
</ul>
<ul>
<li><a href="https://codeforces.com/problemset/problem/1388/A">** Captain Flint and Crew Recruitment **</a></li>
<li><input disabled="" type="checkbox"> 题意:若一个数字能表示成两个不同质数的乘积，称其为类质数。问给定一个数n，是否存在四个不同的数字之和等于这个数，且这四个数字中至少有三个类质数。</li>
<li><input disabled="" type="checkbox"> 思路: 直接用最小的几个类质数凑三个数，然后最后一个数减去这三个数即可，最小的类质数是6，10，14，15。所以只有当n&gt;30才有解。</li>
<li><input disabled="" type="checkbox"> 细节: 当取前三个质数时，为了保证第四个数两两不同，对36，40，44需要特判，此时可用15替代14。<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span>(n--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> x;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">		<span class="keyword">if</span> (x &lt;= <span class="number">30</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (x == <span class="number">36</span> || x == <span class="number">40</span> || x == <span class="number">44</span>)</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;YES\n6 10 15 &quot;</span> &lt;&lt; x - <span class="number">31</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">else</span> </span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;YES\n6 10 14 &quot;</span> &lt;&lt; x - <span class="number">30</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>ACM专题</category>
      </categories>
  </entry>
  <entry>
    <title>sduOj训练题1</title>
    <url>/2020/11/24/ACM/%E9%A2%98%E5%8D%95%E5%92%8C%E8%A1%A5%E9%A2%98/sduOj%E8%AE%AD%E7%BB%831/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>ACM专题</category>
      </categories>
  </entry>
  <entry>
    <title>Kuangbin带你飞题单</title>
    <url>/2020/11/24/ACM/%E9%A2%98%E5%8D%95%E5%92%8C%E8%A1%A5%E9%A2%98/kuangbin%E7%AE%80%E5%8D%95%E6%90%9C%E7%B4%A2/</url>
    <content><![CDATA[<ul>
<li><a href="https://vjudge.net/problem/POJ-2251"> ** Dungeon Master **</a></li>
<li>三维bfs版子题，难度不大,复杂度$O(n^3)$。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;utility&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">const int N &#x3D; 40;</span><br><span class="line"></span><br><span class="line">char g[N][N][N];</span><br><span class="line">int d[N][N][N];</span><br><span class="line"></span><br><span class="line">struct Maze</span><br><span class="line">&#123;</span><br><span class="line">    int x, y, z;</span><br><span class="line">&#125;q[N * N * N], s, e;</span><br><span class="line"></span><br><span class="line">int l, r, c;</span><br><span class="line"></span><br><span class="line">int bfs()</span><br><span class="line">&#123;</span><br><span class="line">    memset(d, -1, sizeof d);</span><br><span class="line">    int tt &#x3D; 0, hh &#x3D; 0;</span><br><span class="line">    q[hh] &#x3D; s;</span><br><span class="line">    d[s.x][s.y][s.z] &#x3D; 0;</span><br><span class="line"></span><br><span class="line">    int dx[] &#x3D; &#123; 0, -1 , 1 &#125;, dy[] &#x3D; &#123; 1, 0, -1, 0 &#125;, dz[] &#x3D; &#123; 0, 1, 0, -1 &#125;;</span><br><span class="line">    while (hh &lt;&#x3D; tt)</span><br><span class="line">    &#123;</span><br><span class="line">        auto t &#x3D; q[hh++];</span><br><span class="line"></span><br><span class="line">        for (int i &#x3D; 0; i &lt; 3; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            int x &#x3D; t.x + dx[i], y &#x3D; t.y, z &#x3D; t.z;</span><br><span class="line">            if (x &gt;&#x3D; 0 &amp;&amp; x &lt; l &amp;&amp; g[x][y][z] !&#x3D; &#39;#&#39; &amp;&amp; d[x][y][z] &#x3D;&#x3D; -1)</span><br><span class="line">            &#123;</span><br><span class="line">                q[++tt] &#x3D; &#123; x, y, z &#125;;</span><br><span class="line">                d[x][y][z] &#x3D; d[t.x][t.y][t.z] + 1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        for (int i &#x3D; 0; i &lt; 4; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            int x &#x3D; t.x, y &#x3D; t.y + dy[i], z &#x3D; t.z + dz[i];</span><br><span class="line">            if (y &gt;&#x3D; 0 &amp;&amp; y &lt; r &amp;&amp; z &gt;&#x3D; 0 &amp;&amp; z &lt; c &amp;&amp; g[x][y][z] !&#x3D; &#39;#&#39; &amp;&amp; d[x][y][z] &#x3D;&#x3D; -1)</span><br><span class="line">            &#123;</span><br><span class="line">                q[++tt] &#x3D; &#123; x, y, z &#125;;</span><br><span class="line">                d[x][y][z] &#x3D; d[t.x][t.y][t.z] + 1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return d[e.x][e.y][e.z];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    while (cin &gt;&gt; l &gt;&gt; r &gt;&gt; c &amp;&amp; l)</span><br><span class="line">    &#123;</span><br><span class="line">        for (int i &#x3D; 0; i &lt; l; i++)</span><br><span class="line">            for (int j &#x3D; 0; j &lt; r; j++)</span><br><span class="line">                for (int k &#x3D; 0; k &lt; c; k++)</span><br><span class="line">                &#123;</span><br><span class="line">                    cin &gt;&gt; g[i][j][k];</span><br><span class="line">                    if (g[i][j][k] &#x3D;&#x3D; &#39;S&#39;) s &#x3D; &#123; i, j, k &#125;;</span><br><span class="line">                    if (g[i][j][k] &#x3D;&#x3D; &#39;E&#39;) e &#x3D; &#123; i, j, k &#125;;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">        int t &#x3D; bfs();</span><br><span class="line">        if (t &#x3D;&#x3D; -1) cout &lt;&lt; &quot;Trapped!&quot; &lt;&lt; endl;</span><br><span class="line">        else cout &lt;&lt; &quot;Escaped in &quot; &lt;&lt; t &lt;&lt; &quot; minute(s).&quot; &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>ACM专题</category>
      </categories>
  </entry>
  <entry>
    <title>紫书STL</title>
    <url>/2020/11/24/ACM/%E9%A2%98%E5%8D%95%E5%92%8C%E8%A1%A5%E9%A2%98/%E7%B4%AB%E4%B9%A6STL/</url>
    <content><![CDATA[<p>此题单于2020年11月24日整理，题解来自刘汝佳原书源码或者个人解法，不一定是很好的实现。</p>
<a id="more"></a>
<h2 id="ACM入门题，STL的应用"><a href="#ACM入门题，STL的应用" class="headerlink" title="ACM入门题，STL的应用"></a>ACM入门题，STL的应用</h2><ul>
<li><p><input disabled="" type="checkbox">  题单列表</p>
</li>
<li><p>排序+检索STL</p>
<table>
<thead>
<tr>
<th>题目</th>
<th>链接</th>
</tr>
</thead>
<tbody><tr>
<td>大理石在哪儿</td>
<td><a href="https://ac.nowcoder.com/acm/problem/116088"><strong>UVa10474</strong></a></td>
</tr>
</tbody></table>
</li>
<li><p>vector的应用</p>
<table>
<thead>
<tr>
<th>题目</th>
<th>链接</th>
</tr>
</thead>
<tbody><tr>
<td>木块问题</td>
<td><a href="https://ac.nowcoder.com/acm/problem/113954"><strong>UVa101</strong></a></td>
</tr>
</tbody></table>
</li>
<li><p>set的应用</p>
<table>
<thead>
<tr>
<th>题目</th>
<th>链接</th>
</tr>
</thead>
<tbody><tr>
<td>安迪的第一个字典</td>
<td><a href="https://ac.nowcoder.com/acm/problem/116429"><strong>UVa10815</strong></a></td>
</tr>
</tbody></table>
</li>
<li><p>map的应用</p>
<table>
<thead>
<tr>
<th>题目</th>
<th>链接</th>
</tr>
</thead>
<tbody><tr>
<td>反片语</td>
<td><a href="https://ac.nowcoder.com/acm/problem/114009"><strong>UVa156</strong></a></td>
</tr>
</tbody></table>
</li>
<li><p>stack、queue、priority_queue的应用</p>
<table>
<thead>
<tr>
<th>题目</th>
<th>链接</th>
</tr>
</thead>
<tbody><tr>
<td>集合栈计算机</td>
<td><a href="https://ac.nowcoder.com/acm/problem/117710"><strong>UVa12096</strong></a></td>
</tr>
<tr>
<td>团体队列</td>
<td><a href="https://ac.nowcoder.com/acm/problem/114393"><strong>UVa540</strong></a></td>
</tr>
<tr>
<td>丑数</td>
<td><a href="https://ac.nowcoder.com/acm/problem/113989"><strong>UVa136</strong></a></td>
</tr>
</tbody></table>
</li>
<li><p><input disabled="" type="checkbox">  题解</p>
</li>
<li><p>大理石在哪儿</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">10005</span>;</span><br><span class="line"><span class="keyword">int</span> p[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, q, kase = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;q) == <span class="number">2</span> &amp;&amp; n &amp;&amp; q)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;CASE# %d:\n&quot;</span>, ++kase);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;p[i]);</span><br><span class="line">        sort(p,p+n);</span><br><span class="line">        <span class="keyword">while</span>(q--)&#123;</span><br><span class="line">            <span class="keyword">int</span> x;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, x);</span><br><span class="line">            <span class="keyword">int</span> pos = lower_bound(p,p+n,x)-p;</span><br><span class="line">            <span class="keyword">if</span>(pos == n || p[pos] != x) <span class="built_in">printf</span>(<span class="string">&quot;%d not found\n&quot;</span>, x);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d found at %d\n&quot;</span>, x, pos+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>木块问题</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">30</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; p[maxn];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">find_blocks</span><span class="params">(<span class="keyword">int</span> e,<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(x = <span class="number">0</span>;x &lt; n;x++)</span><br><span class="line">        <span class="keyword">for</span>(y = <span class="number">0</span>;y &lt; p[x].size();y++)</span><br><span class="line">            <span class="keyword">if</span>(p[x][y] == e) <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove_blocks</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> h = y+<span class="number">1</span>;h &lt; p[x].size();h++)</span><br><span class="line">        p[p[x][h]].push_back(p[x][h]);</span><br><span class="line">    p[x].resize(y+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pile_blocks</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> y,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> h = y;h &lt; p[a].size();h++)</span><br><span class="line">        p[b].push_back(p[a][h]);</span><br><span class="line">    p[a].resize(y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_blocks</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;:&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; p[i].size();j++)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; p[i][j]; <span class="comment">// 格式控制</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	freopen(<span class="string">&quot;C:\\Users\\XUWL\\Desktop\\in.txt&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line">	freopen(<span class="string">&quot;C:\\Users\\XUWL\\Desktop\\out.txt&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="built_in">string</span> w1,w2;</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i++) p[i].push_back(i);</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; w1 &gt;&gt; a &gt;&gt; w2 &gt;&gt; b)&#123;</span><br><span class="line">        <span class="keyword">int</span> x1,y1,x2,y2;</span><br><span class="line">        find_blocks(a,x1,y1);</span><br><span class="line">        find_blocks(b,x2,y2);</span><br><span class="line">        <span class="keyword">if</span>(x1 == x2) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(w1 == <span class="string">&quot;move&quot;</span>) remove_blocks(x1,y1);</span><br><span class="line">        <span class="keyword">if</span>(w2 == <span class="string">&quot;onto&quot;</span>) remove_blocks(x2,y2);</span><br><span class="line">        pile_blocks(x1,y1,x2);</span><br><span class="line">    &#125;</span><br><span class="line">    print_blocks();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>安迪的第一个字典</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt; dict;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    freopen(<span class="string">&quot;C:\\Users\\XUWL\\Desktop\\in.txt&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line">	freopen(<span class="string">&quot;C:\\Users\\XUWL\\Desktop\\out.txt&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="built_in">stdout</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> s,buf;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; s)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; s.size();i++)</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">isalpha</span>(s[i])) s[i] = <span class="built_in">tolower</span>(s[i]);</span><br><span class="line">            <span class="keyword">else</span> s[i] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        <span class="function"><span class="built_in">stringstream</span> <span class="title">ss</span><span class="params">(s)</span></span>;</span><br><span class="line">        <span class="keyword">while</span>(ss &gt;&gt; buf) dict.insert(buf);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> it = dict.begin();it != dict.end();++it) <span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p> 反片语</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; input;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; cnt;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">re_expr</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> ans = s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; ans.size();i++)</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">isalpha</span>(ans[i])) ans[i] = <span class="built_in">tolower</span>(ans[i]);</span><br><span class="line">    sort(ans.begin(),ans.end());</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    freopen(<span class="string">&quot;C:\\Users\\XUWL\\Desktop\\in.txt&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">&quot;C:\\Users\\XUWL\\Desktop\\out.txt&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="built_in">stdout</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; s) &#123;</span><br><span class="line">        <span class="keyword">if</span>(s[<span class="number">0</span>] == <span class="string">&#x27;#&#x27;</span>) <span class="keyword">break</span>;</span><br><span class="line">        input.push_back(s);</span><br><span class="line">        <span class="built_in">string</span> r = re_expr(s);</span><br><span class="line">        <span class="keyword">if</span>(!cnt.count(r)) cnt[r] = <span class="number">0</span>;</span><br><span class="line">        cnt[r]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; ans;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; input.size();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(cnt[re_expr(input[i])] == <span class="number">1</span>)</span><br><span class="line">            ans.push_back(input[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    sort(ans.begin(),ans.end());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; ans.size();i++) <span class="built_in">cout</span> &lt;&lt; ans[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>集合栈计算器</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxQ = <span class="number">1000</span>+<span class="number">5</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	</span><br><span class="line">	freopen(<span class="string">&quot;C:\\Users\\XUWL\\Desktop\\in.txt&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">&quot;C:\\Users\\XUWL\\Desktop\\out.txt&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="built_in">stdout</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> t, kase = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;t) == <span class="number">1</span> &amp;&amp; t)&#123;</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; qId;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; t;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> n,x;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">            <span class="keyword">while</span>(n--) &#123;<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x); qId[x] = i;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Scenario #%d\n&quot;</span>, ++kase);</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q,q2[maxQ];</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">char</span> cmd[<span class="number">20</span>];</span><br><span class="line">            <span class="keyword">int</span> x;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, cmd);</span><br><span class="line">            <span class="keyword">if</span>(cmd[<span class="number">0</span>] == <span class="string">&#x27;S&#x27;</span>) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(cmd[<span class="number">0</span>] == <span class="string">&#x27;D&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> t = q.front();</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, q2[t].front()); q2[t].pop();</span><br><span class="line">                <span class="keyword">if</span>(q2[t].empty()) q.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">                <span class="keyword">int</span> t = qId[x];</span><br><span class="line">                <span class="keyword">if</span>(q2[t].empty()) q.push(t);</span><br><span class="line">                q2[t].push(x);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>丑数</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="built_in">set</span>&lt;ll&gt; in;</span><br><span class="line"><span class="built_in">priority_queue</span>&lt;ll,<span class="built_in">vector</span>&lt;ll&gt;,greater&lt;ll&gt;&gt; ugly;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> coeff[<span class="number">3</span>] = &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ugly.push(<span class="number">1</span>); in.insert(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">1</span>;;i++)&#123;</span><br><span class="line">    	ll t = ugly.top(); ugly.pop();</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">1500</span>)&#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;The 1500\&#x27;th ugly number is &quot;</span> &lt;&lt; t &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; <span class="number">3</span>;j++)&#123;</span><br><span class="line">        	ll x2 = t*coeff[j];</span><br><span class="line">        	<span class="keyword">if</span>(!in.count(x2)) &#123;in.insert(x2); ugly.push(x2);&#125;</span><br><span class="line">		&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="高精"><a href="#高精" class="headerlink" title="高精"></a>高精</h2></li>
</ul>
<ul>
<li>参考:算法竞赛入门经典，刘汝佳，第二版。</li>
</ul>
]]></content>
      <categories>
        <category>ACM专题</category>
      </categories>
  </entry>
  <entry>
    <title>寒假集训题单3</title>
    <url>/2021/01/16/ACM/%E9%A2%98%E5%8D%95%E5%92%8C%E8%A1%A5%E9%A2%98/1.16%E9%9B%86%E8%AE%AD%E8%A1%A5%E9%A2%98/</url>
    <content><![CDATA[<h2 id="1-16补题"><a href="#1-16补题" class="headerlink" title="1.16补题"></a>1.16补题</h2><ul>
<li><p><input disabled="" type="checkbox">  复习贪心、二分(尤其是浮点数二分的技巧)，图的联通与哈密顿距离,注意输入输出的处理和边界特判。</p>
</li>
<li><p><a href="https://vjudge.net/contest/417798#problem/A">** Escape from Stones ** </a></p>
</li>
<li><p>水题但是很有意思</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">string</span> s;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.size(); i++)</span><br><span class="line">		<span class="keyword">if</span> (s[i] == <span class="string">&#x27;r&#x27;</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i + <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = s.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">		<span class="keyword">if</span> (s[i] == <span class="string">&#x27;l&#x27;</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><a href="https://vjudge.net/contest/417798#problem/E">** 喷水装置 **</a></p>
</li>
<li><p><input disabled="" type="checkbox">  区间覆盖问题，敲板子即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable:4996)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">15010</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Seg</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">double</span> l, r;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Seg&amp; S) <span class="keyword">const</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> l &lt; S.l;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;seg[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (T--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> n;</span><br><span class="line">		<span class="keyword">double</span> l, w;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%lf%lf&quot;</span>, &amp;n, &amp;l, &amp;w);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">double</span> loc, R;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%lf%lf&quot;</span>, &amp;loc, &amp;R);</span><br><span class="line">			<span class="keyword">if</span> (R &lt; w / <span class="number">2</span>) <span class="keyword">continue</span>;</span><br><span class="line">			<span class="keyword">double</span> rng = <span class="built_in">sqrt</span>(R * R - w * w / <span class="number">4</span>);</span><br><span class="line">			seg[k++] = &#123; loc - rng, loc + rng &#125;;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		sort(seg, seg + k);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">double</span> st = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">bool</span> ok = <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> j = i;</span><br><span class="line">			<span class="keyword">double</span> ed = <span class="number">-2e9</span>;</span><br><span class="line">			<span class="keyword">while</span> (j &lt; k &amp;&amp; seg[j].l &lt;= st)</span><br><span class="line">			&#123;</span><br><span class="line">				ed = max(ed, seg[j].r);</span><br><span class="line">				j++;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (ed &lt; st) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">			res++;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (ed &gt;= l)</span><br><span class="line">			&#123;</span><br><span class="line">				ok = <span class="literal">true</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			i = j - <span class="number">1</span>;</span><br><span class="line">			st = ed;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (ok) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, res);</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
</ul>
<ul>
<li><a href="https://vjudge.net/contest/417798#problem/F">** Lucky Sum of Digits**</a></li>
<li><input disabled="" type="checkbox"> 贪心，输出尽可能多的7，也就是从0开始，枚举四，看剩下的数字能否整除7，若4枚举完了都没输出，则输出-1。</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n / <span class="number">4</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> f, s;</span><br><span class="line">		f = i * <span class="number">4</span>;</span><br><span class="line">		s = n - f;</span><br><span class="line">		<span class="keyword">if</span> (s % <span class="number">7</span> == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) <span class="built_in">cout</span> &lt;&lt; <span class="string">&#x27;4&#x27;</span>;</span><br><span class="line">			s /= <span class="number">7</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; s; j++) <span class="built_in">cout</span> &lt;&lt; <span class="string">&#x27;7&#x27;</span>;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p><a href="https://vjudge.net/contest/417798#problem/C">** C - Cable master **</a></p>
</li>
<li><p><input disabled="" type="checkbox">  浮点数二分，WA了无数次，估计是精度问题，思路很显而易见!</p>
</li>
<li><p><input disabled="" type="checkbox">  细节: 向0取整，也就是如果得到0.009，需要输出0。</p>
</li>
<li><p><input disabled="" type="checkbox">  浮点二分常见方法: </p>
</li>
<li><p>1.乘100向0取整再除100，循环直接设置100次(相当于窄化1/2^64)。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">10010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> h[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n, k;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">cin</span> &gt;&gt; h[i];</span><br><span class="line"></span><br><span class="line">	<span class="keyword">double</span> l = <span class="number">0</span>, r = <span class="number">1e9</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">double</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">		<span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) res += h[i] / mid;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span> (res &lt; k) r = mid;</span><br><span class="line">		<span class="keyword">else</span> l = mid;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%.2f&quot;</span>, <span class="built_in">floor</span>(l * <span class="number">100</span>) / <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>又或者</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable:4996)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-12</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">10010</span>;</span><br><span class="line"><span class="keyword">double</span> h[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n, k;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">cin</span> &gt;&gt; h[i];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">double</span> l = <span class="number">0.0</span>, r = <span class="number">1e9</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (r - l &gt; eps)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">double</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) res += h[i] / mid;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (res &lt; k) r = mid;</span><br><span class="line">		<span class="keyword">else</span> l = mid;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%.2f&quot;</span>, <span class="built_in">floor</span>(l * <span class="number">100</span>) / <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>但是过不了不知道为啥，可能精度不如上述方法。</p>
</li>
<li><p><input disabled="" type="checkbox">  乘100预处理转化为整数二分。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">10010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> h[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n, k;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">double</span> x;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">		h[i] = x * <span class="number">100</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> l = <span class="number">0</span>, r = <span class="number">2e9</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> mid = l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) res += h[i] / mid;</span><br><span class="line">		<span class="keyword">if</span> (res &gt;= k) l = mid;</span><br><span class="line">		<span class="keyword">else</span> r = mid;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%.2f&quot;</span>, l / <span class="number">100.0</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>ACM专题</category>
      </categories>
  </entry>
  <entry>
    <title>数论:扩展中国剩余定理</title>
    <url>/2021/01/02/ACM/%E7%AE%97%E6%B3%95%E5%92%8C%E6%A8%A1%E6%9D%BF%E6%80%BB%E7%BB%93/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E6%89%A9%E5%B1%95%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86/</url>
    <content><![CDATA[<h2 id="扩展中国剩余定理"><a href="#扩展中国剩余定理" class="headerlink" title="扩展中国剩余定理"></a>扩展中国剩余定理</h2><ul>
<li><p><input disabled="" type="checkbox">  前言: 扩展中国剩余定理(ExCRT)也是用来用来求一元线性同余方程组的解，但与中国剩余定理(CRT)不同，它不限制模数是否互质。</p>
<blockquote>
<p>在推导中国剩余定理前，我们先来看看下面几个概念:</p>
</blockquote>
</li>
<li><p>裴蜀定理:<br>$$ 设a，b是不全为0的整数，则存在x，y使得ax + by = gcd(a, b). $$</p>
</li>
</ul>
<ul>
<li>乘法逆元:<br>$$ 如果一个线性同余方程 ax \equiv 1 (mod \ b)，则称x是a \ mod \ b的乘法逆元，记作x = a^{-1}. $$<br>求逆元可以经过转化后利用扩展欧几里得算法: $$ ax + by = 1. $$</li>
</ul>
<blockquote>
<p>中国剩余定理解决的问题的基本形式:<br>对于如下k个方程方程求解x:</p>
</blockquote>
<p>$$x \equiv a_1 (mod \ m_1)$$<br>$$x \equiv a_2 (mod \ m_2)$$<br>$$x \equiv a_3 (mod \ m_3)$$<br>$$…$$<br>$$x \equiv a_k (mod \ m_k)$$</p>
<ul>
<li>推导解决方案:<br>惯用方式展开:<br>$$x = k_1\times a_1 + m_1$$<br>$$x = k_2\times a_2 + m_2$$<br>联立知:<br>$$k_1\times a_1 + m_1 = k_2\times a_2 + m_2$$<br>得到:<br>$$k_1\times a_1 - k_2\times a_2 = m_2 - m_1$$<br>由扩展欧几里得知有解条件是: $$(a_1, a_2) | (m_2 - m_1)$$</li>
</ul>
<p>由裴蜀定理知如下方程一定有解:<br>$$k_1\times a_1 - k_2\times a_2 = (a_1, a_2)$$<br>完整解为:<br>$$k_1 = k_1 + \frac{a_2}{(a_1, a_2)} \times k$$<br>$$k_2 = k_2 - \frac{a_1}{(a_1, a_2)} \times k$$<br>$$其中有k \in Z.$$<br>于是有:<br>$$x = (k_1 + \frac{a_2}{(a_1, a_2)} \times k)\times a_1 + m_1$$<br>$$= k_1\times a_1 + \frac{a_1\times a_2}{(a_1, a_2)} \times k + m_1$$<br>因为x有多解，我们令:<br>$$k_1\times a_1 + m_1 = x_0$$<br>则x的全部解可写为:<br>$$x = x_0 + k\times [a_1, a_2] $$<br>也即:<br>$$x \equiv [a_1, a_2] (mod \ x_0)$$<br>这样我们就成功地把两个方程合并成了一个，反复此过程最后得到一个方程，此时我们可以得出最小正解:<br>$$x = (x_0 \% [a_w, a_z] + [a_w, a_z]) \% [a_w, a_z]$$</p>
]]></content>
      <categories>
        <category>ACM专题</category>
      </categories>
  </entry>
  <entry>
    <title>栈</title>
    <url>/2020/11/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%A0%E9%A2%98%E7%AD%94%E6%A1%88/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84--%E6%A0%88/</url>
    <content><![CDATA[<p>鉴于自己在看机械工业出版社的数据结构时，常常苦于没有答案，便觉得有必要整理出一份自己的答案，虽然不一定完全正确，实现也不一定高效，但总有些参考价值叭。</p>
<a id="more"></a>
<h2 id="栈在教材上的应用"><a href="#栈在教材上的应用" class="headerlink" title="栈在教材上的应用"></a>栈在教材上的应用</h2><blockquote>
<p>栈是一种十分有用的数据结构!!在后续学习中会不断出现对它的应用!!请大家务必掌握!!</p>
</blockquote>
<ul>
<li>栈的纯虚基类<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 纯虚基类</span></span><br><span class="line"><span class="comment">// created on 2020.10.21 by Joe</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> STACK_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STACK_H_</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">stack</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">virtual</span> ~<span class="built_in">stack</span>() &#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> T&amp; <span class="title">top</span><span class="params">()</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">const</span> T&amp; theElement)</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></li>
<li>数组实现的栈<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//数组实现的栈</span></span><br><span class="line"><span class="comment">// created on 2020.10.21 by Joe</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ARRAYSTACK_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ARRAYSTACK_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;pureBaseStack.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">arrayStack</span> :</span> <span class="keyword">public</span> <span class="built_in">stack</span>&lt;T&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	~arrayStack() &#123; <span class="keyword">delete</span>[]element; &#125;</span><br><span class="line">	arrayStack(<span class="keyword">int</span> initialCapacity = <span class="number">10</span>);</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">override</span> <span class="keyword">final</span> </span>&#123; <span class="keyword">return</span> stackTop == <span class="number">-1</span>; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">override</span> <span class="keyword">final</span> </span>&#123; <span class="keyword">return</span> stackTop + <span class="number">1</span>; &#125;</span><br><span class="line">	<span class="function">T&amp; <span class="title">top</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">override</span> <span class="keyword">final</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">const</span> T&amp; theElement)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	T* element;</span><br><span class="line">	<span class="keyword">int</span> stackTop;</span><br><span class="line">	<span class="keyword">int</span> arrayLength;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">arrayStack&lt;T&gt;::arrayStack(<span class="keyword">int</span> initialCapacity)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (initialCapacity &lt; <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">ostringstream</span> s;</span><br><span class="line">		s &lt;&lt; <span class="string">&quot;can&#x27;t creat a stack with capacity &lt;= 0!&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">throw</span> s.str();</span><br><span class="line">	&#125;</span><br><span class="line">	element = <span class="keyword">new</span> T[initialCapacity];</span><br><span class="line">	stackTop = <span class="number">-1</span>;</span><br><span class="line">	arrayLength = initialCapacity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">T&amp; arrayStack&lt;T&gt;::top() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (stackTop == <span class="number">-1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">ostringstream</span> s;</span><br><span class="line">		s &lt;&lt; <span class="string">&quot;Stack is empty!&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">throw</span> s.str();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> element[stackTop];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">void</span> arrayStack&lt;T&gt;::pop()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (stackTop == <span class="number">-1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">ostringstream</span> s;</span><br><span class="line">		s &lt;&lt; <span class="string">&quot;can&#x27;t pop from an empty stack!&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">throw</span> s.str();</span><br><span class="line">	&#125;</span><br><span class="line">	element[stackTop--].~T();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">void</span> arrayStack&lt;T&gt;::push(<span class="keyword">const</span> T&amp; theElement)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (stackTop == arrayLength - <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		arrayLength *= <span class="number">2</span>;</span><br><span class="line">		T* temp = <span class="keyword">new</span> T[arrayLength];</span><br><span class="line">		<span class="built_in">std</span>::copy(element, element + stackTop + <span class="number">1</span>, temp);</span><br><span class="line">		<span class="keyword">delete</span>[]element;</span><br><span class="line">		element = temp;</span><br><span class="line">	&#125;</span><br><span class="line">	element[++stackTop] = theElement;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></li>
<li>链表实现的栈<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// created on 2020.10.21 by Joe</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> LINKEDSTACK_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LINKEDSTACK_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;pureBaseStack.h&quot;</span></span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stackNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	T element;</span><br><span class="line">	stackNode* next;</span><br><span class="line">	stackNode() = <span class="keyword">default</span>;</span><br><span class="line">	stackNode(<span class="keyword">const</span> T&amp; theElement) : element(theElement) &#123;&#125;</span><br><span class="line">	stackNode(<span class="keyword">const</span> T&amp; theElement, stackNode&lt;T&gt;* theNext) : element(theElement), next(theNext) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">linkedStack</span> :</span> <span class="keyword">public</span> <span class="built_in">stack</span>&lt;T&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	~linkedStack();</span><br><span class="line">	linkedStack(<span class="keyword">int</span> initialCapacity = <span class="number">10</span>);</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">override</span> <span class="keyword">final</span> </span>&#123; <span class="keyword">return</span> stackSize == <span class="number">0</span>; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">override</span> <span class="keyword">final</span></span>&#123; <span class="keyword">return</span> stackSize; &#125;</span><br><span class="line">	<span class="function">T&amp; <span class="title">top</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">override</span> <span class="keyword">final</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">const</span> T&amp; theElement)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	stackNode&lt;T&gt;* stackTop;</span><br><span class="line">	<span class="keyword">int</span> stackSize;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">linkedStack&lt;T&gt;::~linkedStack()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">while</span> (stackTop != <span class="literal">nullptr</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		stackNode&lt;T&gt;* nextNode = stackTop-&gt;next;</span><br><span class="line">		<span class="keyword">delete</span> stackTop;</span><br><span class="line">		stackTop = nextNode;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">linkedStack&lt;T&gt;::linkedStack(<span class="keyword">int</span> initialCapacity)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (initialCapacity &lt; <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">ostringstream</span> s;</span><br><span class="line">		s &lt;&lt; <span class="string">&quot;can&#x27;t creat a stack with capacity &lt;= 0!&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">throw</span> s.str();</span><br><span class="line">	&#125;</span><br><span class="line">	stackSize = <span class="number">0</span>;</span><br><span class="line">	stackTop = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">T&amp; linkedStack&lt;T&gt;::top() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (stackSize == <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">ostringstream</span> s;</span><br><span class="line">		s &lt;&lt; <span class="string">&quot;Stack is empty!&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">throw</span> s.str();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> stackTop-&gt;element;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">void</span> linkedStack&lt;T&gt;::pop()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (stackSize == <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">ostringstream</span> s;</span><br><span class="line">		s &lt;&lt; <span class="string">&quot;can&#x27;t pop from an empty stack!&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">throw</span> s.str();</span><br><span class="line">	&#125;</span><br><span class="line">	stackNode&lt;T&gt;* nextNode = stackTop-&gt;next;</span><br><span class="line">	<span class="keyword">delete</span> stackTop;</span><br><span class="line">	stackTop = nextNode;</span><br><span class="line">	stackSize--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">void</span> linkedStack&lt;T&gt;::push(<span class="keyword">const</span> T&amp; theElement)</span><br><span class="line">&#123;</span><br><span class="line">	stackTop = <span class="keyword">new</span> stackNode&lt;T&gt;(theElement, stackTop);</span><br><span class="line">	stackSize++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></li>
<li>双栈共享空间<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// created on 2020.10.21 by Joe</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> TWOSTACKS_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TWOSTACKS_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">twoStack</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	~twoStack() &#123; <span class="keyword">delete</span>[]element; &#125;</span><br><span class="line">	twoStack(<span class="keyword">int</span> initialCapacity = <span class="number">10</span>);</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> stackTop1 == <span class="number">-1</span> &amp;&amp; stackTop2 == arrayLength; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> stackTop1 - stackTop2 + arrayLength + <span class="number">1</span>; &#125;</span><br><span class="line">	<span class="function">T&amp; <span class="title">top</span><span class="params">(<span class="keyword">int</span> stackNumber)</span> <span class="keyword">const</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">(<span class="keyword">int</span> stackNumber)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> stackNumber, <span class="keyword">const</span> T&amp; theElement)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	T* element;</span><br><span class="line">	<span class="keyword">int</span> stackTop1;</span><br><span class="line">	<span class="keyword">int</span> stackTop2;</span><br><span class="line">	<span class="keyword">int</span> arrayLength;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> stackNumber)</span> <span class="keyword">const</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">void</span> twoStack&lt;T&gt;::check(<span class="keyword">int</span> stackNumber) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (stackNumber &lt; <span class="number">1</span> || stackNumber &gt; <span class="number">2</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">ostringstream</span> s;</span><br><span class="line">		s &lt;&lt; <span class="string">&quot;stackNumber input error!&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">throw</span> s.str();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">twoStack&lt;T&gt;::twoStack(<span class="keyword">int</span> initialCapacity)</span><br><span class="line">&#123;</span><br><span class="line">	element = <span class="keyword">new</span> T[initialCapacity];</span><br><span class="line">	arrayLength = initialCapacity;</span><br><span class="line">	stackTop1 = <span class="number">-1</span>;</span><br><span class="line">	stackTop2 = arrayLength;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">T&amp; twoStack&lt;T&gt;::top(<span class="keyword">int</span> stackNumber) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">	check(stackNumber);</span><br><span class="line">	<span class="keyword">switch</span> (stackNumber)</span><br><span class="line">	&#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">		<span class="keyword">if</span> (stackTop1 == <span class="number">-1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">ostringstream</span> s;</span><br><span class="line">			s &lt;&lt; <span class="string">&quot;stack1 is empty!&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">			<span class="keyword">throw</span> s.str();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> element[stackTop1];</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">		<span class="keyword">if</span> (stackTop2 == arrayLength)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">ostringstream</span> s;</span><br><span class="line">			s &lt;&lt; <span class="string">&quot;stack2 is empty!&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">			<span class="keyword">throw</span> s.str();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> element[stackTop2];</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">void</span> twoStack&lt;T&gt;::pop(<span class="keyword">int</span> stackNumber)</span><br><span class="line">&#123;</span><br><span class="line">	check(stackNumber);</span><br><span class="line">	<span class="keyword">switch</span> (stackNumber)</span><br><span class="line">	&#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">		<span class="keyword">if</span> (stackTop1 == <span class="number">-1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">ostringstream</span> s;</span><br><span class="line">			s &lt;&lt; <span class="string">&quot;stack1 is empty!&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">			<span class="keyword">throw</span> s.str();</span><br><span class="line">		&#125;</span><br><span class="line">		element[stackTop1--].~T();</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">		<span class="keyword">if</span> (stackTop2 == arrayLength)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">ostringstream</span> s;</span><br><span class="line">			s &lt;&lt; <span class="string">&quot;stack2 is empty!&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">			<span class="keyword">throw</span> s.str();</span><br><span class="line">		&#125;</span><br><span class="line">		element[stackTop2++].~T();</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">void</span> twoStack&lt;T&gt;::push(<span class="keyword">int</span> stackNumber, <span class="keyword">const</span> T&amp; theElement)</span><br><span class="line">&#123;</span><br><span class="line">	check(stackNumber);</span><br><span class="line">	<span class="keyword">if</span> (stackTop1 + <span class="number">1</span> == stackTop2)</span><br><span class="line">	&#123;</span><br><span class="line">		T* temp = <span class="keyword">new</span> T[<span class="number">2</span> * arrayLength];</span><br><span class="line">		<span class="built_in">std</span>::copy(element, element + stackTop1 + <span class="number">1</span>, temp);</span><br><span class="line">		<span class="built_in">std</span>::copy(element + stackTop2, element + arrayLength, temp + arrayLength + stackTop2);</span><br><span class="line">		<span class="keyword">delete</span>[]element;</span><br><span class="line">		element = temp;</span><br><span class="line">		stackTop2 = arrayLength + stackTop2;</span><br><span class="line">		arrayLength *= <span class="number">2</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">switch</span> (stackNumber)</span><br><span class="line">	&#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">		element[++stackTop1] = theElement;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">		element[--stackTop2] = theElement;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></li>
<li>括号匹配<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 括号匹配</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;arrayStack.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="comment">// complexity of time:O(s.size())</span></span><br><span class="line"><span class="comment">// extra complexity of space:O(s.size())</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">matchWithStack</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	arrayStack&lt;<span class="keyword">char</span>&gt; matchStack;</span><br><span class="line">	<span class="keyword">char</span> temp;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.size(); i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (s[i] == <span class="string">&#x27;&#123;&#x27;</span> || s[i] == <span class="string">&#x27;[&#x27;</span> || s[i] == <span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">			matchStack.push(s[i]);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (s[i] == <span class="string">&#x27;&#125;&#x27;</span> || s[i] == <span class="string">&#x27;]&#x27;</span> || s[i] == <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			temp = matchStack.top();</span><br><span class="line">			<span class="keyword">if</span> (temp == s[i])</span><br><span class="line">				matchStack.pop();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (!matchStack.empty())</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>列车重排<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//列车重排</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;arrayStack.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">arrayStack&lt;<span class="keyword">int</span>&gt;* rails;</span><br><span class="line"><span class="keyword">int</span> numberOfCars;</span><br><span class="line"><span class="keyword">int</span> numberOfTrails;</span><br><span class="line"><span class="keyword">int</span> smallestCar;</span><br><span class="line"><span class="keyword">int</span> itsTrail;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">outputCarFromTrail</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	rails[itsTrail].pop();</span><br><span class="line">	smallestCar = numberOfCars + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= numberOfTrails; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (!rails[i].empty() &amp;&amp; rails[i].top() &lt; smallestCar)</span><br><span class="line">		&#123;</span><br><span class="line">			smallestCar = rails[i].top();</span><br><span class="line">			itsTrail = i;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">inputCarToTrail</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> bestTrail = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> bestTop = numberOfCars + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= numberOfTrails; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (!rails[i].empty())</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> d = rails[i].top();</span><br><span class="line">			<span class="keyword">if</span> (n &lt; d &amp;&amp; d &lt; bestTop)</span><br><span class="line">			&#123;</span><br><span class="line">				bestTop = d;</span><br><span class="line">				bestTrail = i;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			bestTrail = i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (bestTrail == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	rails[bestTrail].push(n);</span><br><span class="line">	<span class="keyword">if</span> (n &lt; smallestCar)</span><br><span class="line">	&#123;</span><br><span class="line">		smallestCar = n;</span><br><span class="line">		itsTrail = bestTrail;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">railRoad</span><span class="params">(<span class="keyword">int</span> input[], <span class="keyword">int</span> theNumberOfCars, <span class="keyword">int</span> theNumberOfTrails)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	numberOfCars = theNumberOfCars;</span><br><span class="line">	numberOfTrails = theNumberOfTrails;</span><br><span class="line">	rails = <span class="keyword">new</span> arrayStack&lt;<span class="keyword">int</span>&gt;[theNumberOfTrails + <span class="number">1</span>];</span><br><span class="line">	smallestCar = numberOfCars + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">int</span> nextCarToOutput = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= numberOfCars; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (input[i] == nextCarToOutput)</span><br><span class="line">		&#123;</span><br><span class="line">			nextCarToOutput++;</span><br><span class="line">			<span class="keyword">while</span> (smallestCar == nextCarToOutput)</span><br><span class="line">			&#123;</span><br><span class="line">				outputCarFromTrail();</span><br><span class="line">				nextCarToOutput++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="keyword">if</span> (!inputCarToTrail(input[i]))</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>离线等价类<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 离线等价类</span></span><br><span class="line"><span class="comment">// offline equiralence classes</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;arrayStack.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">offlineEquiralenceClasses</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n, r;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	<span class="keyword">if</span> (n &lt; <span class="number">2</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;can&#x27;t calculate set with elements &lt; 2&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; r;</span><br><span class="line">	<span class="keyword">if</span> (r &lt; <span class="number">2</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;can&#x27;t calculate set with relations &lt; 2&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	arrayStack&lt;<span class="keyword">int</span>&gt;* <span class="built_in">list</span> = <span class="keyword">new</span> arrayStack&lt;<span class="keyword">int</span>&gt;[n + <span class="number">1</span>];</span><br><span class="line">	<span class="keyword">int</span> a, b;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= r; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">		<span class="built_in">list</span>[a].push(b);</span><br><span class="line">		<span class="built_in">list</span>[b].push(a);</span><br><span class="line">	&#125;</span><br><span class="line">	arrayStack&lt;<span class="keyword">int</span>&gt; unprocessedList;</span><br><span class="line">	<span class="keyword">bool</span> *out = <span class="keyword">new</span> <span class="keyword">bool</span>[n + <span class="number">1</span>];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		out[i] = <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">int</span> tol = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (!out[i])</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;class &quot;</span> &lt;&lt; tol &lt;&lt; <span class="string">&quot; is:&quot;</span> &lt;&lt; <span class="string">&quot; [&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;,&quot;</span>;</span><br><span class="line">			out[i] = <span class="literal">true</span>;</span><br><span class="line">			unprocessedList.push(i);</span><br><span class="line">			<span class="keyword">while</span> (!unprocessedList.empty())</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">int</span> j = unprocessedList.top();</span><br><span class="line">				unprocessedList.pop();</span><br><span class="line">				<span class="keyword">while</span> (!<span class="built_in">list</span>[j].empty())</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">int</span> q = <span class="built_in">list</span>[j].top();</span><br><span class="line">					<span class="built_in">list</span>[j].pop();</span><br><span class="line">					<span class="keyword">if</span> (!out[q])</span><br><span class="line">					&#123;</span><br><span class="line">						<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; q &lt;&lt; <span class="string">&quot;,&quot;</span>;</span><br><span class="line">						out[q] = <span class="literal">true</span>;</span><br><span class="line">						unprocessedList.push(q);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;]&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">			tol++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>汉诺塔<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 汉诺塔</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;arrayStack.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line">arrayStack&lt;<span class="keyword">int</span>&gt; Hanoi[<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">moveAndShow</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (n &gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		moveAndShow(n - <span class="number">1</span>, x, z, y);</span><br><span class="line">		<span class="keyword">int</span> d = Hanoi[x].top();</span><br><span class="line">		Hanoi[x].pop();</span><br><span class="line">		Hanoi[y].push(d);</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;从&quot;</span> &lt;&lt; x &lt;&lt; <span class="string">&quot;移动[&quot;</span> &lt;&lt; d &lt;&lt; <span class="string">&quot;]&quot;</span> &lt;&lt; <span class="string">&quot;到&quot;</span> &lt;&lt; y &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		moveAndShow(n - <span class="number">1</span>, z, y, x);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HanoiTower</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">		Hanoi[<span class="number">1</span>].push(i);</span><br><span class="line">	moveAndShow(n, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>迷宫老鼠<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 迷宫老鼠</span></span><br><span class="line"><span class="comment">// find path in a maze</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;arrayStack.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> maze[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">position</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> row, col;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">findPath</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> size;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入迷宫尺寸:&quot;</span>;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; size;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= size; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		maze[<span class="number">0</span>][i] = maze[size + <span class="number">1</span>][i] = <span class="number">1</span>;</span><br><span class="line">		maze[i][<span class="number">0</span>] = maze[i][size + <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	arrayStack&lt;position&gt;* path = <span class="keyword">new</span> arrayStack&lt;position&gt;;</span><br><span class="line">	<span class="keyword">int</span> barrRow, barrCol;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入障碍数量:&quot;</span>;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; barrRow &gt;&gt; barrCol;</span><br><span class="line">		<span class="keyword">while</span>(barrRow &lt; <span class="number">1</span> || barrCol &lt; <span class="number">1</span> || barrRow &gt; size || barrCol &gt; size)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入的障碍物有误，请输入正确的障碍物坐标:&quot;</span>;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; barrRow &gt;&gt; barrCol;</span><br><span class="line">		&#125;</span><br><span class="line">		maze[barrRow][barrCol] = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	position end;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入终点位置:&quot;</span>;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; end.row &gt;&gt; end.col;</span><br><span class="line">	<span class="keyword">while</span> (end.row &lt; <span class="number">0</span> || end.col &lt; <span class="number">0</span> || end.row &gt; size + <span class="number">1</span> || end.col &gt; size + <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;终点位置不符合规范，请重新输入:&quot;</span>;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; end.row &gt;&gt; end.col;</span><br><span class="line">	&#125;</span><br><span class="line">	position offset[<span class="number">4</span>];</span><br><span class="line">	offset[<span class="number">0</span>].row = <span class="number">0</span>; offset[<span class="number">0</span>].col = <span class="number">1</span>;</span><br><span class="line">	offset[<span class="number">1</span>].row = <span class="number">1</span>; offset[<span class="number">1</span>].col = <span class="number">0</span>;</span><br><span class="line">	offset[<span class="number">2</span>].row = <span class="number">0</span>; offset[<span class="number">2</span>].col = <span class="number">-1</span>;</span><br><span class="line">	offset[<span class="number">3</span>].row = <span class="number">-1</span>; offset[<span class="number">3</span>].col = <span class="number">0</span>;</span><br><span class="line">	position here;</span><br><span class="line">	here.row = <span class="number">1</span>; here.col = <span class="number">1</span>;</span><br><span class="line">	maze[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">int</span> option = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> lastOption = <span class="number">3</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span> (here.row != end.row || here.col != end.col)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> r, c;</span><br><span class="line">		<span class="keyword">while</span> (option &lt;= lastOption)</span><br><span class="line">		&#123;</span><br><span class="line">			r = here.row + offset[option].row;</span><br><span class="line">			c = here.col + offset[option].col;</span><br><span class="line">			<span class="keyword">if</span> (maze[r][c] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">			option++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (option &lt;= lastOption)</span><br><span class="line">		&#123;</span><br><span class="line">			path-&gt;push(here);</span><br><span class="line">			here.row = r;</span><br><span class="line">			here.col = c;</span><br><span class="line">			maze[r][c] = <span class="number">1</span>;</span><br><span class="line">			option = <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (path-&gt;empty())</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">			position next = path-&gt;top();</span><br><span class="line">			path-&gt;pop();</span><br><span class="line">			<span class="keyword">if</span> (next.row == here.row)</span><br><span class="line">				option = <span class="number">2</span> + next.col - here.col;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				option = <span class="number">3</span> + (next.row - here.row) % <span class="number">4</span>;</span><br><span class="line">			here = next;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (!path-&gt;empty())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;(&quot;</span> &lt;&lt; path-&gt;top().row &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; path-&gt;top().col &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		path-&gt;pop();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>开关盒布线<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 开关盒布线</span></span><br><span class="line"><span class="comment">// check net and judge</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;linkedStack.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">checkBox</span><span class="params">(<span class="keyword">int</span> net[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	linkedStack&lt;<span class="keyword">int</span>&gt;* s = <span class="keyword">new</span> linkedStack&lt;<span class="keyword">int</span>&gt;(n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (!s-&gt;empty())</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (net[i] == net[s-&gt;top()])</span><br><span class="line">				s-&gt;pop();</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				s-&gt;push(i);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			s-&gt;push(i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (!s-&gt;empty())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;box is not routable!&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;box is routable!&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="栈的习题"><a href="#栈的习题" class="headerlink" title="栈的习题"></a>栈的习题</h2>小徐太懒了还没开始写~</li>
</ul>
<h2 id="前中后缀表达式-学习让计算机处理算术表达式"><a href="#前中后缀表达式-学习让计算机处理算术表达式" class="headerlink" title="前中后缀表达式: 学习让计算机处理算术表达式"></a>前中后缀表达式: 学习让计算机处理算术表达式</h2><ul>
<li><p><input disabled="" type="checkbox">  了解前中后缀表达式</p>
</li>
<li><p><input disabled="" type="checkbox">  中缀表达式<br>中缀表达式是最贴近我们人的阅读习惯的一类表达式，它和我们平常生活中接触到的数学算式没有区别，它的出现完全是方便人类进行数学演算，然而这种表达式对计算机而言是生涩难懂的。</p>
</li>
<li><p>中缀表达式形如: $3\times 2+(4-2)\times 7 -8\div (6+3)$</p>
</li>
<li><p><input disabled="" type="checkbox">  前缀表达式<br>顾名思义，前缀表达式是运算符在它的(注意这个”它的”的含义)操作数之前的表达式，计算机很容易就能在线性时间内完成对前缀表达式的计算。</p>
</li>
<li><p>前缀表达式形如: $-+1\times +2\ 3\ 4\ 5$</p>
</li>
<li><p>中缀表达式转前缀表达式的规则:</p>
</li>
</ul>
<p>1.维护两个栈，一个栈叫做s1，另一个栈叫做s2，s2用来保存中间结果。<br>2.从右至左扫描中缀表达式:</p>
<ul>
<li><p>若遇到数字，直接压入栈s1.</p>
</li>
<li><p>若遇到运算符，则分以下情况:<br>  1.s2为空或者栈顶运算符为’)’，则直接将其压入s2。</p>
<p>  2.s2中栈顶运算符优先级不高于($\leq$)此运算符，也将该运算符压入s2。 </p>
<p>  3.s2中栈顶元素优先级高于该运算符，则持续将s2栈顶的元素弹入s1，直到某一刻s2栈顶的元素满足如上1，2两个条件之一，则将该运算符压入s2(在此之前这个运算符一直在等待着被插入)。</p>
</li>
</ul>
<p>3.遇到括号时:</p>
<ul>
<li>如果是’)’，则直接压入s2。</li>
<li>如果是’(‘，则持续将s2的栈顶元素弹入s1，直到遇到’)’，然后将s2顶部的’)’弹出。</li>
</ul>
<p>4.扫描结束时，把s2中剩余运算符全部弹入s1。<br>5.把s1中元素全部弹出。</p>
<ul>
<li>计算前缀表达式</li>
</ul>
<p>1.同样维护一个栈，名叫s1。</p>
<p>2.从右至左扫描前缀表达式，遇到数字，则进栈，遇到运算符，则取出栈顶的两个元素，按照先后顺序称为$x_1$和$x_2$，计算$x_1$ $(+\ -\ \times \ \div)$ $x_2$，把结果入栈。</p>
<p>3.扫描结束时，s1中剩余元素即是结果。</p>
<blockquote>
<p>Tips:为什么在比较操作符优先级时，栈顶运算的优先级不高于正在操作的运算符时才压入栈呢?想象一下，当有两个同样优先级的运算符出现在中缀表达式中时，举个例子，$+和-$，假设$+$在左，$-$<br>在右，由于我们是从右向左扫描，$-$必然会在$+$之前进入s2，此时，如若在碰到$+$后，直接将$-$弹入s1，那么在最终得到的前缀表达式中，$-$必然在$+$之后出现，然而计算时扫描是从右往左，这意味着<br>最终计算时$-$先被拿来计算了，这显然不正确。</p>
</blockquote>
<ul>
<li><p>举例(自行模拟):</p>
</li>
<li><p>中缀表达式: $$1+((2+3)\times 4)-5$$</p>
</li>
<li><p>其前缀表达式为$$-+1\times+2\ 3\ 4\ 5$$</p>
</li>
<li><p>计算的过程:<br>$$将5，4，3，2均入栈$$<br>$$取2和3，执行2+3，把5入栈$$<br>$$取5和4，执行5\times 4，把20入栈$$<br>$$……$$<br>$$得到结果为16.$$</p>
</li>
<li><p><input disabled="" type="checkbox">  后缀表达式<br>后缀表达式和前缀表达式十分类似，但在细节处有所不同。后缀表达式是运算符都在它的操作数之后的表达式。</p>
</li>
<li><p>后缀表达式形如: $1\ 2\ 3 + 4\times+5-$</p>
</li>
<li><p>中缀表达式转后缀表达式的规则:</p>
</li>
</ul>
<p>1.维护两个栈，一个栈叫做s1，另一个栈叫做s2，s2用来保存中间结果。<br>2.从左至右扫描中缀表达式:</p>
<ul>
<li><p>若遇到数字，直接压入栈s1.</p>
</li>
<li><p>若遇到运算符，则分以下情况:<br>  1.s2为空或者栈顶运算符为’(‘，则直接将其压入s2。</p>
<p>  2.s2中栈顶运算符优先级低于(细节!!)此运算符，也将该运算符压入s2。 </p>
<p>  3.s2中栈顶元素优先级不低于($\geq$)该运算符，则持续将s2栈顶的元素弹入s1，直到某一刻s2栈顶的元素满足如上1，2两个条件之一，则将该运算符压入s2(在此之前这个运算符一直在等待着被插入)。</p>
</li>
</ul>
<p>3.遇到括号时:</p>
<ul>
<li>如果是’(‘，则直接压入s2。</li>
<li>如果是’)’，则持续将s2的栈顶元素弹入s1，直到遇到’(‘，然后将s2顶部的’(‘弹出。</li>
</ul>
<p>4.扫描结束时，把s2中剩余运算符全部弹入s1。<br>5.把s1中元素全部弹出。</p>
<ul>
<li>计算后缀表达式</li>
</ul>
<p>1.同样维护一个栈，名叫s1。</p>
<p>2.从左至右扫描后缀表达式，遇到数字，则进栈，遇到运算符，则取出栈顶的两个元素，按照先后顺序称为$x_1$和$x_2$，计算$x_2$ $(+\ -\ \times \ \div)$ $x_1$(细节!!)，把结果入栈。</p>
<p>3.扫描结束时，s1中剩余元素即是结果。</p>
<ul>
<li><p>例子不表</p>
</li>
<li><p><input disabled="" type="checkbox">  给定中缀表达式求运算结果的C++实现: 仅给出中缀转前缀实现，该实现仅能计算10以内的整数的中缀表达式，扩展可以自行实现。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;arrayStack.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">string</span> expr;</span><br><span class="line">	arrayStack&lt;<span class="keyword">char</span>&gt; s1, s2;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; expr;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = expr.length()<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--) &#123;  <span class="comment">// Scan from right to left</span></span><br><span class="line">		<span class="keyword">char</span> e = expr.at(i);</span><br><span class="line">		<span class="keyword">if</span> (e &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; e &lt;= <span class="string">&#x27;9&#x27;</span>) s1.push(e);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (e == <span class="string">&#x27;)&#x27;</span>) s2.push(e);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (e == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">			<span class="keyword">while</span> (!s2.empty()) &#123;</span><br><span class="line">				<span class="keyword">char</span> t = s2.top();</span><br><span class="line">				s2.pop();</span><br><span class="line">				<span class="keyword">if</span> (t == <span class="string">&#x27;)&#x27;</span>) <span class="keyword">break</span>;</span><br><span class="line">				s1.push(t);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> (s2.empty()) &#123; s2.push(e); <span class="keyword">continue</span>; &#125;</span><br><span class="line">			<span class="keyword">char</span> t = s2.top();</span><br><span class="line">			<span class="keyword">if</span> (t == <span class="string">&#x27;)&#x27;</span>) s2.push(e);</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (e == <span class="string">&#x27;*&#x27;</span> || e == <span class="string">&#x27;/&#x27;</span>) s2.push(e);</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">while</span> (!s2.empty()) &#123;</span><br><span class="line">					t = s2.top();</span><br><span class="line">					<span class="keyword">if</span> (t == <span class="string">&#x27;+&#x27;</span> || t == <span class="string">&#x27;-&#x27;</span> || t == <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">						s2.push(e);</span><br><span class="line">						<span class="keyword">break</span>;</span><br><span class="line">					&#125;</span><br><span class="line">					s1.push(t);</span><br><span class="line">					s2.pop();</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span> (s2.empty()) s2.push(e);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (!s2.empty()) &#123; <span class="comment">// Clear remaining</span></span><br><span class="line">		<span class="keyword">char</span> t = s2.top();</span><br><span class="line">		s2.pop();</span><br><span class="line">		s1.push(t);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (!s1.empty()) &#123; <span class="comment">// Output</span></span><br><span class="line">		<span class="keyword">char</span> t = s1.top();</span><br><span class="line">		s1.pop();</span><br><span class="line">		s2.push(t);</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; t &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// To use double, we open another Stack</span></span><br><span class="line">	arrayStack&lt;<span class="keyword">double</span>&gt; s3;</span><br><span class="line">	<span class="keyword">while</span> (!s2.empty()) &#123; <span class="comment">// Scan from right to left</span></span><br><span class="line">		<span class="keyword">char</span> e = s2.top();</span><br><span class="line">		s2.pop();</span><br><span class="line">		<span class="keyword">if</span> (e &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; e &lt;= <span class="string">&#x27;9&#x27;</span>) s3.push(<span class="keyword">double</span>(e-<span class="string">&#x27;0&#x27;</span>));</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">double</span> result = <span class="number">0.0</span>;</span><br><span class="line">			<span class="keyword">double</span> left = s3.top();</span><br><span class="line">			s3.pop();</span><br><span class="line">			<span class="keyword">double</span> right = s3.top();</span><br><span class="line">			s3.pop();</span><br><span class="line">			<span class="keyword">switch</span> (e) &#123;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>: &#123;result = left + right; <span class="keyword">break</span>; &#125;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>: &#123;result = left - right; <span class="keyword">break</span>; &#125;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>: &#123;result = left * right; <span class="keyword">break</span>; &#125;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>: &#123;result = left / right; <span class="keyword">break</span>; &#125;</span><br><span class="line">			&#125;</span><br><span class="line">			s3.push(result);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; expr &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; s3.top();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>时间复杂度:$$O(n)，表达式中每个元素最多进栈和出栈常数次。$$</p>
</li>
</ul>
<p><strong>实际上，前缀表达式称为波兰式，后缀表达式称为逆波兰式。</strong></p>
<ul>
<li><input disabled="" type="checkbox"> 人工求前后缀表达式的简易方法:</li>
</ul>
]]></content>
      <categories>
        <category>数据结构与算法习题答案(机械工业出版社)</category>
      </categories>
  </entry>
  <entry>
    <title>STL</title>
    <url>/2020/11/18/ACM/%E7%BB%86%E8%8A%82/stl/</url>
    <content><![CDATA[<h2 id="共通操作"><a href="#共通操作" class="headerlink" title="共通操作"></a>共通操作</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;forward_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;initializer_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">* @copyright: all rights reserved.</span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* @author: Joe-sdu.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* @date: Dec.4.2020</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* @tag: 1--容器的分类和共通操作</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*  注解: 个人ACM学习笔记，仅供参考，大多来自C++官方文档。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*  C++容器分类: 序列式容器，关联容器和无序容器。 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 序列式容器: array、vector、string、list、forward_list、deque</span></span><br><span class="line"><span class="comment">// 各个序列式容器的头文件和其名字相同</span></span><br><span class="line"><span class="comment">// 关联式容器: set、multiset、map、multimap</span></span><br><span class="line"><span class="comment">// 各个关联式容器的头文件和名字相同(set与multiset、map与multimap)。</span></span><br><span class="line"><span class="comment">// 无序容器: unorder_set，unorder_multiset、unordered_map、unorder_multimap</span></span><br><span class="line"><span class="comment">// 各个无序容器的头文件也和名字相同。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*  容器的共通操作</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.构造与析构</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*  ContainerType C; --------- 默认构造函数，获得空容器，其中array将获得默认元素</span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">*  ContainerType C(C2); -------- 拷贝构造函数，建立容器C为C2的拷贝。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  ContainerType C = C2; -------- 同上</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  ContainerType C(RV); -------- 移动构造函数，取RV为初值，不适用于array，始于C++11。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  ContainerType C = RV; -------- 同上</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  ContainerType C(beg, end); -------- 以迭代器区间[beg，end)内的元素构造C，不适用于array。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  ContainerType C(initilizer_list&lt;T&gt;(...)); ------- 以initializer_list构造C，始于C++11，不适用于array。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  ContainerType C = initializer_list&lt;T&gt;(...) ------- 同上但array适用</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  ContainerType C.~ContainerType();</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.大小和容量</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*  C.size(); ------- 当前容器内元素个数，不适用于forward_list。(下解释)</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  C.max_size(); ------- 当前容器理想状态下能保存的最大元素数。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  C.empty(); ------- 判断容器是否为空，为空返回True。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注解</span></span><br><span class="line"><span class="comment">/**************************************************************************</span></span><br><span class="line"><span class="comment">* forward_list是C++11引入的，在此之前只有list。forward_list可以看作弱化版本</span></span><br><span class="line"><span class="comment">* 的list，C++标准规定forward_list至少与用户手写的单向链表一样快，所以甚至不</span></span><br><span class="line"><span class="comment">* 提供size()这样的看似必须的操作，因为这个操作要么需要额外空间。要么需要线性</span></span><br><span class="line"><span class="comment">* 复杂度。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 容器之间的比较</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*  C1 == C2; ------- 返回C1和C2是否相等，注意相等要求对应元素都相等。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  C1 != C2; ------- 同上</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  C1 &lt; C2; ------- 判断C1是否小于C2，比较时容器内元素必须支持(重载)&lt;运算符，不适用于无序容器。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  C1 &gt; C2; ------- 同上</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  C1 &lt;= C2; ------- 同上</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  C1 &gt;= C2; ------- 同上</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 赋值操作</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*  C1 = C2; ------- 把C2中的元素拷贝一份给C1，此操作可能很昂贵。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  C = RV; ------- 移动构造方式分配，始于C++11。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  C = initializer_list&lt;T&gt;(...) ------- 始于C++11，列表分配，不适用于array</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 交换操作</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*  C1.swap(C2); ------- 交换C1、C2，swap是成员函数。 </span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  swap(C1，C2); ------- 交换C1，C2，swap是全局函数，交换代价可能很小。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// swap后指向元素的迭代器和ref仍然有效。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 迭代器操作</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*  C.begin(); ------- 返回指向首元素的迭代器。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  C.end(); ------- 返回指向尾元素的下一个元素的迭代器。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  C.cbegin(); ------- 返回一个const_iterator，指向首元素。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  C.cend(); ------- 返回一个const_iterator，指向尾元素的下一个位置。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 清空容器</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*  C.clear(); 不适用于array，会引起迭代器失效。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化举例</span></span><br><span class="line"><span class="comment">//set&lt;int&gt; setInt&#123; istream_iterator&lt;int&gt;(cin),istream_iterator&lt;int&gt;() &#125;; // 从stdin读入</span></span><br><span class="line"><span class="comment">//int arr[10] = &#123; 1,2,3,4,5,6,7,8,9,10 &#125;; // C-style</span></span><br><span class="line"><span class="comment">//deque&lt;int&gt; dequeInt(begin(arr), end(arr)); // 从C-style数组取得值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问容器元素的方法</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*  Range -- Base -- For loop，始于C++11</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  迭代器方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 举例</span></span><br><span class="line"><span class="comment">//deque&lt;int&gt; dequeInt = &#123; 1,2,3,4,5,6,7 &#125;;	</span></span><br><span class="line"><span class="comment">// range-base-for</span></span><br><span class="line"><span class="comment">//for (auto&amp; elem : dequeInt) cout &lt;&lt; elem &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// iterator</span></span><br><span class="line"><span class="comment">// for (auto it = dequeInt.begin(); it != dequeInt.end(); ++it) cout &lt;&lt; *it &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">// auto 自动推导出来的类型是deque&lt;int&gt;::iterator</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注解:如果只要求可读，使用const auto。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 容器提供的类型</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*  size_type ------- 表示容器大小的unsigned类型。</span></span><br><span class="line"><span class="comment">*  difference_type ------- signed，一般表示迭代器或指针距离</span></span><br><span class="line"><span class="comment">*  value_type ------- 值类型</span></span><br><span class="line"><span class="comment">*  reference_type ------- 引用类型</span></span><br><span class="line"><span class="comment">*  const_reference ------- 常量元素的引用类型</span></span><br><span class="line"><span class="comment">*  iterator ------- 迭代器类型</span></span><br><span class="line"><span class="comment">*  const_iterator ------- 常量迭代器类型</span></span><br><span class="line"><span class="comment">*  pointer ------- 指针类型</span></span><br><span class="line"><span class="comment">*  const_pointer ------- 常量指针类型</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h2 id="array"><a href="#array" class="headerlink" title="array"></a>array</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* @copyright: all rights reserved.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* @author: Joe-sdu.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* @date: Dec.4.2020</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* @tag: 2--array容器</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*  注解: 个人ACM学习笔记，仅供参考，大多来自C++官方文档。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*  Array可以看作是封装后的C-style array，它效率不比裸数组差。</span></span><br><span class="line"><span class="comment">*  Array不支持指定分配器。</span></span><br><span class="line"><span class="comment">*  Array支持随机访问，因此可以对它运用任何STL算法。</span></span><br><span class="line"><span class="comment">*  Array的类型是由它的元素类型和大小共同决定的。</span></span><br><span class="line"><span class="comment">*  Array在未指定初值时会被预初始化，对内置类型而言，值不明确。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// array 初始化</span></span><br><span class="line"><span class="built_in">array</span>&lt;<span class="keyword">int</span>, 5&gt; arrInt = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span> &#125;; <span class="comment">// Legal</span></span><br><span class="line">array&lt;float, 5&gt; arrFloat(&#123; 1,2,3,4,5 &#125;); // Illegal</span><br><span class="line"></span><br><span class="line"><span class="comment">// array支持的操作</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*  C.empty();</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  C.size();</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  C.max_size();</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  C1 == C2;</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  C1 != C2;</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  C1 &lt; C2;</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  C1 &gt; C2;</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  C1 &lt;= C2;</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  C1 &gt;= C2;</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  C[id]; ------- 不检测是否越界，越界是未定义行为</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  C.at(id); ------- 越界抛出out_of_range</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  C.front(); ------- 返回首元素的引用</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  C.back(); ------- 返回尾元素的引用</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  C.fill(val); ------- 把val赋给每一个元素</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  C1.swap(C2); ------- 交换C1，C2，C1和C2必须具有相同的类型，此操作代价可能比较高。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  swap(C1,C2); ------- 同上</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 迭代器函数</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*  C.begin();</span></span><br><span class="line"><span class="comment">*  C.end()</span></span><br><span class="line"><span class="comment">*  C.cbegin();</span></span><br><span class="line"><span class="comment">*  C.cend();</span></span><br><span class="line"><span class="comment">*  C.rbegin();</span></span><br><span class="line"><span class="comment">*  C.rend();</span></span><br><span class="line"><span class="comment">*  C.crbegin();</span></span><br><span class="line"><span class="comment">*  C.crend();</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 与大多数STL容器的迭代器函数不同，array的迭代器可能返回寻常指针，但也不保证。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Array做C-style-Array</span></span><br><span class="line"><span class="comment">// STL标准的保证 &amp;a[1] == &amp;a[0] + 1;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 基于这一点我们可以这样做</span></span><br><span class="line"><span class="comment">//array&lt;char, 100&gt; arrChar;</span></span><br><span class="line"><span class="comment">//cin &gt;&gt; &amp;arrChar[0];</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以利用成员函数</span></span><br><span class="line"><span class="comment">//cin &gt;&gt; arrChar.data();</span></span><br></pre></td></tr></table></figure>
<h2 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* @copyright: all rights reserved.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* @author: Joe-sdu.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* @date: Dec.4.2020</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* @tag: 3--vector容器</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*  注解: 个人ACM学习笔记，仅供参考，大多来自C++官方文档。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*  Vector是一个dynamic array。</span></span><br><span class="line"><span class="comment">*  Vector在末端附加元素或者删除元素效率相当好(均摊O(1))，其余位置代价昂贵。</span></span><br><span class="line"><span class="comment">*  Vector支持随机访问，因此可以对它运用任何STL算法。</span></span><br><span class="line"><span class="comment">*  Vector内部预先分配了比元素个数占用空间的空间，这可能导致大量的内存浪费。</span></span><br><span class="line"><span class="comment">*  Vector是STL中最常用的容器，如果没有合适的理由选择其余容器，应使用vector。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// vector的构造</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*  vector&lt;Type&gt; c; ------- 构造空vector</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  vector&lt;Type&gt; c(C2); ------- 拷贝构造函数</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  vector&lt;Type&gt; c = C2; ------- 拷贝构造函数</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  vector&lt;Type&gt; c(RV); ------- 移动构造函数</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  vector&lt;Type&gt; c = RV; ------- 移动构造函数</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  vector&lt;Type&gt; c(n); ------- 构造n个元素的vector，每个元素被值初始化。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  vector&lt;Type&gt; c(n,e); ------- 构造n个元素的vector，每个元素等于e</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  vector&lt;Type&gt; c(beg,end); ------- 利用[beg,end)区间元素构造vector</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  vector&lt;Type&gt; c(initializer_list&lt;T&gt;(...)); ------- 列表构造</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  vector&lt;Type&gt; c = initializer_list&lt;T&gt;(...); ------- 列表构造</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// vector的非更新操作</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*  C.empty();</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  C.size();</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  C.max_size(); ------- 返回理想最大容量。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  C.capacity(); ------- 返回当前状态下的最大容量。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  C.reserve(n); ------- 预留n个空间，若n &lt; size，不做操作</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  C.shrink_to_fit(); ------- 减少capacity，使它等于size，可能不会带来任何操作，始于C++11</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 赋值</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*  C1 = C2; ------- 代价昂贵</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  C = RV； ------- 始于C++11</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  C = initializer_list&lt;T&gt;(); ------- 始于C++11</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  C.assign(n,e); ------- 复制n个e，赋值给C</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  C.assign(beg,end); ------- 把[beg,end)范围内的元素赋值给C</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  C.assign(initializer_list&lt;T&gt;()); ------- 把初值列表赋给C</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  C1.swap(C2); ------- 交换C1和C2，代价很小。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  swap(C1,C2); ------- 同上，但采用全局函数。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 元素访问</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*  C[id]; ------- 越界不包含引用</span></span><br><span class="line"><span class="comment">*  C.at(id); ------- 越界抛出runtime_error</span></span><br><span class="line"><span class="comment">*  C.front(); ------- 返回第一个元素的引用，不检查该元素是否存在</span></span><br><span class="line"><span class="comment">*  C.back(); ------- 返回最后一个元素的引用，不检查元素是否存在</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 迭代器相关函数与Array一致</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 安插与移除函数</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*  C.push_back(e); ------- 插入e至末尾</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  C.pop_back(); ------- 删除末尾元素</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  C.insert(pos,e); ------- 插入元素e至pos前，pos是迭代器位置，返回新元素位置的迭代器</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  C.insert(pos,n,e); -------  插入元素n个e至pos前，pos是迭代器位置，返回最后插入位置的迭代器</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  C.insert(pos,beg,end); ------  插入[beg,end)区间元素至pos前，pos是迭代器位置，返回最后插入位置的迭代器</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  C.insert(pos,initializer_list&lt;T&gt;(...));  插入初值列至pos前，pos是迭代器位置，返回列表里第一个元素位置的迭代器</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  C.emplace(pos, args...); ------- 在pos前插入args为处置的元素，返回插入位置</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  C.emplace_back(args...); ------- 附加以args为初值的元素到末尾</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  C.erase(pos); ------- 删除迭代器位置上的元素</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  C.erase(beg,end); ------- 删除[beg,end)范围内的元素 </span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  C.resize(n); ------- 改变size，若减小则调用析构，若增大则对多出的元素默认初始化</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  C.resize(n,e); ------- 同上，但以e初始化多出的元素</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  C.clear(); ------- 清空容器</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意: Vector未提供移除与某值相等的元素的方法。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// vector可以做C-Style-Array</span></span><br><span class="line"><span class="comment">// STL保证 &amp;V[1] == &amp;V[0]+1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//vector&lt;char&gt; vecString;</span></span><br><span class="line"><span class="comment">//vecString.resize(100); // 必要的一步</span></span><br><span class="line"><span class="comment">//cin &gt;&gt; &amp;vecString[0];</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 还可以使用成员方法</span></span><br><span class="line"><span class="comment">//cin &gt;&gt; vecString.data();</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; vecString.data();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// vector 的异常保证</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*  push_back()发生异常时不产生效用</span></span><br><span class="line"><span class="comment">*  pop_back()绝对不抛出任何异常</span></span><br><span class="line"><span class="comment">*  插入等操作要么成功要么就什么也不发生</span></span><br><span class="line"><span class="comment">*  swap和clear不抛出异常</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h2 id="string"><a href="#string" class="headerlink" title="string"></a>string</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* @copyright: all rights reserved.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* @author: Joe-sdu.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* @date: Dec.4.2020</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* @tag: 4--string容器</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*  注解: 个人ACM学习笔记，仅供参考，大多来自C++官方文档。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*  string可以看作特殊的vector,很多基本操作和vector相同</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// string的构造</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*  string s(s1);</span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">*  string s = s1;</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  string s = &quot;xxxxx&quot;;</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  string s(&quot;xxxxx&quot;);</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  string s(char[],n); ------- s是字符数组前n个字符的拷贝</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  string s(s1,pos); ------- s是s1从下标pos开始的拷贝</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  string s(s1,pos,len); ------- s是s1从下标pos开始长度为len的拷贝</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 若pos &gt; size,会抛出out_of_range</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字串操作</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*  string s = s1.substr(pos); ------- s是s1从下标为pos开始至末尾的子串</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  string s = s1.substr(pos,len); ------- s是s1下标为pos开始长度为len的子串</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入与删除操作</span></span><br><span class="line"><span class="comment">// string除了接受迭代器的插入与删除版本,还提供接受下标的版本</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 举例</span></span><br><span class="line"><span class="comment">// string s = &quot;abcdefg&quot;;</span></span><br><span class="line"><span class="comment">// string s1 = &quot;hijk&quot;;</span></span><br><span class="line"><span class="comment">// const char* str = &quot;lmnop&quot;</span></span><br><span class="line"><span class="comment">// s.insert(s.size(), 4, &#x27;!&#x27;); ------- 在末尾插入四个感叹号</span></span><br><span class="line"><span class="comment">// s.erase(s.size()-4, 4); ------- 删除刚刚插入的感叹号</span></span><br><span class="line"><span class="comment">// s.insert(s.size(), s2);</span></span><br><span class="line"><span class="comment">// s.insert(s.size(), s2, 0, s2.size());</span></span><br><span class="line"><span class="comment">// s,insert(s.size(), str + 1); ------- 插入str从第二个字符开始的全部字符</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 替换操作,把s直接替换掉，str不能就是s，迭代器不能指向s，总是替换整个s</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*  s.assign(str); ------- str若是C-style则必须以空字符结尾</span></span><br><span class="line"><span class="comment">*  s.assign(str, len); ------- str可能是C-style也可能是string</span></span><br><span class="line"><span class="comment">*  s.assign(str, beg, len); ------- s被替换为str从beg开始长度为len的字符串</span></span><br><span class="line"><span class="comment">*  s.assign(beg, end);</span></span><br><span class="line"><span class="comment">*  s.assign(n, c);</span></span><br><span class="line"><span class="comment">*  s.assign(initializer_list&lt;T&gt;(...));</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 附加元素，str不能就是s，迭代器不能指向s，总是附加到末尾</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*  s.append(str); ------- 在s末尾附加str，str可能是C-style也可能是string，str若是C-style则必须以空字符结尾</span></span><br><span class="line"><span class="comment">*  s.append(str, len);</span></span><br><span class="line"><span class="comment">*  s.append(str, beg, len);</span></span><br><span class="line"><span class="comment">*  s.append(beg ,end);</span></span><br><span class="line"><span class="comment">*  s.append(n ,c); ------- 在s末尾附加n个c</span></span><br><span class="line"><span class="comment">*  s.append(initializer_list&lt;T&gt;(...));</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调换元素</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*  s.replace(beg, m, str); ------- 把s中beg开始的n个元素删除，然后在beg位置后添加str</span></span><br><span class="line"><span class="comment">*  s.replace(beg, end, str); </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 除了insert的迭代器版本返回第一个插入字符的位置，以上所有操作均返回指向s的引用(包括insert的下标版本)</span></span><br><span class="line"><span class="comment">// 第一个插入字符的位置是这样的含义: xxxxxx|(从这里后插入)yzw ---&gt; y是第一个插入的字符</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 搜索</span></span><br><span class="line"><span class="comment">// string的每个搜索函数都返回string::size_type类型的值</span></span><br><span class="line"><span class="comment">// 搜索失败是返回const string::size_type npos，他是一个unsigned值，且一般为最大unsigned</span></span><br><span class="line"><span class="comment">// 用int来保存搜索函数的返回值不是个好主意</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 搜索函数，均返回string::size_type</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*  s.find(args); ------- 返回args第一次出现的位置</span></span><br><span class="line"><span class="comment">*  s.rfind(args); ------- 返回args最后一次出现的位置</span></span><br><span class="line"><span class="comment">*  s.find_first_of(args); ------- 返回s中第一个能在args中找到的字符的位置</span></span><br><span class="line"><span class="comment">*  s.find_last_of(args); ------- 返回s中最后一个能在args中找到的字符的位置</span></span><br><span class="line"><span class="comment">*  s.find_first_not_of(args); ------- 返回s中第一个不能在args中找到的字符位置</span></span><br><span class="line"><span class="comment">*  s.find_last_not_of(args); ------- 返回s中最后一个不能在args中找到的字符位置</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// args的形式</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*  str ------- 可以是C-style(空字符结尾)，也可以是string</span></span><br><span class="line"><span class="comment">*  str, pos ------- 从s的pos位置开始，在str中比对</span></span><br><span class="line"><span class="comment">*  str, pos, n ------- 从s中pos开始比对C-style字符串的前n个位置</span></span><br><span class="line"><span class="comment">*  c, pos ------- 从s中pos位置开始查找字符c</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断未找到</span></span><br><span class="line"><span class="comment">//string::size_type flag = 0;</span></span><br><span class="line"><span class="comment">//if ((flag = s......()) != string::npos) &#123;</span></span><br><span class="line"><span class="comment">//	do something()......</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 比较函数 compare，相等时返回0，大于返回正，小于返回负</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*  s1.compare(s2);</span></span><br><span class="line"><span class="comment">*  s1.compare(pos1, n, s2); ------- s1从pos1开始的n个字符与s2比较</span></span><br><span class="line"><span class="comment">*  s1.compare(pos1, n1, s2, pos2 ,n2) ------- s1从pos1开始的n1个字符与s2从pos2开始的n2个字符比较</span></span><br><span class="line"><span class="comment">*  s1.compare(char[]); ------- s1与空字符结尾的C-style字符串比较</span></span><br><span class="line"><span class="comment">*  s1.compare(pos1, n, char[]); ------- s1从pos1开始的n个字符与C-style字符串比较</span></span><br><span class="line"><span class="comment">*  s1.compare(pos1, n1, char[], n2); ------- s1从pos1开始的n1个字符与C-style字符串开始的n2个字符比较</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不要以为传入C-style字符串时C-style字符串只能从头比较，如下是实际操作时的情况</span></span><br><span class="line"><span class="comment">//const char* cStyle = &quot;This is C-style&quot;;</span></span><br><span class="line"><span class="comment">//string s = &quot;C-style&quot;;</span></span><br><span class="line"><span class="comment">//if (s.compare(0, 7, cStyle + 8) == 0) &#123;</span></span><br><span class="line"><span class="comment">//	cout &lt;&lt; &quot;identical!&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数值转换，p是size_t*类型，指向保存第一个非数值字符的位置，默认0，b是转换进制(默认10)</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*  to_string(val); ------- 返回val的string形式，val可以是int，long，long long等任何算术类型，小整数会被提升</span></span><br><span class="line"><span class="comment">*  stoi(s, p, b); ------- 返回s的起始字串的数值，返回值类型是int(C语言里%i也代表int)</span></span><br><span class="line"><span class="comment">*  stol(s, p, b); ------- 同上，但返回long</span></span><br><span class="line"><span class="comment">*  stoul(s, p, b); ------- 同上但返回unsigned long</span></span><br><span class="line"><span class="comment">*  stoll(s, p, b); ------- 同上但返回long long</span></span><br><span class="line"><span class="comment">*  stoull(s, p, b); ------- 同上但返回unsigned long long</span></span><br><span class="line"><span class="comment">*  stof(s, p); ------- 同上但返回float</span></span><br><span class="line"><span class="comment">*  stod(s, p); ------- 同上但返回double</span></span><br><span class="line"><span class="comment">*  stold(s, p); ======= 同上但返回long double</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 用法如下</span></span><br><span class="line"><span class="comment">//string num = &quot;my num: +1234567.345&quot;;</span></span><br><span class="line"><span class="comment">//double number = stod(num.substr(num.find_first_of(&quot;+-.123456789&quot;)));</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; fixed &lt;&lt; setw(20) &lt;&lt; number;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 若string无法转换成数值，抛出invalid_argument异常</span></span><br><span class="line"><span class="comment">// 若转换后的数值无法用任何类型标识(比如太大)，抛出out_of_range异常</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//string num = &quot;my num: +123456754345&quot;;</span></span><br><span class="line"><span class="comment">//int number = stoi(num.substr(num.find_first_of(&quot;+-.123456789&quot;))); // OUT_OF_RANGE</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//string num = &quot;my num: gffdgfg&quot;;</span></span><br><span class="line"><span class="comment">//int number = stoi(num); // INVALID_ARGUMENT</span></span><br></pre></td></tr></table></figure>
<h2 id="set-multiset"><a href="#set-multiset" class="headerlink" title="set+multiset"></a>set+multiset</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* @copyright: all rights reserved.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* @author: Joe-sdu.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* @date: Dec.4.2020</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* @tag: 5--set容器</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*  注解: 个人ACM学习笔记，仅供参考，大多来自C++官方文档。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*  set是一种关联容器，它的关键字就是值。multiset多增加了允许重复值的特性，除此之外与set并无不同。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// set的一些特性</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*  set不允许重复值</span></span><br><span class="line"><span class="comment">*  set中的元素需要满足严格弱序</span></span><br><span class="line"><span class="comment">*  set的迭代器不可以改变其值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// set的创建</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*  set&lt;Type&gt; S ------- 默认构造函数，其排序准则默认为less&lt;T&gt;</span></span><br><span class="line"><span class="comment">*  set&lt;Type&gt; S(op) ------- 给定排序准则 </span></span><br><span class="line"><span class="comment">*  set&lt;Type&gt; S(S1) ------- 复制构造函数</span></span><br><span class="line"><span class="comment">*  set&lt;Type&gt; S = S1 ------- 拷贝构造函数</span></span><br><span class="line"><span class="comment">*  set&lt;Type&gt; S(RV) ------- 移动构造函数</span></span><br><span class="line"><span class="comment">*  set&lt;Type&gt; S = RV ------- 移动构造函数</span></span><br><span class="line"><span class="comment">*  set&lt;Type&gt; S(beg, end) ------- 以迭代器范围[beg, end)内的元素构造</span></span><br><span class="line"><span class="comment">*  set&lt;Type&gt; S(beg, end, op) ------- 以[beg, end)内的值未初始值构造S，以op为排序准则</span></span><br><span class="line"><span class="comment">*  set&lt;Type&gt; S(initializer_list&lt;T&gt;(...)) ------- 用初值列初始化</span></span><br><span class="line"><span class="comment">*  set&lt;Type&gt; S = initializer_list&lt;T&gt;(...) ------- 用初值列初始化</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以在创建时在模板参数中指定排序准则，形式如下</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*  set&lt;Type,greater&lt;Type&gt;()&gt; S</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// set的一些基本操作</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*  S.key_comp() ------- 返回比较准则</span></span><br><span class="line"><span class="comment">*  S.value_comp() ------- 返回针对value的排序准则(对set而言key就是value)</span></span><br><span class="line"><span class="comment">*  S.empty()</span></span><br><span class="line"><span class="comment">*  S.size()</span></span><br><span class="line"><span class="comment">*  S.max_size()</span></span><br><span class="line"><span class="comment">*  S1 == S2</span></span><br><span class="line"><span class="comment">*  S1 != S2</span></span><br><span class="line"><span class="comment">*  S1 &lt; S2</span></span><br><span class="line"><span class="comment">*  S1 &gt; S2</span></span><br><span class="line"><span class="comment">*  S1 &lt;= S2</span></span><br><span class="line"><span class="comment">*  S1 &gt;= S2</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 注意set比较时两个set的元素和排序准则必须有相同类型，否则会产生编译错误</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找</span></span><br><span class="line"><span class="comment">// 注意: 对set进行查找时要使用set的成员函数，其具有对数复杂度，而STL算法中的查找函数具有线性复杂度</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*  S.count(val) ------- 返回元素值时val的元素个数</span></span><br><span class="line"><span class="comment">*  S.find(val) ------- 返回值为val的第一个元素的位置，找不到则返回end</span></span><br><span class="line"><span class="comment">*  S.lower_bound(val) ------- 返回元素值&gt;=val的第一个位置</span></span><br><span class="line"><span class="comment">*  S.upper_bound(val) ------- 返回元素值&gt;val的第一个位置</span></span><br><span class="line"><span class="comment">*  S.equal_range(val) ------- 返回值等于val的区间，也即一个pair，类型是pair&lt;set&lt;Type&gt;::iterator,set&lt;Type&gt;::iterator&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 赋值</span></span><br><span class="line"><span class="comment">// 复制的两个set的排序准则类型要相同(不代表必须要一样)，不然的话随着赋值或者交换的进行排序准则也会跟着交换</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*  S1.swap(S2)</span></span><br><span class="line"><span class="comment">*  swap(S1, S2)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 迭代器相关操作</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*  S.begin()</span></span><br><span class="line"><span class="comment">*  S.end()</span></span><br><span class="line"><span class="comment">*  S.cbegin()</span></span><br><span class="line"><span class="comment">*  S.cend()</span></span><br><span class="line"><span class="comment">*  S.rbegin()</span></span><br><span class="line"><span class="comment">*  S.rend()</span></span><br><span class="line"><span class="comment">*  S.crbegin()</span></span><br><span class="line"><span class="comment">*  S.crend()</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 注意set的迭代器不能改变容器元素值，且其迭代器是双向迭代器，不是所有算法都适用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 元素的插入和删除</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*  S.insert(val) ------- 安插元素val，返回插入位置(无论是否成功)</span></span><br><span class="line"><span class="comment">*  S.insert(pos, val) ------- 安插元素val，pos是提示位置，代表查找起点</span></span><br><span class="line"><span class="comment">*  S.insert(beg, end) ------- 把[beg, end)内的所有元素安插到S，无返回值</span></span><br><span class="line"><span class="comment">*  S.insert(initializer_list&lt;T&gt;(...)) ------- 安插初值列元素，无返回值，始于C++11</span></span><br><span class="line"><span class="comment">*  S.emplace(args...) ------- 安插args，返回插入位置(无论是否成功)</span></span><br><span class="line"><span class="comment">*  S.emplace_hint(pos, args...) ------- 安插args，返回插入位置，pos是给定的起始搜寻位</span></span><br><span class="line"><span class="comment">*  S.erase(val) ------- 移除与val相等的元素 **注意移除set的元素不可以用remove，因为remove会改变元素值</span></span><br><span class="line"><span class="comment">*  S.erase(pos) ------- 删除迭代器位置上的元素</span></span><br><span class="line"><span class="comment">*  S.erase(beg, end) ------- 移除迭代器区间内的所有元素</span></span><br><span class="line"><span class="comment">*  S.clear() ------- 清空set</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// C++保证等值元素的相对次序不会在插入或者删除元素后发生改变</span></span><br><span class="line"><span class="comment">// insert和emplace在插入多个元素时不返回位置是考虑到效率问题</span></span><br><span class="line"><span class="comment">// insert和emplace返回的位置信息时一个pair，类型是pair&lt;set&lt;Type&gt;::iterator, bool&gt;，second成员代表是否插入成功</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行期间指定排序准则</span></span><br></pre></td></tr></table></figure>
<h2 id="map-multimap"><a href="#map-multimap" class="headerlink" title="map+multimap"></a>map+multimap</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;initializer_list&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* @copyright: all rights reserved.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* @author: Joe-sdu.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* @date: Dec.4.2020</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* @tag: 6--map容器</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*  注解: 个人ACM学习笔记，仅供参考，大多来自C++官方文档。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*  map是一种关联容器，它的元素都时KEY:VALUE的形式。multimap和map操作一样，只是增加了支持重复关键字的特性。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// map的一些特性</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*  map是关联数组，关键字是const</span></span><br><span class="line"><span class="comment">*  map中的元素也要求满足严格弱序</span></span><br><span class="line"><span class="comment">*  map的元素是一个pair</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// map中的一些类型</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*  map&lt;const K, E&gt;::key_type ------- 关键字类型</span></span><br><span class="line"><span class="comment">*  map&lt;const K, E&gt;::value_type ------- pair</span></span><br><span class="line"><span class="comment">*  map&lt;const K, E&gt;::mapped_type ------- 与关键字关联的类型E</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// map的构造</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*  map&lt;const K, E&gt; M</span></span><br><span class="line"><span class="comment">*  map&lt;const K, E&gt; M(op)</span></span><br><span class="line"><span class="comment">*  map&lt;const K, E&gt; M(M1)</span></span><br><span class="line"><span class="comment">*  map&lt;const K, E&gt; M(RV);</span></span><br><span class="line"><span class="comment">*  map&lt;const K, E&gt; M = RV</span></span><br><span class="line"><span class="comment">*  map&lt;const K, E&gt; M(beg, end)</span></span><br><span class="line"><span class="comment">*  map&lt;const K, E&gt; M(beg, end, op)</span></span><br><span class="line"><span class="comment">*  map&lt;const K, E&gt; M(initializer_list&lt;pair&lt;const K, E&gt;&gt;(...))</span></span><br><span class="line"><span class="comment">*  map&lt;const K, E&gt; M = initializer_list&lt;pair&lt;const K, E&gt;&gt;(...)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以在创建时在模板参数列表中加入排序准则map&lt;const K, E, greater&lt;const K&gt;()&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// map的赋值操作</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*  M = M1</span></span><br><span class="line"><span class="comment">*  M = RV</span></span><br><span class="line"><span class="comment">*  M = initializer_list&lt;pair&lt;const K, E&gt;(...)&gt;</span></span><br><span class="line"><span class="comment">*  M.swap(M1)</span></span><br><span class="line"><span class="comment">*  swap(M, M1)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 赋值操作需要保证两个容器排序准则的类型相同(排序准则不一定要一样)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// map的迭代器操作和set一样，为双向迭代器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不能对map和multimap调用更易型算法，如remove</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// map的元素插入和删除与set相同，利用insert和emplace插入，erase和clear删除</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// map元素安插时，可以利用make_pair、pair以及value_type</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// map查找元素可以用迭代器，或者与set类似的方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// map支持下标操作，如下</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*  M[KEY] ------- 不检查是否找到</span></span><br><span class="line"><span class="comment">*  M.at(KEY) ------- 未找到抛出异常</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意M[KEY]中的KEY不一定是数字</span></span><br><span class="line"><span class="comment">// KEY未找到时会自动插入一个值(副作用)，这种插入稍微慢于insert，因为它存在一次默认初始化的过程，随后这个默认值被覆盖。</span></span><br></pre></td></tr></table></figure>
<h2 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h2><h2 id="forward-list"><a href="#forward-list" class="headerlink" title="forward_list"></a>forward_list</h2><h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><h2 id="容器适配器"><a href="#容器适配器" class="headerlink" title="容器适配器"></a>容器适配器</h2><h2 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h2><h2 id="priority-queue"><a href="#priority-queue" class="headerlink" title="priority_queue"></a>priority_queue</h2><h2 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h2><h2 id="unordered-map"><a href="#unordered-map" class="headerlink" title="unordered_map"></a>unordered_map</h2><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><ul>
<li>查找<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">upper_bound(a，b，c) <span class="comment">// 返回[a，b)里第一个大于c的位置，若未找到返回尾后迭代器或最合适的插入位置。</span></span><br><span class="line">lower_bound(a，b，c) <span class="comment">// 返回[a，b)里第一个大于等于c的位置</span></span><br><span class="line">equal_range(a，b，c) <span class="comment">// 返回[a，b)里等于c的值的范围。</span></span><br></pre></td></tr></table></figure></li>
<li>去重<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">unique(a，b) <span class="comment">// 把[a，b)范围内所有重复的元素挪到最后，返回未重复元素的尾后位置。具体对vector而言:</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; test;</span><br><span class="line">test.resize(unique(test.begin(),test.end())-test.begin());</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>ACM专题</category>
      </categories>
  </entry>
  <entry>
    <title>紫书第五章</title>
    <url>/2020/11/24/ACM/%E9%A2%98%E5%8D%95%E5%92%8C%E8%A1%A5%E9%A2%98/%E7%B4%AB%E4%B9%A6%E7%AC%AC%E4%BA%94%E7%AB%A0/</url>
    <content><![CDATA[<!-- STL -->
<h2 id="紫书例题"><a href="#紫书例题" class="headerlink" title="紫书例题"></a>紫书例题</h2><h2 id="训练题-Vj"><a href="#训练题-Vj" class="headerlink" title="训练题(Vj)"></a>训练题(Vj)</h2><ul>
<li><p>注意:一定要注意容器清空啊喂!!!不清空也要在某个地方合理定义啊喂!!!</p>
</li>
<li><p><a href="https://vjudge.net/problem/UVA-1594"> <strong>Uva Ducci序列</strong> </a></p>
</li>
<li><p>这一题思路很简单呀，就是反复计算，然后每轮的结果记得保存到set里面，一旦某轮计算结果开始重复了代表产生了循环。</p>
</li>
<li><p>由于是循环相减取绝对值所以第一个数单独保存。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; ss;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	<span class="keyword">while</span> (n--) &#123;</span><br><span class="line">		<span class="keyword">int</span> m, x;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line">		<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">		<span class="keyword">while</span> (m--) &#123;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">			v.push_back(x);</span><br><span class="line">		&#125;</span><br><span class="line">		ss.insert(v);</span><br><span class="line">		<span class="keyword">int</span> len = v.size();</span><br><span class="line">		<span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">			<span class="keyword">int</span> e = v[<span class="number">0</span>];</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++) &#123;</span><br><span class="line">				v[i] = <span class="built_in">abs</span>(v[i] - v[i + <span class="number">1</span>]);</span><br><span class="line">			&#125;</span><br><span class="line">			v[len - <span class="number">1</span>] = <span class="built_in">abs</span>(v[len - <span class="number">1</span>] - e);</span><br><span class="line">			<span class="keyword">if</span> (ss.count(v)) &#123;</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;LOOP&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">int</span> j;</span><br><span class="line">				<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; len; j++) &#123;</span><br><span class="line">					<span class="keyword">if</span> (v[j]) <span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span> (j == len) &#123;</span><br><span class="line">					<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;ZERO&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			ss.insert(v);</span><br><span class="line">		&#125;</span><br><span class="line">		ss.clear();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><a href="https://vjudge.net/problem/UVA-1595"><strong>Uva 对称轴</strong></a></p>
</li>
<li><p>题目不要求找出对称轴，所以只是要求判断，降低了难度。</p>
</li>
<li><p>刚开始一直在想着用排序然后两端找点的奇怪做法发现不可行，最后放弃了太菜了……</p>
</li>
<li><p>y坐标相同的点(同一条水平线上)的一对对称点的和应该要相同，否则就不对称。</p>
</li>
<li><p>时间复杂度:$$O(n\times m)$$</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	<span class="keyword">while</span> (n--) &#123;</span><br><span class="line">		<span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; ma;</span><br><span class="line">		<span class="keyword">int</span> m, x, y;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">			ma[y].push_back(x);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; ss;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> it : ma) &#123;</span><br><span class="line">			sort(it.second.begin(), it.second.end());</span><br><span class="line">			<span class="keyword">int</span> r = (it.second.size() % <span class="number">2</span> == <span class="number">0</span>) ? it.second.size() / <span class="number">2</span>: it.second.size() / <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; r; i++) &#123;</span><br><span class="line">				<span class="keyword">int</span> sum = it.second[i] + it.second[it.second.size() - i - <span class="number">1</span>];</span><br><span class="line">				ss.insert(sum);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (ss.size() == <span class="number">1</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><a href="https://vjudge.net/problem/UVA-1593"><strong>Uva</strong>  代码对齐</a></p>
</li>
<li><p>print_extra函数的妙用</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; vs[<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">int</span> maxLen[<span class="number">200</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_extra</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; str,<span class="keyword">int</span> extra)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; str;</span><br><span class="line">    <span class="keyword">int</span> len = extra - (<span class="keyword">int</span>)str.size();</span><br><span class="line">    <span class="keyword">while</span>(len--) <span class="built_in">cout</span> &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="keyword">int</span> r = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(maxLen, <span class="number">0</span> ,<span class="keyword">sizeof</span>(maxLen));</span><br><span class="line">    <span class="keyword">while</span>(getline(<span class="built_in">cin</span> ,s))&#123;</span><br><span class="line">        <span class="function"><span class="built_in">stringstream</span> <span class="title">strm</span><span class="params">(s)</span></span>;</span><br><span class="line">        <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">string</span> str;</span><br><span class="line">        <span class="keyword">while</span>(strm &gt;&gt; str) &#123;</span><br><span class="line">            <span class="keyword">if</span>(str.size() &gt; maxLen[c]) maxLen[c] = str.size();</span><br><span class="line">            vs[r].push_back(str);</span><br><span class="line">            c++;</span><br><span class="line">        &#125;</span><br><span class="line">        r++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; r;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; vs[i].size();j++)&#123;</span><br><span class="line">           print_extra(vs[i][j], (j == vs[i].size()<span class="number">-1</span>? (<span class="keyword">int</span>)vs[i][j].size() : maxLen[j] + <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><a href="https://vjudge.net/problem/UVA-10935"><strong>Uva 卡片游戏</strong></a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &amp;&amp; n)&#123;</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++) q.push(i);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Discarded cards:&quot;</span>;</span><br><span class="line">        <span class="keyword">while</span>(q.size() &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; q.front(); q.pop();</span><br><span class="line">            q.push(q.front()); q.pop();</span><br><span class="line">            <span class="keyword">if</span>(q.size() &gt;= <span class="number">2</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;,&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Remaining card: &quot;</span> &lt;&lt; q.front() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><a href="https://vjudge.net/problem/UVA-10391"><strong>Uva 混合词</strong></a></p>
</li>
<li><p>水题，枚举，从左往右划分单词，然后查询两边是否都存在。</p>
</li>
<li><p>时间复杂度:$$O(n\times m\times m\times \log n), m是最长单词的长度.$$</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt; words;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">part</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(str.size() == <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">string</span> prev,next;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= str.size() - <span class="number">1</span>;i++)&#123;</span><br><span class="line">        prev = str.substr(<span class="number">0</span>, i);</span><br><span class="line">        next = str.substr(i);</span><br><span class="line">        <span class="keyword">if</span>(words.count(prev) &amp;&amp; words.count(next)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> w;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; w)  words.insert(w);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span>&amp; i : words)&#123;</span><br><span class="line">        <span class="keyword">if</span>(part(i))  <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><a href="https://vjudge.net/problem/UVA-10763"> <strong>Uva 10763 交换学生</strong> </a></p>
</li>
<li><p>具体思路: 有学生想从A去B交换的话，就去找multimap里有没有想从B去A的，有的话就删除这一对，没有且没输出过就插入，否则输出NO。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">multimap</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; ss;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n &amp;&amp; n) &#123;</span><br><span class="line">		<span class="keyword">int</span> x, y;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">			<span class="keyword">auto</span> p = ss.equal_range(y);</span><br><span class="line">			<span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">auto</span> it = p.first; it != p.second; it++) &#123;</span><br><span class="line">				<span class="keyword">if</span> (it-&gt;second == x) &#123;</span><br><span class="line">					ss.erase(it);</span><br><span class="line">					flag = <span class="literal">true</span>;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (!flag) ss.insert(<span class="built_in">make_pair</span>(x, y));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (ss.empty()) <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		ss.clear();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><a href="https://vjudge.net/problem/UVA-12100"> <strong>Uva12100 打印队列</strong> </a></p>
</li>
<li><p>维护一个优先级队列和一个普通队列。如果当前队列首就是要出队列的元素就直接出队，同时pop掉优先级队列的首元素，若此时pop掉的恰好是需要的位置，就跳出循环，否则放到普通队列尾。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">job</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,p;</span><br><span class="line">    job() : x(<span class="number">0</span>), p(<span class="number">0</span>)&#123;&#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> job&amp; j) <span class="keyword">const</span> &#123;<span class="keyword">return</span> x &lt; j.x;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">        <span class="keyword">int</span> m, p;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; m &gt;&gt; p;</span><br><span class="line">        job j;</span><br><span class="line">        <span class="built_in">queue</span>&lt;job&gt; q;</span><br><span class="line">        <span class="built_in">priority_queue</span>&lt;job&gt; pq;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; m;i++)&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; j.x; j.p = i;</span><br><span class="line">            q.push(j); pq.push(j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">            <span class="keyword">if</span>(q.front().x == pq.top().x &amp;&amp; q.front().p != p) &#123; pq.pop(); cnt++; &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(q.front().x == pq.top().x &amp;&amp; q.front().p == p) &#123; cnt++; <span class="keyword">break</span>; &#125;</span><br><span class="line">            <span class="keyword">else</span> q.push(q.front());</span><br><span class="line">            q.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; cnt &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><a href="https://vjudge.net/problem/UVA-230"> <strong>Uva230 图书管理系统</strong> </a></p>
</li>
<li><p>注意排序的操作</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="comment">//#pragma warning(disable:4996)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">book</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="built_in">string</span> name, author;</span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> book&amp; b) <span class="keyword">const</span> &#123; <span class="keyword">return</span> author &lt; b.author || (author == b.author &amp;&amp; name &lt; b.name); &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; mp;</span><br><span class="line"><span class="built_in">set</span>&lt;book&gt; st;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">/*freopen(&quot;D:\\in.txt&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line"><span class="comment">	freopen(&quot;D:\\out.txt&quot;, &quot;w&quot;, stdout);*/</span></span><br><span class="line">	<span class="built_in">string</span> s;</span><br><span class="line">	<span class="keyword">while</span> (getline(<span class="built_in">cin</span>, s) &amp;&amp; s[<span class="number">0</span>] != <span class="string">&#x27;E&#x27;</span>) &#123;</span><br><span class="line">		book tmp;</span><br><span class="line">		<span class="keyword">auto</span> pos = s.find(<span class="string">&quot; by &quot;</span>);</span><br><span class="line">		tmp.name = s.substr(<span class="number">0</span>, pos);</span><br><span class="line">		tmp.author = s.substr(pos + <span class="number">4</span>);</span><br><span class="line">		st.insert(tmp); mp[tmp.name] = tmp.author;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">string</span> cmd;</span><br><span class="line">	<span class="built_in">vector</span>&lt;book&gt; names;</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; cmd &amp;&amp; cmd[<span class="number">0</span>] != <span class="string">&#x27;E&#x27;</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (cmd[<span class="number">0</span>] == <span class="string">&#x27;S&#x27;</span>) &#123;</span><br><span class="line">			sort(names.begin(), names.end());</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">auto</span> item : names) &#123;</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Put &quot;</span> &lt;&lt; item.name;</span><br><span class="line">				<span class="keyword">auto</span> pos = st.insert(item);</span><br><span class="line">				<span class="keyword">if</span> (pos.first == st.begin()) <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; first&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">				<span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; after &quot;</span> &lt;&lt; prev(pos.first)-&gt;name &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;END&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">			names.clear();</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		getchar();</span><br><span class="line">		<span class="built_in">string</span> name;</span><br><span class="line">		getline(<span class="built_in">cin</span>, name);</span><br><span class="line">		<span class="built_in">string</span> author = mp[name];</span><br><span class="line">		book tmp;</span><br><span class="line">		tmp.name = name; tmp.author = author;</span><br><span class="line">		<span class="keyword">if</span> (cmd[<span class="number">0</span>] == <span class="string">&#x27;B&#x27;</span>) st.erase(tmp);</span><br><span class="line">		<span class="keyword">else</span> names.push_back(tmp);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><a href="https://vjudge.net/problem/UVA-1596"> <strong>找Bug Uva1596</strong> </a></p>
</li>
<li><p>利用栈进行解析，同时需要应用map保存每个定义的数组的标识符、大小、已经赋值的变量。</p>
</li>
<li><p>每次读入一个不存在的标识符就加入存数组和大小的map里，否则开始赋值:</p>
</li>
<li><p>赋值时左右两边数组的下标(利用栈得到的)都不能越界，对于右边的数组还要求其已经赋值过。</p>
</li>
<li><p>更新左边的数组元素。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; mp; <span class="comment">// 把名字映射成int,int,第一个int是索引，第二个是值</span></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; ms; <span class="comment">// 把名字映射成大小</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> l; <span class="comment">// 左右操作数</span></span><br><span class="line"><span class="keyword">int</span> idL, idR; <span class="comment">// 左右索引</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">create</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">string</span> name; <span class="keyword">int</span> n;</span><br><span class="line">	name = str.substr(<span class="number">0</span>, str.find(<span class="string">&#x27;[&#x27;</span>));</span><br><span class="line">	n = stoi(str.substr(str.find_first_of(<span class="string">&quot;0123456789&quot;</span>)));</span><br><span class="line">	<span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; tmp;</span><br><span class="line">	mp[name] = tmp;</span><br><span class="line">	ms[name] = n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 公共操作</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">checkid</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; str, <span class="keyword">int</span> flag)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">stack</span>&lt;<span class="built_in">string</span>&gt; ss;</span><br><span class="line">	<span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; si;</span><br><span class="line"> 	<span class="built_in">string</span>::size_type beg = <span class="number">0</span>, end;</span><br><span class="line">	<span class="keyword">while</span> ((end = str.find(<span class="string">&#x27;[&#x27;</span>, beg+<span class="number">1</span>)) != <span class="built_in">string</span>::npos) &#123;</span><br><span class="line">		<span class="built_in">string</span> name = str.substr(beg, end - beg);</span><br><span class="line">		ss.push(name);</span><br><span class="line">		beg = end + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	si.push(stoi(str.substr(beg, str.find(<span class="string">&#x27;]&#x27;</span>) - beg)));</span><br><span class="line">	<span class="keyword">while</span> (!ss.empty()) &#123;</span><br><span class="line">		<span class="keyword">int</span> id = si.top(); si.pop();</span><br><span class="line">		<span class="built_in">string</span> name = ss.top(); ss.pop();</span><br><span class="line">		<span class="keyword">if</span> (id &lt; <span class="number">0</span> || id &gt;= ms[name]) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 下标越界</span></span><br><span class="line">		<span class="keyword">if</span> (flag == <span class="number">1</span> &amp;&amp; ss.empty()) &#123; si.push(id); <span class="keyword">break</span>; &#125;</span><br><span class="line">		<span class="keyword">if</span>(!mp[name].count(id)) <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">		si.push(mp[name][id]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">auto</span> pos = str.find(<span class="string">&#x27;[&#x27;</span>);</span><br><span class="line">	<span class="built_in">string</span> temp = str.substr(<span class="number">0</span>, pos);</span><br><span class="line">	<span class="keyword">if</span> (flag == <span class="number">1</span>) &#123;</span><br><span class="line">		l = temp;</span><br><span class="line">		idL = si.top();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> idR = si.top(); </span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">/*freopen(&quot;D:\\in.txt&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line"><span class="comment">	freopen(&quot;D:\\out.txt&quot;, &quot;w&quot;, stdout);*/</span></span><br><span class="line">	<span class="built_in">string</span> line;</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; line &amp;&amp; line[<span class="number">0</span>] != <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">		<span class="keyword">int</span> cnt = <span class="number">1</span>;</span><br><span class="line">		mp.clear();</span><br><span class="line">		<span class="keyword">if</span> (line.find(<span class="string">&#x27;=&#x27;</span>) == <span class="built_in">string</span>::npos) create(line);</span><br><span class="line">		<span class="built_in">string</span> expr;</span><br><span class="line">		<span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; expr &amp;&amp; expr[<span class="number">0</span>] != <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">			cnt++;</span><br><span class="line">			<span class="built_in">string</span>::size_type pos;</span><br><span class="line">			<span class="keyword">if</span> ((pos = expr.find(<span class="string">&#x27;=&#x27;</span>)) == <span class="built_in">string</span>::npos) &#123;</span><br><span class="line">				create(expr);</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">string</span> left = expr.substr(<span class="number">0</span>, pos);</span><br><span class="line">			<span class="built_in">string</span> right = expr.substr(pos + <span class="number">1</span>);</span><br><span class="line">			<span class="keyword">if</span> (!flag &amp;&amp; (!checkid(left, <span class="number">1</span>) || !checkid(right, <span class="number">2</span>))) &#123;</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; cnt &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">				flag = <span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			mp[l][idL] = idR;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (!flag) <span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><a href="https://vjudge.net/problem/UVA-1597"> <strong>在Web中搜索 Uva1597</strong> </a></p>
</li>
<li><p>超时(待更新)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; pp; <span class="comment">// 保存文章</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt;&gt;&gt; vv; <span class="comment">// 保存</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n; getchar();</span><br><span class="line">	<span class="built_in">string</span> str;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="built_in">vector</span>&lt;<span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt;&gt; v; <span class="comment">//保存文章(简化)</span></span><br><span class="line">		<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; p;  <span class="comment">// 保存全部文章</span></span><br><span class="line">		<span class="keyword">while</span> (getline(<span class="built_in">cin</span>, str) &amp;&amp; str[<span class="number">0</span>] != <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">			<span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt; ll;</span><br><span class="line">			p.push_back(str);</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.size(); i++) &#123;</span><br><span class="line">				<span class="keyword">if</span> (!<span class="built_in">isalpha</span>(str[i])) str[i] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">				<span class="keyword">else</span> str[i] = <span class="built_in">tolower</span>(str[i]);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="function"><span class="built_in">stringstream</span> <span class="title">ss</span><span class="params">(str)</span></span>;</span><br><span class="line">			<span class="built_in">string</span> w;</span><br><span class="line">			<span class="keyword">while</span> (ss &gt;&gt; w) ll.insert(w);</span><br><span class="line">			v.push_back(ll);</span><br><span class="line"> 		&#125;</span><br><span class="line">		pp.push_back(p);</span><br><span class="line">		vv.push_back(v);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n; getchar();</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		getline(<span class="built_in">cin</span>, str);</span><br><span class="line">		<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; cmd;</span><br><span class="line">		<span class="built_in">string</span> tmp;</span><br><span class="line">		<span class="function"><span class="built_in">stringstream</span> <span class="title">ss</span><span class="params">(str)</span></span>;</span><br><span class="line">		<span class="keyword">while</span> (ss &gt;&gt; tmp) cmd.push_back(tmp);</span><br><span class="line">		<span class="keyword">int</span> len = cmd.size();</span><br><span class="line">		<span class="keyword">bool</span> out = <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">switch</span>(len) &#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vv.size(); i++) &#123;</span><br><span class="line">				<span class="built_in">string</span> data;</span><br><span class="line">				<span class="keyword">bool</span> jud1 = <span class="literal">false</span>;;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; vv[i].size(); j++) &#123;</span><br><span class="line">					<span class="keyword">if</span> (vv[i][j].count(cmd[<span class="number">0</span>])) &#123; jud1 = <span class="literal">true</span>; data += pp[i][j] + <span class="string">&#x27;\n&#x27;</span>; &#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span> (jud1) &#123; <span class="keyword">if</span> (out) <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;----------\n&quot;</span>; <span class="built_in">cout</span> &lt;&lt; data; out = <span class="literal">true</span>; &#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vv.size(); i++) &#123;</span><br><span class="line">				<span class="keyword">bool</span> jud1 = <span class="literal">true</span>;</span><br><span class="line">				<span class="built_in">string</span> data;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; vv[i].size(); j++) &#123;</span><br><span class="line">					<span class="keyword">if</span> (vv[i][j].count(cmd[<span class="number">1</span>])) jud1 = <span class="literal">false</span>;</span><br><span class="line">					data += pp[i][j] + <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span> (jud1) &#123; <span class="keyword">if</span> (out) <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;----------\n&quot;</span>; <span class="built_in">cout</span> &lt;&lt; data; out = <span class="literal">true</span>; &#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vv.size(); i++) &#123;</span><br><span class="line">				<span class="keyword">bool</span> jud1 = <span class="literal">false</span>, jud2 = <span class="literal">false</span>;</span><br><span class="line">				<span class="built_in">string</span> data;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; vv[i].size(); j++) &#123;</span><br><span class="line">					<span class="keyword">if</span> (vv[i][j].count(cmd[<span class="number">0</span>]) &amp;&amp; vv[i][j].count(cmd[<span class="number">2</span>])) &#123; data += pp[i][j] + <span class="string">&#x27;\n&#x27;</span>; jud1 = jud2 = <span class="literal">true</span>; &#125;</span><br><span class="line">					<span class="keyword">else</span> <span class="keyword">if</span> (vv[i][j].count(cmd[<span class="number">0</span>])) &#123; data += pp[i][j] + <span class="string">&#x27;\n&#x27;</span>; jud1 = <span class="literal">true</span>; &#125;</span><br><span class="line">					<span class="keyword">else</span> <span class="keyword">if</span> (vv[i][j].count(cmd[<span class="number">2</span>])) &#123; data += pp[i][j] + <span class="string">&#x27;\n&#x27;</span>; jud2 = <span class="literal">true</span>; &#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span> (cmd[<span class="number">1</span>] == <span class="string">&quot;OR&quot;</span> &amp;&amp; (jud1 || jud2)) &#123; <span class="keyword">if</span> (out) <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;----------\n&quot;</span>; <span class="built_in">cout</span> &lt;&lt; data; out = <span class="literal">true</span>; &#125;</span><br><span class="line">				<span class="keyword">if</span> (cmd[<span class="number">1</span>] == <span class="string">&quot;AND&quot;</span> &amp;&amp; jud1 &amp;&amp; jud2) &#123; <span class="keyword">if</span> (out) <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;----------\n&quot;</span>; <span class="built_in">cout</span> &lt;&lt; data; out = <span class="literal">true</span>; &#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (!out) <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Sorry, I found nothing.\n&quot;</span>;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;==========&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><a href="https://vjudge.net/problem/UVA-12504"> <strong>更新字典 Uva12504</strong> </a></p>
</li>
<li><p>这题不难想，具体就是把字符串读入然后分析比对两个map。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	<span class="keyword">while</span> (n--) &#123;</span><br><span class="line">		<span class="built_in">string</span> dict1, dict2;</span><br><span class="line">		<span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt; up,newD;</span><br><span class="line">		<span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; down;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; dict1 &gt;&gt; dict2;</span><br><span class="line">		dict1.erase(<span class="number">0</span>, <span class="number">1</span>); dict1.erase(dict1.size() - <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">		dict2.erase(<span class="number">0</span>, <span class="number">1</span>); dict2.erase(dict2.size() - <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">		<span class="function"><span class="built_in">stringstream</span> <span class="title">s1</span><span class="params">(dict1)</span></span>;</span><br><span class="line">		<span class="built_in">string</span> str, key, value;</span><br><span class="line">		<span class="keyword">while</span> (getline(s1, str, <span class="string">&#x27;,&#x27;</span>)) &#123;</span><br><span class="line">			<span class="keyword">int</span> pos = str.find(<span class="string">&#x27;:&#x27;</span>);</span><br><span class="line">			key = str.substr(<span class="number">0</span>, pos);</span><br><span class="line">			value = str.substr(pos + <span class="number">1</span>);</span><br><span class="line">			down.insert(<span class="built_in">make_pair</span>(key, value));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="built_in">stringstream</span> <span class="title">s2</span><span class="params">(dict2)</span></span>;</span><br><span class="line">		<span class="keyword">while</span> (getline(s2, str, <span class="string">&#x27;,&#x27;</span>)) &#123;</span><br><span class="line">			<span class="keyword">int</span> pos = str.find(<span class="string">&#x27;:&#x27;</span>);</span><br><span class="line">			key = str.substr(<span class="number">0</span>, pos);</span><br><span class="line">			value = str.substr(pos + <span class="number">1</span>);</span><br><span class="line">			<span class="keyword">if</span> (down.count(key) &amp;&amp; down[key] != value) &#123;</span><br><span class="line">				up.insert(key);</span><br><span class="line">				down.erase(key);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (!down.count(key)) newD.insert(key); <span class="comment">// 里面的是新增加的</span></span><br><span class="line">			<span class="keyword">else</span> down.erase(key);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> cnt;</span><br><span class="line">		<span class="keyword">if</span> (newD.size()) &#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;+&quot;</span>; cnt = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">auto</span> it : newD) &#123;</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; it; cnt++;</span><br><span class="line">				<span class="keyword">if</span> (cnt != newD.size()) <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;,&quot;</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (down.size()) &#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;-&quot;</span>; cnt = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">auto</span> it : down) &#123;</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; it.first; cnt++;</span><br><span class="line">				<span class="keyword">if</span> (cnt != down.size()) <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;,&quot;</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (up.size()) &#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*&quot;</span>; cnt = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">auto</span> it : up) &#123;</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; it; cnt++;</span><br><span class="line">				<span class="keyword">if</span> (cnt != up.size()) <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;,&quot;</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (!newD.size() &amp;&amp; !up.size() &amp;&amp; !down.size()) <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;No changes&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><a href="https://vjudge.net/problem/UVA-511"> <strong>Uva511 地图查询</strong></a></p>
</li>
<li><p>细节可多了…</p>
</li>
<li><p>思路:用map保存每个地区和城市，要查找一个位置时进行以下操作:</p>
</li>
<li><p>先看有没有这个城市</p>
</li>
<li><p>再查找包含这个城市的地区，保存进set(为了更快查找)，如果set为空，说明没有地区包含这个城市。</p>
</li>
<li><p>如果set的大小不为1，经过多重筛选直到set.size == 1。此时可以输出。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">area</span>&#123;</span></span><br><span class="line">    <span class="keyword">double</span> x1,y1;</span><br><span class="line">    <span class="keyword">double</span> x2,y2;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">city</span>&#123;</span></span><br><span class="line">    <span class="keyword">double</span> x,y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>,area&gt; areas;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>,city&gt; cities;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt; ff;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">check</span><span class="params">(area A,city C)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> lx,rx,ly,ry;</span><br><span class="line">    lx = min(A.x1,A.x2); rx = max(A.x1,A.x2);</span><br><span class="line">    ly = min(A.y1,A.y2); ry = max(A.y1,A.y2);</span><br><span class="line">    <span class="keyword">return</span> (C.x &gt;= lx &amp;&amp; C.x &lt;= rx) &amp;&amp; (C.y &gt;= ly &amp;&amp; C.y &lt;= ry);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">zone</span><span class="params">(area A)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">fabs</span>(A.x1 - A.x2) * <span class="built_in">fabs</span>(A.y1 - A.y2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">get_center</span><span class="params">(area A,city C)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (C.x - (A.x1+A.x2)/<span class="number">2</span>) * (C.x - (A.x1+A.x2)/<span class="number">2</span>) + (C.y - (A.y1+A.y2)/<span class="number">2</span>) * (C.y - (A.y1+A.y2)/<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">get_ratio</span><span class="params">(area A)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">fabs</span>(<span class="built_in">fabs</span>((A.y2 - A.y1)/(A.x2 - A.x1)) - <span class="number">0.75</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">get_rc</span><span class="params">(area A,city C)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> x,y;</span><br><span class="line">    <span class="keyword">if</span>(A.x2 &gt; A.x1) &#123; x = A.x1; y = A.y1; &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123; x = A.x2; y = A.y2; &#125;</span><br><span class="line">    <span class="keyword">return</span> (C.x - x) * (C.x - x) + (C.y - y) + (C.y - y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">get_x</span><span class="params">(area A)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> max(A.x1,A.x2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">change_set</span><span class="params">(<span class="keyword">int</span> f,<span class="built_in">string</span> str = <span class="string">&quot;&quot;</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">double</span>,<span class="built_in">string</span>&gt; cent;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span>&amp; e : ff) &#123;</span><br><span class="line">        <span class="keyword">if</span>(f == <span class="number">1</span>) cent.insert(&#123;get_center(areas[e],cities[str]),e&#125;);</span><br><span class="line">        <span class="keyword">if</span>(f == <span class="number">2</span>) cent.insert(&#123;get_ratio(areas[e]),e&#125;);</span><br><span class="line">        <span class="keyword">if</span>(f == <span class="number">3</span>) cent.insert(&#123;get_rc(areas[e],cities[str]),e&#125;);</span><br><span class="line">        <span class="keyword">if</span>(f == <span class="number">4</span>) cent.insert(&#123;get_x(areas[e]),e&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    ff.clear();</span><br><span class="line">    <span class="keyword">double</span> tt = cent.begin()-&gt;first;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span>&amp; e : cent)&#123;</span><br><span class="line">        <span class="keyword">if</span>(e.first == tt) ff.insert(e.second);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; str &amp;&amp; str[<span class="number">1</span>] != <span class="string">&#x27;O&#x27;</span>)&#123;</span><br><span class="line">        area tmp;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; tmp.x1 &gt;&gt; tmp.y1 &gt;&gt; tmp.x2 &gt;&gt; tmp.y2;</span><br><span class="line">        areas.insert(&#123;str,tmp&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; str &amp;&amp; str[<span class="number">1</span>] != <span class="string">&#x27;E&#x27;</span>)&#123;</span><br><span class="line">        city tmp;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; tmp.x &gt;&gt; tmp.y;</span><br><span class="line">        cities.insert(&#123;str,tmp&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; str &amp;&amp; str[<span class="number">1</span>] != <span class="string">&#x27;N&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> lev;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; lev;</span><br><span class="line">        <span class="keyword">if</span>(cities.find(str) == cities.end())&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; str &lt;&lt; <span class="string">&quot; at detail level &quot;</span> &lt;&lt; lev &lt;&lt; <span class="string">&quot; unknown location&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">double</span>,<span class="built_in">string</span>&gt; cont;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span>&amp; e : areas)&#123;</span><br><span class="line">            <span class="keyword">if</span>(check(e.second,cities[str])) cont.insert(&#123;zone(e.second),e.first&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cont.empty())&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; str &lt;&lt; <span class="string">&quot; at detail level &quot;</span> &lt;&lt; lev &lt;&lt; <span class="string">&quot; no map contains that location&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ff.clear(); <span class="keyword">int</span> id = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">double</span> t = cont.rbegin()-&gt;first;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> it = cont.rbegin();it != cont.rend();it++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(t != it-&gt;first) id++;</span><br><span class="line">            <span class="keyword">if</span>(id == lev) ff.insert(it-&gt;second);</span><br><span class="line">            <span class="keyword">if</span>(id &gt; lev) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ff.empty())&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; str &lt;&lt; <span class="string">&quot; at detail level &quot;</span> &lt;&lt; lev &lt;&lt; <span class="string">&quot; no map at that detail level; using &quot;</span> &lt;&lt; cont.begin()-&gt;second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ff.size() != <span class="number">1</span>) change_set(<span class="number">1</span>, str); <span class="comment">// 中心筛选</span></span><br><span class="line">        <span class="keyword">if</span>(ff.size() != <span class="number">1</span>) change_set(<span class="number">2</span>); <span class="comment">// 长宽比筛选</span></span><br><span class="line">        <span class="keyword">if</span>(ff.size() != <span class="number">1</span>) change_set(<span class="number">3</span>, str); <span class="comment">// 离右下角最远</span></span><br><span class="line">        <span class="keyword">if</span>(ff.size() != <span class="number">1</span>) change_set(<span class="number">4</span>); <span class="comment">// x-axis最小</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; str &lt;&lt; <span class="string">&quot; at detail level &quot;</span> &lt;&lt; lev &lt;&lt; <span class="string">&quot; using &quot;</span> &lt;&lt; *ff.begin() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><a href="https://vjudge.net/problem/UVA-822"> <strong>Uva822 客户中心模拟</strong></a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p><a href="https://vjudge.net/problem/UVA-1598"> <strong>Uva1598 交易所</strong> </a> </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p><a href="https://vjudge.net/problem/UVA-12333"> <strong>Uva12333 斐波那契的复仇</strong> </a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p><a href="https://vjudge.net/problem/UVA-212"> <strong>Uva 212 医院设备利用</strong> </a></p>
<pre><code class="cpp"></code></pre>
</li>
</ul>
<p>``` </p>
]]></content>
      <categories>
        <category>ACM专题</category>
      </categories>
  </entry>
  <entry>
    <title>紫书第四章</title>
    <url>/2020/11/24/ACM/%E9%A2%98%E5%8D%95%E5%92%8C%E8%A1%A5%E9%A2%98/%E7%B4%AB%E4%B9%A6%E7%AC%AC%E5%9B%9B%E7%AB%A0/</url>
    <content><![CDATA[<!-- 函数与栈 -->
<h2 id="紫书例题"><a href="#紫书例题" class="headerlink" title="紫书例题"></a>紫书例题</h2><h2 id="训练题-Vj"><a href="#训练题-Vj" class="headerlink" title="训练题(Vj)"></a>训练题(Vj)</h2><ul>
<li>实用技巧<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 读到EOF时会退出循环，EOF一般定义为-1，补码为11111...，取反后为000000...</span></span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m))&#123;</span><br><span class="line">	<span class="keyword">do</span> something...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><a href="https://vjudge.net/problem/UVA-1589"> <strong>Uva1589 象棋</strong> </a></li>
<li>这道题是一道模拟题(对我来说算大模拟了因为逻辑不太行……)</li>
<li>基本思路: 判断黑将可能走的四个方位是否都被将军，有一个没被将军输出NO。</li>
<li>一开始出现黑红将军面对面时，输出NO。</li>
<li>注意判断僵局对饮，车和炮可以通过一个函数实现，区分条件是传参不同。</li>
<li>判断马时，以将军走到的四个方位为基准，找八个马可能的位置，若有一个位置有没有跛脚的马(注意一定要先存在H，再判断是否跛脚。)</li>
<li>注意判断各个点坐标合法性。</li>
<li>自己找bug找了4小时，原因是自己没有把重定向关了……先写一波避免重定向干扰的代码提醒自己!</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">	freopen(<span class="string">&quot;D:\\in.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="built_in">stdin</span>);</span><br><span class="line">	freopen(<span class="string">&quot;D:\\out.txt&quot;</span>, <span class="string">&quot;w&quot;</span>, <span class="built_in">stdout</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>我的解答(AC)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">15</span>;</span><br><span class="line"><span class="keyword">char</span> chess[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> gx, gy;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check0</span><span class="params">(<span class="keyword">int</span> x1, <span class="keyword">int</span> y1, <span class="keyword">int</span> x2, <span class="keyword">int</span> y2, <span class="keyword">int</span> x3, <span class="keyword">int</span> y3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (x1 - x2) * (x3 - x2) + (y1 - y2) * (y3 - y2) &lt; <span class="number">0</span>; <span class="comment">// 跛脚</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check1</span><span class="params">(<span class="keyword">int</span> x1, <span class="keyword">int</span> y1)</span> <span class="comment">// 检查将军位合法性</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x1 &gt;= <span class="number">1</span> &amp;&amp; x1 &lt;= <span class="number">3</span> &amp;&amp; y1 &gt;= <span class="number">4</span> &amp;&amp; y1 &lt;= <span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check2</span><span class="params">(<span class="keyword">int</span> x1, <span class="keyword">int</span> y1)</span> <span class="comment">// 检查马位置的合法性</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x1 &gt;= <span class="number">1</span> &amp;&amp; x1 &lt;= <span class="number">10</span> &amp;&amp; y1 &gt;= <span class="number">1</span> &amp;&amp; y1 &lt;= <span class="number">9</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check3</span><span class="params">(<span class="keyword">char</span> type, <span class="keyword">int</span> cnt, <span class="keyword">int</span> nx, <span class="keyword">int</span> ny)</span> <span class="comment">// type = &#x27;C&#x27;，&#x27;R&#x27;，&#x27;G&#x27;，cnt是路径上的子数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> beg, end, c;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">1</span>; r &lt;= <span class="number">10</span>; r++) &#123; <span class="comment">// 检查列上是否被将死， 将军对饮只能在列上</span></span><br><span class="line">		<span class="keyword">if</span> (chess[r][ny] == type &amp;&amp; r != nx) &#123;</span><br><span class="line">			beg = r &lt; nx ? r : nx; c = <span class="number">0</span>;</span><br><span class="line">			end = r &gt; nx ? r : nx;</span><br><span class="line">			<span class="keyword">while</span> (++beg &lt; end) &#123;</span><br><span class="line">				<span class="keyword">if</span> (chess[beg][ny]) c++;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (c == cnt) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> cl = <span class="number">1</span>; cl &lt;= <span class="number">9</span>; cl++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (chess[nx][cl] == type &amp;&amp; cl != ny) &#123;</span><br><span class="line">			beg = cl &lt; ny ? cl : ny;  c = <span class="number">0</span>;</span><br><span class="line">			end = cl &gt; ny ? cl : ny;</span><br><span class="line">			<span class="keyword">while</span> (++beg &lt; end) &#123;</span><br><span class="line">				<span class="keyword">if</span> (chess[nx][beg]) c++;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (c == cnt) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check4</span><span class="params">(<span class="keyword">int</span> nx,<span class="keyword">int</span> ny)</span> <span class="comment">// 检查马位置的合法性，通过将军倒推</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> offset[<span class="number">8</span>][<span class="number">2</span>] = &#123; &#123;<span class="number">-2</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">-2</span>&#125;,&#123;<span class="number">1</span>,<span class="number">-2</span>&#125;,&#123;<span class="number">2</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">2</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">-2</span>,<span class="number">1</span>&#125; &#125;;</span><br><span class="line">	<span class="keyword">int</span> hx, hy;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">		hx = nx + offset[i][<span class="number">0</span>];</span><br><span class="line">		hy = ny + offset[i][<span class="number">1</span>];</span><br><span class="line">		<span class="keyword">if</span> (check2(hx, hy) &amp;&amp; chess[hx][hy] == <span class="string">&#x27;H&#x27;</span>) &#123; <span class="comment">// 检查马的位置合法性以及是否跛脚,跛脚位无子返回true</span></span><br><span class="line">			<span class="keyword">if</span> (check2(hx, hy - <span class="number">1</span>) &amp;&amp; !chess[hx][hy - <span class="number">1</span>] &amp;&amp; check0(hx, hy, hx, hy - <span class="number">1</span>, nx, ny)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">			<span class="keyword">if</span> (check2(hx, hy + <span class="number">1</span>) &amp;&amp; !chess[hx][hy + <span class="number">1</span>] &amp;&amp; check0(hx, hy, hx, hy + <span class="number">1</span>, nx, ny)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">			<span class="keyword">if</span> (check2(hx - <span class="number">1</span>, hy) &amp;&amp; !chess[hx - <span class="number">1</span>][hy] &amp;&amp; check0(hx, hy, hx - <span class="number">1</span>, hy, nx, ny)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">			<span class="keyword">if</span> (check2(hx + <span class="number">1</span>, hy) &amp;&amp; !chess[hx + <span class="number">1</span>][hy] &amp;&amp; check0(hx, hy, hx + <span class="number">1</span>, hy, nx, ny)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n, x, y;</span><br><span class="line">	<span class="keyword">char</span> ch;</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;gx, &amp;gy) == <span class="number">3</span> &amp;&amp; n) &#123;</span><br><span class="line">		<span class="built_in">memset</span>(chess, <span class="number">0</span>, <span class="keyword">sizeof</span>(chess));</span><br><span class="line">		<span class="keyword">while</span> (n--) &#123;</span><br><span class="line">			<span class="keyword">do</span> &#123; <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;ch); &#125; <span class="keyword">while</span> (ch == <span class="string">&#x27;\n&#x27;</span> || ch == <span class="string">&#x27;\r&#x27;</span> || ch == <span class="string">&#x27; &#x27;</span>);</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">			chess[x][y] = ch;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">bool</span> flag = <span class="literal">true</span>; <span class="comment">// 将死</span></span><br><span class="line">		<span class="keyword">if</span> (check1(gx, gy - <span class="number">1</span>) &amp;&amp; !(check3(<span class="string">&#x27;C&#x27;</span>, <span class="number">1</span>, gx, gy - <span class="number">1</span>) || check3(<span class="string">&#x27;G&#x27;</span>, <span class="number">0</span>, gx, gy - <span class="number">1</span>)</span><br><span class="line">			|| check3(<span class="string">&#x27;R&#x27;</span>, <span class="number">0</span>, gx, gy - <span class="number">1</span>) || check4(gx, gy - <span class="number">1</span>))) flag = <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">if</span> (check1(gx, gy + <span class="number">1</span>) &amp;&amp; !(check3(<span class="string">&#x27;C&#x27;</span>, <span class="number">1</span>, gx, gy + <span class="number">1</span>) || check3(<span class="string">&#x27;G&#x27;</span>, <span class="number">0</span>, gx, gy + <span class="number">1</span>)</span><br><span class="line">			|| check3(<span class="string">&#x27;R&#x27;</span>, <span class="number">0</span>, gx, gy + <span class="number">1</span>) || check4(gx, gy + <span class="number">1</span>))) flag = <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">if</span> (check1(gx - <span class="number">1</span>, gy) &amp;&amp; !(check3(<span class="string">&#x27;C&#x27;</span>, <span class="number">1</span>, gx - <span class="number">1</span>, gy) || check3(<span class="string">&#x27;G&#x27;</span>, <span class="number">0</span>, gx - <span class="number">1</span>, gy)</span><br><span class="line">			|| check3(<span class="string">&#x27;R&#x27;</span>, <span class="number">0</span>, gx - <span class="number">1</span>, gy) || check4(gx - <span class="number">1</span>, gy))) flag = <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">if</span> (check1(gx + <span class="number">1</span>, gy) &amp;&amp; !(check3(<span class="string">&#x27;C&#x27;</span>, <span class="number">1</span>, gx + <span class="number">1</span>, gy) || check3(<span class="string">&#x27;G&#x27;</span>, <span class="number">0</span>, gx + <span class="number">1</span>, gy)</span><br><span class="line">			|| check3(<span class="string">&#x27;R&#x27;</span>, <span class="number">0</span>, gx + <span class="number">1</span>, gy) || check4(gx + <span class="number">1</span>, gy))) flag = <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">if</span> (check3(<span class="string">&#x27;G&#x27;</span>, <span class="number">0</span>, gx, gy)) flag = <span class="literal">false</span>;</span><br><span class="line">		flag ? <span class="built_in">printf</span>(<span class="string">&quot;YES\n&quot;</span>) : <span class="built_in">printf</span>(<span class="string">&quot;NO\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><a href="https://vjudge.net/problem/UVA-201"> <strong>UVA201 Squares</strong> </a> </p>
</li>
<li><p>这一题我是暴力做的，具体方式就是对每个点，计算它所能构成的边长为1、2、3……n的正方形个数，代码逻辑很简单，1A。</p>
</li>
<li><p>关于唯一计算: 因为我们的出发点是以每个点为正方形左上角顶点，无疑只会计算一次。</p>
</li>
<li><p>我的解答(AC)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; // 输入量并不大采用cin，cout</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> &#123;</span> <span class="keyword">int</span> r ,d; &#125;; <span class="comment">// 与下边点和右边点连接</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">15</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line">Point b[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> cnt[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">	freopen(<span class="string">&quot;D:\\in.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="built_in">stdin</span>);</span><br><span class="line">	freopen(<span class="string">&quot;D:\\out.txt&quot;</span>, <span class="string">&quot;w&quot;</span>, <span class="built_in">stdout</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">	<span class="keyword">int</span> i, j, kase = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">char</span> ch;</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">1</span>; r &lt;= n; r++) &#123; <span class="comment">// 初始化</span></span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">1</span>; c &lt;= n; c++) &#123;</span><br><span class="line">				b[r][c].r = b[r][c].d = <span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span> (m--) &#123;  <span class="comment">// 连边，只需要考虑右边和下边</span></span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; ch &gt;&gt; i &gt;&gt; j;</span><br><span class="line">			<span class="keyword">if</span> (ch == <span class="string">&#x27;H&#x27;</span>) b[i][j].r = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span> (ch == <span class="string">&#x27;V&#x27;</span>) b[j][i].d = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (kase) <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\n**********************************\n\n&quot;</span>;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Problem #&quot;</span> &lt;&lt; ++kase &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="keyword">sizeof</span>(cnt));</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">1</span>; l &lt;= n; l++) &#123; <span class="comment">// 计数边长为i的正方形个数</span></span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">1</span>; r &lt;= n; r++) &#123; <span class="comment">// 对每个点</span></span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">1</span>; c &lt;= n; c++) &#123;</span><br><span class="line">					<span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">					<span class="keyword">int</span> x, y;</span><br><span class="line">					<span class="keyword">for</span> (y = c; y &lt;= n &amp;&amp; y - c &lt; l; y++) &#123;  <span class="comment">// 遍历右边</span></span><br><span class="line">						<span class="keyword">if</span> (!b[r][y].r) &#123; flag = <span class="literal">false</span>; <span class="keyword">break</span>; &#125;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">if</span> (flag) &#123; <span class="comment">// 计算从右边l距离的点下来的边</span></span><br><span class="line">						<span class="keyword">for</span> (x = r; x &lt;= n &amp;&amp; x - r &lt; l; x++) &#123;</span><br><span class="line">							<span class="keyword">if</span> (!b[x][y].d) &#123; flag = <span class="literal">false</span>; <span class="keyword">break</span>; &#125;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">if</span> (flag) &#123; <span class="comment">// 计算竖直的边</span></span><br><span class="line">						<span class="keyword">for</span> (x = r; x &lt;= n &amp;&amp; x - r &lt; l; x++) &#123;</span><br><span class="line">							<span class="keyword">if</span> (!b[x][c].d) &#123; flag = <span class="literal">false</span>; <span class="keyword">break</span>; &#125;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">if</span> (flag) &#123;</span><br><span class="line">						<span class="keyword">for</span> (y = c; y &lt;= n &amp;&amp; y - c &lt; l; y++) &#123;</span><br><span class="line">							<span class="keyword">if</span> (!b[x][y].r) &#123; flag = <span class="literal">false</span>; <span class="keyword">break</span>; &#125;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">if</span> (flag) cnt[l]++;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> s = <span class="number">1</span>; s &lt;= n; s++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (cnt[s]) &#123;</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; cnt[s] &lt;&lt; <span class="string">&quot; square (s) of size &quot;</span> &lt;&lt; s &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">				flag = <span class="literal">true</span>; <span class="comment">// 输出过</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (!flag) <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;No completed squares can be found.&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>看到个更简洁的写法，但是思路一样，码住学习下，他把平行的边合并判断了。<br><a href="https://blog.csdn.net/mobius_strip/article/details/42001703"><strong>更简洁的写法</strong></a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> H[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> V[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span>  n,m,x,y,T = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">char</span> c;</span><br><span class="line">	<span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m)) &#123;</span><br><span class="line">		getchar();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; ++ i)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span> ; j &lt;= n ; ++ j)</span><br><span class="line">			V[i][j] = H[i][j] = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= m ; ++ i) &#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%c%d%d&quot;</span>,&amp;c,&amp;x,&amp;y);</span><br><span class="line">			getchar();</span><br><span class="line">			<span class="keyword">if</span> (c == <span class="string">&#x27;H&#x27;</span>)</span><br><span class="line">				H[x][y] = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">else</span> </span><br><span class="line">				V[y][x] = <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (T ++) <span class="built_in">printf</span>(<span class="string">&quot;\n**********************************\n\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Problem #%d\n\n&quot;</span>,T);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">1</span> ; l &lt;= n ; ++ l) &#123;</span><br><span class="line">			<span class="keyword">int</span> count = <span class="number">0</span>,flag = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span> ; i+l &lt;= n ; ++ i)</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span> ; j+l &lt;= n ; ++ j) &#123;</span><br><span class="line">				flag = <span class="number">1</span>;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> h = j ; h &lt; j+l ; ++ h)</span><br><span class="line">					<span class="keyword">if</span> (!H[i][h] || !H[i+l][h]) flag = <span class="number">0</span>;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> v = i ; v &lt; i+l ; ++ v)</span><br><span class="line">					<span class="keyword">if</span> (!V[v][j] || !V[v][j+l]) flag = <span class="number">0</span>;</span><br><span class="line">				count += flag;</span><br><span class="line">			&#125;</span><br><span class="line">			sum += count;</span><br><span class="line">			<span class="keyword">if</span> (count) <span class="built_in">printf</span>(<span class="string">&quot;%d square (s) of size %d\n&quot;</span>,count,l);</span><br><span class="line">		&#125;</span><br><span class="line">			</span><br><span class="line">		<span class="keyword">if</span> (!sum) <span class="built_in">printf</span>(<span class="string">&quot;No completed squares can be found.\n&quot;</span>);</span><br><span class="line">	&#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><a href="https://vjudge.net/problem/UVA-815"> <strong>UVA815 Flooded!</strong> </a></p>
</li>
<li><p>排序过后直接求就行了，注意输出比较毒瘤，题目给的输出格式有问题，每组之后得输出两个空行。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable:4996)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">int</span> b[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> m, n, kase = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;m, &amp;n) == <span class="number">2</span> &amp;&amp; m) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Region %d\n&quot;</span>, ++kase);</span><br><span class="line">		<span class="built_in">memset</span>(b, <span class="number">0</span>, <span class="keyword">sizeof</span>(b)); <span class="comment">// 归零</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m * n; i++) &#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;b[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> c, cnt = <span class="number">100</span>; <span class="comment">// cnt 记录了方块数</span></span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;c);</span><br><span class="line">		sort(b, b + m * n); <span class="comment">// 升序排列</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m * n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">			<span class="keyword">while</span> (b[i] &lt; b[i + <span class="number">1</span>] &amp;&amp; c &gt;= cnt) c -= cnt, b[i]++; <span class="comment">// 下一块海拔更高且降水量可以减</span></span><br><span class="line">			<span class="keyword">if</span> (b[i] == b[i + <span class="number">1</span>] &amp;&amp; c) cnt += <span class="number">100</span>; <span class="comment">// 下一块和这一块同海拔且还有水</span></span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Water level is %.2f meters.\n&quot;</span>, <span class="keyword">double</span>(b[cnt / <span class="number">100</span> - <span class="number">1</span>]) + <span class="keyword">double</span>(c) / cnt);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%.2f percent of the region is under water.\n&quot;</span>, <span class="keyword">double</span>(cnt)/(m * n));</span><br><span class="line">		<span class="keyword">if</span> (kase) <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><a href="https://vjudge.net/problem/UVA-220"> <strong>Uva220 Othello</strong> </a></p>
</li>
<li><p>待补全</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">char</span> board[maxn][maxn];</span><br><span class="line"><span class="keyword">char</span> cp, wp; <span class="comment">// op是当前正在操作的玩家</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">8</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= <span class="number">8</span>;j++)&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; board[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check_row</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 向左检查</span></span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> c = y - <span class="number">1</span>;c &gt;= <span class="number">1</span>;c--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(board[x][c] == wp) cnt++;</span><br><span class="line">        <span class="keyword">if</span>(board[x][c] == <span class="string">&#x27;-&#x27;</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(board[x][c] == cp &amp;&amp; !cnt) <span class="keyword">break</span>; <span class="comment">// 在遇到下一个黑棋前之应该碰到白棋</span></span><br><span class="line">        <span class="keyword">if</span>(board[x][c] == cp &amp;&amp; cnt) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cnt = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 向右检查</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> c = y + <span class="number">1</span>;c &lt;= <span class="number">8</span>;c++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(board[x][c] == wp) cnt++;</span><br><span class="line">        <span class="keyword">if</span>(board[x][c] == <span class="string">&#x27;-&#x27;</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(board[x][c] == cp &amp;&amp; !cnt) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(board[x][c] == cp &amp;&amp; cnt) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 到此肯定就是不合法位</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check_col</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 向上检查</span></span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> r = x - <span class="number">1</span>;r &gt;= <span class="number">1</span>;r--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(board[r][y] == wp) cnt++;</span><br><span class="line">        <span class="keyword">if</span>(board[r][y] == <span class="string">&#x27;-&#x27;</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(board[r][y] == cp &amp;&amp; !cnt) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(board[r][y] == cp &amp;&amp; cnt) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cnt = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 向下检查</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> r = x + <span class="number">1</span>;r &lt;= <span class="number">8</span>;r++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(board[r][y] == wp) cnt++;</span><br><span class="line">        <span class="keyword">if</span>(board[r][y] == <span class="string">&#x27;-&#x27;</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(board[r][y] == cp &amp;&amp; !cnt) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(board[r][y] == cp &amp;&amp; cnt) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check_dig</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>, r, c;</span><br><span class="line"><span class="comment">// 检查左上角</span></span><br><span class="line">    r = x - <span class="number">1</span>, c = y - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(r &gt;= <span class="number">1</span> &amp;&amp; c &gt;= <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(board[r][c] == wp) cnt++;</span><br><span class="line">        <span class="keyword">if</span>(board[r][c] == <span class="string">&#x27;-&#x27;</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(board[r][c] == cp &amp;&amp; !cnt) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(board[r][c] == cp &amp;&amp; cnt) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        r--; c--;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 检查右下角</span></span><br><span class="line">    r = x + <span class="number">1</span>, c = y + <span class="number">1</span>, cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(r &lt;= <span class="number">8</span> &amp;&amp; c &lt;= <span class="number">8</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(board[r][c] == wp) cnt++;</span><br><span class="line">        <span class="keyword">if</span>(board[r][c] == <span class="string">&#x27;-&#x27;</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(board[r][c] == cp &amp;&amp; !cnt) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(board[r][c] == cp &amp;&amp; cnt) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        r++; c++;</span><br><span class="line">    &#125;</span><br><span class="line">    cnt = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 检查左下角</span></span><br><span class="line">    r = x + <span class="number">1</span>, c = y - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(r &lt;= <span class="number">8</span> &amp;&amp; c &gt;= <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(board[r][c] == wp) cnt++;</span><br><span class="line">        <span class="keyword">if</span>(board[r][c] == <span class="string">&#x27;-&#x27;</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(board[r][c] == cp &amp;&amp; !cnt) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(board[r][c] == cp &amp;&amp; cnt) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        r++; c--;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 检查右上角</span></span><br><span class="line">    cnt = <span class="number">0</span>;</span><br><span class="line">    r = x - <span class="number">1</span>, c = y + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(r &gt;= <span class="number">1</span> &amp;&amp; c &lt;= <span class="number">8</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(board[r][c] == wp) cnt++;</span><br><span class="line">        <span class="keyword">if</span>(board[r][c] == <span class="string">&#x27;-&#x27;</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(board[r][c] == cp &amp;&amp; !cnt) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(board[r][c] == cp &amp;&amp; cnt) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        r--; c++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">list_place</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">8</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= <span class="number">8</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(board[i][j] == <span class="string">&#x27;-&#x27;</span> &amp;&amp; (check_row(i, j) || check_col(i, j) || check_dig(i, j)))&#123;</span><br><span class="line">                <span class="keyword">if</span>(flag) <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;(&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; j &lt;&lt; <span class="string">&quot;)&quot;</span>;</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!flag) <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;No legal move.&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change_board</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 判断合法位</span></span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">int</span> r, c;</span><br><span class="line">    <span class="keyword">if</span>(check_row(x, y))&#123;</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">// 改变行</span></span><br><span class="line">        board[x][y] = cp;</span><br><span class="line">        <span class="keyword">for</span>(c = y - <span class="number">1</span>;c &gt;= <span class="number">1</span>;c--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(board[x][c] == <span class="string">&#x27;-&#x27;</span> || board[x][c] == cp)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(c &gt;= <span class="number">1</span> &amp;&amp; board[x][c] == cp)&#123;</span><br><span class="line">            <span class="keyword">while</span>(++c &lt; y) board[x][c] = cp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(c = y + <span class="number">1</span>;c &lt;= <span class="number">8</span>;c++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(board[x][c] == <span class="string">&#x27;-&#x27;</span> || board[x][c] == cp)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(c &lt;= <span class="number">8</span> &amp;&amp; board[x][c] == cp)&#123;</span><br><span class="line">            <span class="keyword">while</span>(--c &gt; y) board[x][c] = cp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(check_col(x, y))&#123;</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">        board[x][y] = cp;</span><br><span class="line">        <span class="keyword">for</span>(r = x - <span class="number">1</span>;r &gt;= <span class="number">1</span>;r--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(board[r][y] == <span class="string">&#x27;-&#x27;</span> || board[r][y] == cp)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(r &gt;= <span class="number">1</span> &amp;&amp; board[r][y] == cp)&#123;</span><br><span class="line">            <span class="keyword">while</span>(++r &lt; x) board[r][y] = cp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(r = x + <span class="number">1</span>;r &lt;= <span class="number">8</span>;r++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(board[r][y] == <span class="string">&#x27;-&#x27;</span> || board[r][y] == cp)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(r &lt;= <span class="number">8</span> &amp;&amp; board[r][y] == cp)&#123;</span><br><span class="line">            <span class="keyword">while</span>(--r &gt; x) board[r][y] = cp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(check_dig(x, y))&#123;</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">        board[x][y] = cp;</span><br><span class="line">        <span class="keyword">for</span>(r = x - <span class="number">1</span>, c = y - <span class="number">1</span>;r &gt;= <span class="number">1</span> &amp;&amp; c &gt;= <span class="number">1</span>;r--, c--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(board[r][c] == <span class="string">&#x27;-&#x27;</span> || board[r][c] == cp) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(r &gt;= <span class="number">1</span> &amp;&amp; c &gt;= <span class="number">1</span> &amp;&amp; board[r][c] == cp)&#123;</span><br><span class="line">            <span class="keyword">while</span>(++r &lt; x) board[r][++c] = cp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(r = x + <span class="number">1</span>, c = y + <span class="number">1</span>;r &lt;= <span class="number">8</span> &amp;&amp; c &lt;= <span class="number">8</span>;r++, c++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(board[r][c] == <span class="string">&#x27;-&#x27;</span> || board[r][c] == cp)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(r &lt;= <span class="number">8</span> &amp;&amp; c &lt;= <span class="number">8</span> &amp;&amp; board[r][c] == cp)&#123;</span><br><span class="line">            <span class="keyword">while</span>(--r &gt; x) board[r][--c] = cp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(r = x + <span class="number">1</span>, c = y - <span class="number">1</span>;r &lt;= <span class="number">8</span> &amp;&amp; c &gt;= <span class="number">1</span>;r++, c--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(board[r][c] == <span class="string">&#x27;-&#x27;</span> || board[r][c] == cp)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(r &lt;=<span class="number">8</span> &amp;&amp; c &gt;= <span class="number">1</span> &amp;&amp; board[r][c] == cp)&#123;</span><br><span class="line">            <span class="keyword">while</span>(--r &gt; x) board[r][++c] = cp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(r = x - <span class="number">1</span>, c = y + <span class="number">1</span>;r &gt;= <span class="number">1</span> &amp;&amp; c &lt;= <span class="number">8</span>;r--, c++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(board[r][c] == <span class="string">&#x27;-&#x27;</span> || board[r][c] == cp)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(r &gt;= <span class="number">1</span> &amp;&amp; c &lt;= <span class="number">8</span> &amp;&amp; board[r][c] == cp)&#123;</span><br><span class="line">            <span class="keyword">while</span>(++r &lt; x) board[r][--c] = cp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!flag) &#123;</span><br><span class="line">        swap(cp, wp);</span><br><span class="line">        change_board(x, y);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">0</span>, w = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(r = <span class="number">1</span>;r &lt;= <span class="number">8</span>;r++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(c = <span class="number">1</span>;c &lt;= <span class="number">8</span>;c++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(board[r][c] == <span class="string">&#x27;B&#x27;</span>) b++;</span><br><span class="line">            <span class="keyword">if</span>(board[r][c] == <span class="string">&#x27;W&#x27;</span>) w++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Black -  &quot;</span> &lt;&lt; b &lt;&lt; <span class="string">&quot; White -  &quot;</span> &lt;&lt; w &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    freopen(<span class="string">&quot;D:\\in.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">&quot;D:\\out.txt&quot;</span>, <span class="string">&quot;w&quot;</span>, <span class="built_in">stdout</span>);</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">while</span>(n--) &#123;</span><br><span class="line">        <span class="keyword">char</span> ch;</span><br><span class="line">        <span class="built_in">memset</span>(board, <span class="number">0</span>, <span class="keyword">sizeof</span>(board));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">8</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">8</span>; j++) &#123;</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; ch;</span><br><span class="line">                board[i][j] = ch;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; cp;</span><br><span class="line">        wp = cp == <span class="string">&#x27;B&#x27;</span> ? <span class="string">&#x27;W&#x27;</span> : <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">        <span class="keyword">char</span> ops;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; ops &amp;&amp; ops != <span class="string">&#x27;Q&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ops == <span class="string">&#x27;L&#x27;</span>) list_place();</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">char</span> x, y;</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">                change_board(x - <span class="string">&#x27;0&#x27;</span>, y- <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                swap(cp, wp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        print();</span><br><span class="line">        <span class="keyword">if</span>(n) <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>上面的代码太长了，虽然应该是AC的，但是冗余太多，改进后写法如下:</p>
</li>
<li><p>注意- xx，- yy的含义时输出两位宽度，最后一行不要多输出一次空行，否则会出现PE。</p>
</li>
<li><p>具体算法就是简单模拟下检查每个点的八个方位，合法的落子需要满足:</p>
</li>
<li><p>1.该点原先无子。</p>
</li>
<li><p>2.若在此处落子，该点八个方向中至少有一个可以恰好夹住对方。</p>
</li>
<li><p>同时注意交换棋手时直接用swap交换全局变量即可。</p>
</li>
<li><p>代码(1A)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">char</span> board[maxn][maxn];</span><br><span class="line"><span class="keyword">char</span> cp, wp;</span><br><span class="line"><span class="keyword">int</span> offset[<span class="number">8</span>][<span class="number">2</span>] = &#123; &#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">1</span>&#125; &#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_board</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">8</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">8</span>; j++) &#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; board[i][j];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x &gt;= <span class="number">1</span> &amp;&amp; x &lt;= <span class="number">8</span> &amp;&amp; y &gt;= <span class="number">1</span> &amp;&amp; y &lt;= <span class="number">8</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check_xy</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (board[x][y] != <span class="string">&#x27;-&#x27;</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> r = x + offset[i][<span class="number">0</span>];</span><br><span class="line">		<span class="keyword">int</span> c = y + offset[i][<span class="number">1</span>];</span><br><span class="line">		<span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span> (check(r, c) &amp;&amp; board[r][c] == wp) &#123;</span><br><span class="line">			r += offset[i][<span class="number">0</span>];</span><br><span class="line">			c += offset[i][<span class="number">1</span>];</span><br><span class="line">			cnt++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (check(r, c) &amp;&amp; cnt &amp;&amp; board[r][c] == cp) &#123;</span><br><span class="line">			flag = <span class="literal">true</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">list_board</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">8</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">8</span>; j++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (check_xy(i, j)) &#123;</span><br><span class="line">				<span class="keyword">if</span> (flag) <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;(&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; j &lt;&lt; <span class="string">&quot;)&quot;</span>;</span><br><span class="line">				flag = <span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; (flag ? <span class="string">&quot;\n&quot;</span> : <span class="string">&quot;No legal move.\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (!check_xy(x, y)) &#123;</span><br><span class="line">		swap(cp, wp);</span><br><span class="line">		move(x, y);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> r = x + offset[i][<span class="number">0</span>];</span><br><span class="line">		<span class="keyword">int</span> c = y + offset[i][<span class="number">1</span>];</span><br><span class="line">		<span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span> (check(r, c) &amp;&amp; board[r][c] == wp) &#123;</span><br><span class="line">			r += offset[i][<span class="number">0</span>];</span><br><span class="line">			c += offset[i][<span class="number">1</span>];</span><br><span class="line">			cnt++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (check(r ,c) &amp;&amp; cnt &amp;&amp; board[r][c] == cp) &#123;</span><br><span class="line">			<span class="keyword">while</span> (r != x || c != y) &#123;</span><br><span class="line">				r -= offset[i][<span class="number">0</span>];</span><br><span class="line">				c -= offset[i][<span class="number">1</span>];</span><br><span class="line">				board[r][c] = cp;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> cb = <span class="number">0</span>, cw = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">8</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">8</span>; j++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (board[i][j] == <span class="string">&#x27;B&#x27;</span>) cb++;</span><br><span class="line">			<span class="keyword">if</span> (board[i][j] == <span class="string">&#x27;W&#x27;</span>) cw++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Black - &quot;</span> &lt;&lt; setw(<span class="number">2</span>) &lt;&lt; cb &lt;&lt; <span class="string">&quot; White - &quot;</span> &lt;&lt; setw(<span class="number">2</span>) &lt;&lt; cw &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE </span></span><br><span class="line">	freopen(<span class="string">&quot;D:\\in.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="built_in">stdin</span>);</span><br><span class="line">	freopen(<span class="string">&quot;D:\\out.txt&quot;</span>, <span class="string">&quot;w&quot;</span>, <span class="built_in">stdout</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	<span class="keyword">while</span> (n--) &#123;</span><br><span class="line">		<span class="keyword">char</span> ch;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">8</span>; i++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">8</span>; j++) &#123;</span><br><span class="line">				<span class="built_in">cin</span> &gt;&gt; ch;</span><br><span class="line">				board[i][j] = ch;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; cp;</span><br><span class="line">		wp = cp == <span class="string">&#x27;W&#x27;</span> ? <span class="string">&#x27;B&#x27;</span> : <span class="string">&#x27;W&#x27;</span>;</span><br><span class="line">		<span class="keyword">char</span> ops;</span><br><span class="line">		<span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; ops &amp;&amp; ops != <span class="string">&#x27;Q&#x27;</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (ops == <span class="string">&#x27;L&#x27;</span>) list_board();</span><br><span class="line">			<span class="keyword">else</span> &#123; </span><br><span class="line">				<span class="keyword">char</span> x, y;</span><br><span class="line">				<span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">				move(x - <span class="string">&#x27;0&#x27;</span>,y - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">				swap(cp, wp);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		print_board();</span><br><span class="line">		<span class="keyword">if</span>(n &gt; <span class="number">0</span>) <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><a href="https://vjudge.net/problem/UVA-253"><strong>Uva253 Cube painting</strong></a></p>
</li>
<li><p>我的思路:</p>
</li>
<li><p>对于每个立方体的面都有4种视角，每个面可以去6种位置(这里不要累加，对整个立方体而言也只有六种)，也即是24种情况，枚举判断即可。</p>
</li>
<li><p>代码(1A)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> src, tgt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> rot[<span class="number">6</span>][<span class="number">6</span>] = &#123; &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;, &#123;<span class="number">5</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">2</span>&#125;,&#123;<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">3</span>&#125;,&#123;<span class="number">3</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">4</span>&#125;,&#123;<span class="number">2</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">5</span>&#125;, &#123;<span class="number">6</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>&#125; &#125;;</span><br><span class="line"><span class="keyword">int</span> view[<span class="number">4</span>][<span class="number">6</span>] = &#123; &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;, &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>&#125;, &#123;<span class="number">1</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">6</span>&#125;,&#123;<span class="number">1</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">6</span>&#125; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// 检查24种情况</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">		<span class="built_in">string</span> tmp;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">6</span>; j++) &#123;</span><br><span class="line">			tmp += src[rot[i][j] - <span class="number">1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</span><br><span class="line">			<span class="built_in">string</span> ans;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">0</span>; l &lt; <span class="number">6</span>; l++) &#123;</span><br><span class="line">				ans += tmp[view[k][l] - <span class="number">1</span>];</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (ans == tgt) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">string</span> str;</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; str) &#123;</span><br><span class="line">		src = str.substr(<span class="number">0</span>, <span class="number">6</span>);</span><br><span class="line">		tgt = str.substr(<span class="number">6</span>);</span><br><span class="line">		<span class="keyword">if</span> (judge()) <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;TRUE&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;FALSE&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>ACM专题</category>
      </categories>
  </entry>
  <entry>
    <title>树</title>
    <url>/2020/11/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%A0%E9%A2%98%E7%AD%94%E6%A1%88/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84--%E6%A0%91/</url>
    <content><![CDATA[<p>鉴于自己在看机械工业出版社的数据结构时，常常苦于没有答案，便觉得有必要整理出一份自己的答案，虽然不一定完全正确，实现也不一定高效，但总有些参考价值叭。</p>
<a id="more"></a>
<h2 id="二叉树和其他树"><a href="#二叉树和其他树" class="headerlink" title="二叉树和其他树"></a>二叉树和其他树</h2><blockquote>
<p>Tips:先把书上的代码弄出来吧~</p>
</blockquote>
<ul>
<li><p>层序遍历用到了队列</p>
</li>
<li><p>队列实现自行参考之前的队列章节</p>
</li>
<li><p><input disabled="" type="checkbox">  类的实现: 让树生根发芽<br>二叉树的ADT</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> BINARYTREE_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BINARYTREE_H_</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	Pure virtual base class: all other kinds of tree derived from it.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">binaryTree</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">virtual</span> ~binaryTree() &#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(<span class="keyword">void</span> (*)(T*))</span> </span>= <span class="number">0</span>;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">inOrder</span><span class="params">(<span class="keyword">void</span> (*)(T*))</span> </span>= <span class="number">0</span>;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">postOrder</span><span class="params">(<span class="keyword">void</span> (*)(T*))</span> </span>= <span class="number">0</span>;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">levelOrder</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	Explanation: </span></span><br><span class="line"><span class="comment">	some of you may ask this: why our travelsal functions can&#x27;t be &#x27;const&#x27;.</span></span><br><span class="line"><span class="comment">	We should know the fact: travelsal doesn&#x27;t mean see the element,we can</span></span><br><span class="line"><span class="comment">	use those functions to change the tree, even delete it.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<p>链表二叉树的链表节点</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> BINARYTREENODE_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BINARYTREENODE_H_</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	When decided to make a structure with linked list,the first step is to make its node.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">binaryTreeNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	T element;</span><br><span class="line">	binaryTreeNode&lt;T&gt;* left, * right;</span><br><span class="line">	<span class="comment">// C++11</span></span><br><span class="line">	binaryTreeNode() : element(<span class="number">0</span>), left(<span class="literal">nullptr</span>), right(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">	binaryTreeNode(<span class="keyword">const</span> T&amp; theElement) : element(theElement), left(<span class="literal">nullptr</span>), right(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">	binaryTreeNode(<span class="keyword">const</span> T&amp; theElement, binaryTreeNode&lt;T&gt;* theLeft, binaryTreeNode&lt;T&gt;* theRight)</span><br><span class="line">		: element(theElement), left(theLeft), right(theRight) &#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<p>链表二叉树的实现</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> LINKED_BINARY_TREE_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LINKED_BINARY_TREE_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;binaryTreeNode.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;arrayQueue.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;binaryTree.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// It&#x27;s a great habit--not using &#x27;namespace std&#x27; in a header file.</span></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	1.Details: binaryTree&lt;binaryTreeNode&lt;E&gt;&gt; should be written as:</span></span><br><span class="line"><span class="comment">	binaryTree&lt;binaryTreeNode&lt;E&gt; &gt; (add a space at the end)</span></span><br><span class="line"><span class="comment">	if the version of your C++ is not C++11, for example: C++98.</span></span><br><span class="line"><span class="comment">	2.Static pointer &#x27;dynamicVisit&#x27; can be changed! That is how we</span></span><br><span class="line"><span class="comment">	change our method when use traversal functions.</span></span><br><span class="line"><span class="comment">	3.We use static functions to operate our traversal functions,</span></span><br><span class="line"><span class="comment">	this seems a little cumbersome. But in fact, we can never let our</span></span><br><span class="line"><span class="comment">	users(other programmers) to pass a pointer to our function! They even</span></span><br><span class="line"><span class="comment">	don&#x27;t know where is our root. This is called packaging.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> E&gt; <span class="comment">// E standardize for element</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">linkedBinaryTree</span> :</span> <span class="keyword">public</span> binaryTree&lt;binaryTreeNode&lt;E&gt;&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	~linkedBinaryTree() &#123; postOrder(dispose); root = <span class="literal">nullptr</span>; treeSize = <span class="number">0</span>; &#125;</span><br><span class="line">	linkedBinaryTree() &#123; root = <span class="literal">nullptr</span>; treeSize = <span class="number">0</span>; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> treeSize == <span class="number">0</span>; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> treeSize; &#125;</span><br><span class="line">	<span class="comment">// Inline type, overloded</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(<span class="keyword">void</span>(*visit)(binaryTreeNode&lt;E&gt;*))</span> </span>&#123; dynamicVisit = visit; preOrder(root); &#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">inOrder</span><span class="params">(<span class="keyword">void</span>(*visit)(binaryTreeNode&lt;E&gt;*))</span> </span>&#123; dynamicVisit = visit; inOrder(root); &#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">postOrder</span><span class="params">(<span class="keyword">void</span>(*visit)(binaryTreeNode&lt;E&gt;*))</span> </span>&#123; dynamicVisit = visit; postOrder(root); &#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">levelOrder</span><span class="params">(<span class="keyword">void</span>(*visit)(binaryTreeNode&lt;E&gt;*))</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	binaryTreeNode&lt;E&gt;* root;</span><br><span class="line">	<span class="keyword">int</span> treeSize;</span><br><span class="line">	<span class="function"><span class="keyword">static</span> <span class="title">void</span> <span class="params">(*dynamicVisit)</span> <span class="params">(binaryTreeNode&lt;E&gt;* subTree)</span></span>; <span class="comment">// default nullptr, no target.</span></span><br><span class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(binaryTreeNode&lt;E&gt;* subTree)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">inOrder</span><span class="params">(binaryTreeNode&lt;E&gt;* subTree)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">postOrder</span><span class="params">(binaryTreeNode&lt;E&gt;* subTree)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dispose</span><span class="params">(binaryTreeNode&lt;E&gt;* subTree)</span> </span>&#123; <span class="keyword">delete</span> subTree; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Declaration of static member</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="keyword">void</span> (*linkedBinaryTree&lt;E&gt;::dynamicVisit) (binaryTreeNode&lt;E&gt;* subTree);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Below are traversal functions, pay attention to their overloded type.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Pre-Order traversal: recursion</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="keyword">void</span> linkedBinaryTree&lt;E&gt;::preOrder(binaryTreeNode&lt;E&gt;* subTree)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (subTree != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">		linkedBinaryTree&lt;E&gt;::dynamicVisit(subTree);</span><br><span class="line">		preOrder(subTree-&gt;left);</span><br><span class="line">		preOrder(subTree-&gt;right);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// In-Order traversal: recursion</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="keyword">void</span> linkedBinaryTree&lt;E&gt;::inOrder(binaryTreeNode&lt;E&gt;* subTree)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (subTree != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">		preOrder(subTree-&gt;left);</span><br><span class="line">		linkedBinaryTree&lt;E&gt;::dynamicVisit(subTree);</span><br><span class="line">		preOrder(subTree-&gt;right);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Post-Order traversal: recursion</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="keyword">void</span> linkedBinaryTree&lt;E&gt;::postOrder(binaryTreeNode&lt;E&gt;* subTree)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (subTree != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">		postOrder(subTree-&gt;left);</span><br><span class="line">		postOrder(subTree-&gt;right);</span><br><span class="line">		linkedBinaryTree&lt;E&gt;::dynamicVisit(subTree);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="keyword">void</span> linkedBinaryTree&lt;E&gt;::levelOrder(<span class="keyword">void</span>(*visit)(binaryTreeNode&lt;E&gt;*))</span><br><span class="line">&#123;</span><br><span class="line">	linkedBinaryTree&lt;E&gt;::dynamicVisit = visit;</span><br><span class="line">	binaryTreeNode&lt;E&gt;* currNode = root;</span><br><span class="line">	arrayQueue&lt;binaryTreeNode&lt;E&gt;*&gt; treeBucket;</span><br><span class="line">	<span class="keyword">while</span> (currNode != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">		linkedBinaryTree&lt;E&gt;::dynamicVisit(currNode);</span><br><span class="line">		<span class="keyword">if</span> (currNode-&gt;left != <span class="literal">nullptr</span>) treeBucket.push(currNode-&gt;left);</span><br><span class="line">		<span class="keyword">if</span> (currNode-&gt;right != <span class="literal">nullptr</span>) treeBucket.push(currNode-&gt;right);</span><br><span class="line">		<span class="keyword">if</span> (!treeBucket.empty()) &#123;</span><br><span class="line">			currNode = treeBucket.front();</span><br><span class="line">			treeBucket.pop();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> currNode = <span class="literal">nullptr</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<p>实际上，到这一步之后，我们的二叉树类还完全没法用起来，原因在于，我们没法构建一棵树，而且在遍历的时候我们还未规定方法。<br>但是如上的框架已经可以称作一个比较完整的类了，后续的操作都在它上面展开。</p>
</li>
<li><p>关键一步: 造树</p>
<blockquote>
<p>造树的方法有很多很多，可以采用不断插入节点的方式，也可以采用合并树的方式，这里我们采用后者。前者在B树实现时我们再详细说。</p>
</blockquote>
</li>
<li><p>公有声明</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">makeTree</span><span class="params">(<span class="keyword">int</span> theElement,linkedBinaryTree&lt;E&gt;&amp; leftTree, linkedBinaryTree&lt;E&gt;&amp; rightTree)</span></span>;</span><br></pre></td></tr></table></figure></li>
<li><p>实现</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="keyword">void</span> linkedBinaryTree&lt;E&gt;::makeTree(<span class="keyword">int</span> theElement, linkedBinaryTree&lt;E&gt;&amp; leftTree, linkedBinaryTree&lt;E&gt;&amp; rightTree)</span><br><span class="line">&#123;</span><br><span class="line">	root = <span class="keyword">new</span> binaryTreeNode&lt;E&gt; * (theElement, leftTree.root, rightTree.root);</span><br><span class="line">	leftTree.root = rightTree.root = <span class="literal">nullptr</span>;</span><br><span class="line">	treeSize = leftTree.treeSize + rightTree.treeSize + <span class="number">1</span>;</span><br><span class="line">	leftTree.treeSize = rightTree.treeSize = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>遍历操作: 遍历通过dynamicVisit进行灵活转换，后续大部分操作都得借助它，举个例子:如果遍历时只是简单输出。那么我们可以给公有遍历函数传如下函数:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(binaryTreeNode&lt;T&gt;* subTree)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; subTree-&gt;element &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>到这一步后，理论上如果你和我的编译环境差距不大，都是可以种出一棵树的。接下来的工作都是美化树了，我们会给出实际例子。</p>
</blockquote>
</li>
</ul>
<h2 id="习题答案，P280、281"><a href="#习题答案，P280、281" class="headerlink" title="习题答案，P280、281"></a>习题答案，P280、281</h2><ul>
<li><p><input disabled="" type="checkbox">  Page280，T20，数组实现的二叉树的前序遍历</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> arrayTree&lt;T&gt;::preOrder(<span class="keyword">int</span> index)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (index &lt; arraySize &amp;&amp; tree[index].first != <span class="literal">false</span>) &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; tree[index].second &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">		preOrder(<span class="number">2</span> * index);</span><br><span class="line">		preOrder(<span class="number">2</span> * index + <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">void</span> arrayTree&lt;T&gt;::preOrder()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (treeSize == <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;The tree is empty!&quot;</span>;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;前序遍历:&quot;</span>;</span><br><span class="line">	preOrder(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>记得加入声明</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preOrder</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br></pre></td></tr></table></figure></li>
<li><p>数据类型表示:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">pair</span>&lt;<span class="keyword">bool</span>, T&gt;* tree;</span><br><span class="line"><span class="keyword">int</span> treeSize; <span class="comment">// number of nodes</span></span><br><span class="line"><span class="keyword">int</span> arraySize; <span class="comment">// length of array</span></span><br></pre></td></tr></table></figure></li>
<li><p>按照题意可以增加一个变量last，它指向最后一个元素，此时上述判断改成:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> arrayTree&lt;T&gt;::preOrder(<span class="keyword">int</span> index)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (index &lt;= last &amp;&amp; tree[index].first != <span class="literal">false</span>) &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; tree[index].second &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">		preOrder(<span class="number">2</span> * index);</span><br><span class="line">		preOrder(<span class="number">2</span> * index + <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>时间复杂度:$$ O(n). $$</p>
</li>
<li><p><input disabled="" type="checkbox">  Page281，T27，计算高度</p>
</li>
<li><p>私有声明</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">height</span><span class="params">(binaryTreeNode&lt;E&gt;* subTree)</span></span>;</span><br></pre></td></tr></table></figure></li>
<li><p>公有接口</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">height</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> height(root); &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>实现</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="keyword">int</span> linkedBinaryTree&lt;E&gt;::height(binaryTreeNode&lt;E&gt;* subTree)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (subTree == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> h1 = height(subTree-&gt;left);</span><br><span class="line">	<span class="keyword">int</span> h2 = height(subTree-&gt;right);</span><br><span class="line">	<span class="keyword">if</span> (h1 &lt;= h2) <span class="keyword">return</span> ++h2;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> ++h1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>时间复杂度<br>$$T(h) = 2\times T(h-1)$$<br>$$= 4\times T(h-1)$$<br>$$= ……$$<br>$$= 2^k\times T(0)$$<br>$$= 2^k$$<br>$$k = \log_2 n, 所以T(h) = O(n).$$</p>
</li>
<li><p>空间复杂度<br>$$ 递归深度H = \log_2 n $$<br>$$ 故有S(n) = O(\log_2 n) = O(h) $$</p>
</li>
<li><p><input disabled="" type="checkbox">  Page281，T28，求节点个数</p>
<blockquote>
<p>实际上我们上面的size函数已经能实现该功能了，但是写写也无妨奥，方法也很简单。</p>
</blockquote>
</li>
<li><p>声明1:全局的cnt计数器</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> cnt;</span><br></pre></td></tr></table></figure></li>
<li><p>定义2:递增函数</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ascend</span><span class="params">(binaryTreeNode&lt;E&gt;* subTree)</span> </span>&#123; cnt++; &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>定义:公有方法</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">countNode</span><span class="params">()</span> </span>&#123; cnt = <span class="number">0</span>; preOrder(ascend); <span class="keyword">return</span> cnt; &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Tips:如果直接把cnt定义成静态私有成员会报错，如果把ascend定义成非static函数会报错。</p>
</blockquote>
</li>
<li><p>时间复杂度:<br>$$ O(n) $$</p>
</li>
<li><p><input disabled="" type="checkbox">  Page281，T29，判断哪一层具有最多的节点</p>
</li>
<li><p>使用层次遍历，但是不能直接调用已有方法，而是重写一遍。</p>
</li>
<li><p>把如下声明加入公有方法:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findMaxLevel</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br></pre></td></tr></table></figure></li>
<li><p>定义</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Extensive Level-Order travelsal</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="keyword">int</span> linkedBinaryTree&lt;E&gt;::findMaxLevel() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">	binaryTreeNode&lt;E&gt;* currNode = root;</span><br><span class="line">	arrayQueue&lt;binaryTreeNode&lt;E&gt;*&gt; treeBucket;</span><br><span class="line">	treeBucket.push(currNode);</span><br><span class="line">	<span class="keyword">int</span> maxNode = <span class="number">0</span>, maxLevel = <span class="number">0</span>, level = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (!treeBucket.empty()) &#123;</span><br><span class="line">		<span class="keyword">int</span> capacity = treeBucket.size();</span><br><span class="line">		<span class="keyword">if</span> (capacity &gt; maxNode) &#123;</span><br><span class="line">			maxLevel = level; </span><br><span class="line">			maxNode = capacity;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= capacity; i++) &#123; <span class="comment">// impossible to make an exception,think twice </span></span><br><span class="line">			binaryTreeNode&lt;E&gt;* tempNode = treeBucket.front();</span><br><span class="line">			treeBucket.pop();</span><br><span class="line">			<span class="keyword">if</span> (tempNode-&gt;left != <span class="literal">nullptr</span>) treeBucket.push(tempNode-&gt;left);</span><br><span class="line">			<span class="keyword">if</span> (tempNode-&gt;right != <span class="literal">nullptr</span>) treeBucket.push(tempNode-&gt;right);</span><br><span class="line">		&#125;</span><br><span class="line">		level++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> maxLevel;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Tips: 上述方法是自洽的，循环中不会出现队列抛出异常。</p>
</blockquote>
</li>
<li><p>时间复杂度:<br>$$ O(n)，每个节点只会入队一次. $$</p>
</li>
<li><p><input disabled="" type="checkbox">  Page281，T30-32:三题思路一致，故不分开写。栈的实现参考之前的文章。</p>
<blockquote>
<p>Tips:别忘了在头文件中包含stack!</p>
</blockquote>
</li>
<li><p>T30:中序遍历:不用递归就用栈，能用递归往往就能用栈实现，此题关键在于何时拐弯(如果遍历是在树中散步的话)。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="keyword">void</span> linkedBinaryTree&lt;E&gt;::inOrderWithoutRecursion(<span class="keyword">void</span>(*visit)(binaryTreeNode&lt;E&gt;*))</span><br><span class="line">&#123;</span><br><span class="line">	arrayStack&lt;binaryTreeNode&lt;E&gt;*&gt; treeBucket;</span><br><span class="line">	binaryTreeNode&lt;E&gt;* currNode = root;</span><br><span class="line">	<span class="keyword">while</span> (!treeBucket.empty() || currNode != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (currNode != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">			treeBucket.push(currNode);</span><br><span class="line">			currNode = currNode-&gt;left; <span class="comment">// Walk to left side</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (!treeBucket.empty()) &#123;</span><br><span class="line">			currNode = treeBucket.top();</span><br><span class="line">			treeBucket.pop();</span><br><span class="line">			visit(currNode);</span><br><span class="line">			currNode = currNode-&gt;right;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>T31:前序遍历:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="keyword">void</span> linkedBinaryTree&lt;E&gt;::preOrderWithoutRecursion(<span class="keyword">void</span>(*visit)(binaryTreeNode&lt;E&gt;*))</span><br><span class="line">&#123;</span><br><span class="line">	arrayStack&lt;binaryTreeNode&lt;E&gt;*&gt; treeBucket;</span><br><span class="line">	binaryTreeNode&lt;E&gt;* currNode = root;</span><br><span class="line">	<span class="keyword">while</span> (!treeBucket.empty() || currNode != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (currNode != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">			visit(currNode);</span><br><span class="line">			treeBucket.push(currNode);</span><br><span class="line">			currNode = currNode-&gt;left; <span class="comment">// Walk to left side</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(!treeBucket.empty())&#123;</span><br><span class="line">			currNode = treeBucket.top();</span><br><span class="line">			treeBucket.pop();</span><br><span class="line">			currNode = currNode-&gt;right;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>T32:后序遍历:体会其中的不同点。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="keyword">void</span> linkedBinaryTree&lt;E&gt;::postOrderWithoutRecursion(<span class="keyword">void</span>(*visit)(binaryTreeNode&lt;E&gt;*))</span><br><span class="line">&#123;</span><br><span class="line">	arrayStack&lt;binaryTreeNode&lt;E&gt;*&gt; treeBucket;</span><br><span class="line">	binaryTreeNode&lt;E&gt;* currNode = root, * lastNode = <span class="literal">nullptr</span>;</span><br><span class="line">	<span class="keyword">while</span> (!treeBucket.empty() || currNode != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (currNode != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">			treeBucket.push(currNode);</span><br><span class="line">			currNode = currNode-&gt;left; <span class="comment">// Walk to left side</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (!treeBucket.empty()) &#123;</span><br><span class="line">			currNode = treeBucket.top();</span><br><span class="line">			<span class="keyword">if</span> (currNode-&gt;right == <span class="literal">nullptr</span> || currNode-&gt;right == lastNode) &#123;</span><br><span class="line">				treeBucket.pop();</span><br><span class="line">				visit(currNode);</span><br><span class="line">				lastNode = currNode;</span><br><span class="line">				currNode = <span class="literal">nullptr</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> currNode = currNode-&gt;right;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>需要的栈空间大小等于沿着树枝散步时的最大路径长度，为O(h)。</p>
</li>
<li><p>其实上面的写法都有等价写法，这里给出前序遍历的等价写法，其他的类似。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="keyword">void</span> linkedBinaryTree&lt;E&gt;::equivalentNotion(<span class="keyword">void</span>(*visit)(binaryTreeNode&lt;E&gt;*))</span><br><span class="line">&#123;</span><br><span class="line">	arrayStack&lt;binaryTreeNode&lt;E&gt;*&gt; treeBucket;</span><br><span class="line">	binaryTreeNode&lt;E&gt;* currNode = root;</span><br><span class="line">	<span class="keyword">while</span> (!treeBucket.empty() || currNode != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">		<span class="keyword">while</span>(currNode != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">			visit(currNode);</span><br><span class="line">			treeBucket.push(currNode);</span><br><span class="line">			currNode = currNode-&gt;left; <span class="comment">// Walk to left side</span></span><br><span class="line">		&#125;</span><br><span class="line">		currNode = treeBucket.top();</span><br><span class="line">		treeBucket.pop();</span><br><span class="line">		currNode = currNode-&gt;right;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>如上写法是自洽的，不会抛出异常。<br>记得在类的公有方法里加上四个声明:</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preOrderWithoutRecursion</span><span class="params">(<span class="keyword">void</span>(*visit)(binaryTreeNode&lt;E&gt;*))</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">equivalentNotion</span><span class="params">(<span class="keyword">void</span>(*visit)(binaryTreeNode&lt;E&gt;*))</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inOrderWithoutRecursion</span><span class="params">(<span class="keyword">void</span>(*visit)(binaryTreeNode&lt;E&gt;*))</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">postOrderWithoutRecursion</span><span class="params">(<span class="keyword">void</span>(*visit)(binaryTreeNode&lt;E&gt;*))</span></span>;</span><br></pre></td></tr></table></figure></li>
<li><p><input disabled="" type="checkbox">  Page281、T33，34，35，三题思路一致，一起写。与此同时解决了T15-19(自己调用下就行了。爽欸都不用单独画图然后md了)，也不再单独说了。</p>
</li>
<li><p>T33:已知前序和中序求后序:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="keyword">void</span> linkedBinaryTree&lt;E&gt;::initWithPreOrderAndInOrder(E* pre, E* in, <span class="keyword">int</span> theSize)</span><br><span class="line">&#123;</span><br><span class="line">	treeSize = theSize;</span><br><span class="line">	root = initWithPreOrderAndInOrder(pre, <span class="number">0</span>, theSize - <span class="number">1</span>, in, <span class="number">0</span>, theSize - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> E&gt;</span><br><span class="line">binaryTreeNode&lt;E&gt;* linkedBinaryTree&lt;E&gt;::initWithPostOrderAndInOrder(E* post, <span class="keyword">int</span> pStart, <span class="keyword">int</span> pEnd, E* in, <span class="keyword">int</span> inStart, <span class="keyword">int</span> inEnd)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (pStart &gt; pEnd || inStart &gt; inEnd) <span class="keyword">return</span> <span class="literal">nullptr</span>; <span class="comment">// The end of recursion</span></span><br><span class="line">	binaryTreeNode&lt;E&gt;* newNode = <span class="keyword">new</span> binaryTreeNode&lt;E&gt;(post[pEnd]);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = inStart; i &lt;= inEnd; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (in[i] == post[pEnd]) &#123;</span><br><span class="line">			newNode-&gt;left = initWithPostOrderAndInOrder(post, pStart, pStart + i - inStart - <span class="number">1</span>, in, inStart, i - <span class="number">1</span>);</span><br><span class="line">			newNode-&gt;right = initWithPostOrderAndInOrder(post, pStart + i - inStart, pEnd - <span class="number">1</span>, in, i + <span class="number">1</span>, inEnd);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> newNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>T34:已知后序和中序求前序:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> E&gt;</span><br><span class="line">binaryTreeNode&lt;E&gt;* linkedBinaryTree&lt;E&gt;::initWithPostOrderAndInOrder(E* post, <span class="keyword">int</span> pStart, <span class="keyword">int</span> pEnd, E* in, <span class="keyword">int</span> inStart, <span class="keyword">int</span> inEnd)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (pStart &gt; pEnd || inStart &gt; inEnd) <span class="keyword">return</span> <span class="literal">nullptr</span>; <span class="comment">// The end of recursion</span></span><br><span class="line">	binaryTreeNode&lt;E&gt;* newNode = <span class="keyword">new</span> binaryTreeNode&lt;E&gt;(post[pEnd]);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = inStart; i &lt;= inEnd; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (in[i] == post[pEnd]) &#123;</span><br><span class="line">			newNode-&gt;left = initWithPostOrderAndInOrder(post, pStart, pStart + i - inStart - <span class="number">1</span>, in, inStart, i - <span class="number">1</span>);</span><br><span class="line">			newNode-&gt;right = initWithPostOrderAndInOrder(post, pStart + i - inStart, pEnd - <span class="number">1</span>, in, i + <span class="number">1</span>, inEnd);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> newNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="keyword">void</span> linkedBinaryTree&lt;E&gt;::initWithPostOrderAndInOrder(E* post, E* in, <span class="keyword">int</span> theSize)</span><br><span class="line">&#123;</span><br><span class="line">	treeSize = theSize;</span><br><span class="line">	root = initWithPostOrderAndInOrder(post, <span class="number">0</span>, theSize - <span class="number">1</span>, in, <span class="number">0</span>, theSize - <span class="number">1</span>);;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Tips: 同样要记得加声明啊喂!</p>
</blockquote>
</li>
<li><p>T35:已知后序和前序可以求中序，当且仅当以每个节点度为0或者2。(突如其来的机工腔)</p>
<blockquote>
<p>当存在度为1的节点时不一定能唯一确定一棵树，我们可以从仅含两个节点的树设想,以下结论恒成立:一个仅含2个节点的树，左偏的前序遍历、后序遍历和右偏相同。可以以第19题作为例子自己体会。</p>
</blockquote>
</li>
<li><p>时间复杂度</p>
</li>
<li><p>对于已知前序和中序时，最坏情况下，二叉树的各个节点均只有左子树，此时有:<br>$$ T(n) = T(n-1) + c_1\times n $$<br>$$ = T(n-1) + c_1\times n + c_2\times (n-1) $$<br>$$ = …… $$<br>$$ = T(0) + \dfrac {n\times (n+1)}{2} $$<br>$$ = O(n^2). $$</p>
</li>
<li><p>平均情况下，二叉树为满二叉树，此时:<br>$$ T(n) = 2\times T(\dfrac {n}{2}) + \dfrac {c\times n}{2} $$<br>由<strong>master’s theory</strong>知:<br>$$ T(n) = \varTheta (n\times \log n). $$</p>
<blockquote>
<p>Tips:master’s theory，又称主定理，具体可参考博文:主定理的应用。</p>
</blockquote>
</li>
<li><p>T36: 输入后缀表达式，构造二叉树表示:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// make a tree by reverse poland notion, pass an array</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="keyword">void</span> linkedBinaryTree&lt;E&gt;::makeTreeByReversePolandNotion(E* rPoland, <span class="keyword">int</span> theSize)</span><br><span class="line">&#123;</span><br><span class="line">	treeSize = theSize;</span><br><span class="line">	arrayStack&lt;binaryTreeNode&lt;E&gt;*&gt; treeBucket; <span class="comment">// preserve subtrees</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; theSize; i++) &#123;</span><br><span class="line">		binaryTreeNode&lt;E&gt;* tempTree = <span class="keyword">new</span> binaryTreeNode&lt;E&gt;(rPoland[i]); <span class="comment">// default: left-null,right-null</span></span><br><span class="line">		<span class="keyword">if</span> (rPoland[i] &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; rPoland[i] &lt;= <span class="string">&#x27;9&#x27;</span>) treeBucket.push(tempTree);</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> (treeBucket.size() == <span class="number">1</span>) &#123;</span><br><span class="line">				tempTree-&gt;right = treeBucket.top();</span><br><span class="line">				treeBucket.pop();</span><br><span class="line">				treeBucket.push(tempTree);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				tempTree-&gt;right = treeBucket.top();</span><br><span class="line">				treeBucket.pop();</span><br><span class="line">				tempTree-&gt;left = treeBucket.top();</span><br><span class="line">				treeBucket.pop();</span><br><span class="line">				treeBucket.push(tempTree);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	root = treeBucket.top();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>如上实现是存在问题的，请你根据自己的理解进行修改(问题并不在程序逻辑，逻辑本身完全正确)。</p>
</li>
<li><p>T37: 用前缀表达式构造二叉树</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>T38: 后缀表达式转完全括号化的中缀表达式</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>实际上后缀表达式就是对表达式树进行后序遍历的结果，前缀表达式就是前序遍历的结果，中序同理。</p>
<blockquote>
<p>Tips:对前中后缀表达式不熟悉的话可以去栈章节找到关于前中后缀表达式的解释和实现。</p>
</blockquote>
</li>
<li><p>T40、T41参考栈章节，此处不再表述。</p>
</li>
<li><p>T42: 由中缀表达式得到二叉树形式</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>T43:计算后缀表达式的值，参考栈(稍作修改)，不再表述。</p>
</li>
</ul>
<h2 id="习题答案，P284、285"><a href="#习题答案，P284、285" class="headerlink" title="习题答案，P284、285"></a>习题答案，P284、285</h2><ul>
<li><input disabled="" type="checkbox"> Page284,T44:复制构造函数。<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> E&gt;</span><br><span class="line">linkedBinaryTree&lt;E&gt;::linkedBinaryTree(<span class="keyword">const</span> linkedBinaryTree&lt;E&gt;&amp; theTree)</span><br><span class="line">&#123;</span><br><span class="line">	copy(root, theTree.root);</span><br><span class="line">	treeSize = theTree.treeSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="keyword">void</span> linkedBinaryTree&lt;E&gt;::copy(binaryTreeNode&lt;E&gt;*&amp; subTree1, binaryTreeNode&lt;E&gt;* subTree2)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (subTree2 == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">	subTree1 = <span class="keyword">new</span> binaryTreeNode&lt;E&gt;(subTree2-&gt;element);</span><br><span class="line">	copy(subTree1-&gt;left, subTree2-&gt;left);</span><br><span class="line">	copy(subTree1-&gt;right, subTree2-&gt;right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Tips:非递归写法自行实现。</p>
</blockquote>
</li>
<li><input disabled="" type="checkbox"> Page284,T45:比较两棵树。<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">compare</span><span class="params">(<span class="keyword">const</span> linkedBinaryTree&lt;E&gt;&amp; theTree)</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> compare(root, theTree.root); &#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">compare</span><span class="params">(binaryTreeNode&lt;E&gt;* subTree1,binaryTreeNode&lt;E&gt;* subTree2)</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="keyword">bool</span> linkedBinaryTree&lt;E&gt;::compare(binaryTreeNode&lt;E&gt;* subTree1, binaryTreeNode&lt;E&gt;* subTree2) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (subTree1 == <span class="literal">nullptr</span> &amp;&amp; subTree2 != <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">if</span> (subTree1 != <span class="literal">nullptr</span> &amp;&amp; subTree2 == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">if</span> (subTree1 == <span class="literal">nullptr</span> &amp;&amp; subTree2 == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">if</span> (subTree1-&gt;element != subTree2-&gt;element) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">return</span> compare(subTree1-&gt;left, subTree2-&gt;left) &amp;&amp; compare(subTree1-&gt;right, subTree2-&gt;right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>时间复杂度:$$O(n).$$<blockquote>
<p>Tips:非递归写法自行实现。</p>
</blockquote>
</li>
<li><input disabled="" type="checkbox"> Page284,T46:交换每个节点的左右子树。<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swapTrees</span><span class="params">()</span> </span>&#123; swapTrees(root-&gt;left, root-&gt;right); &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swapTrees</span><span class="params">(binaryTreeNode&lt;E&gt;*&amp; subTree1, binaryTreeNode&lt;E&gt;*&amp; subTree2)</span></span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="keyword">void</span> linkedBinaryTree&lt;E&gt;::swapTrees(binaryTreeNode&lt;E&gt;*&amp; subTree1, binaryTreeNode&lt;E&gt;*&amp; subTree2)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (subTree1 == <span class="literal">nullptr</span> &amp;&amp; subTree2 == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">	swap(subTree1, subTree2);</span><br><span class="line">	<span class="keyword">if</span> (subTree1 != <span class="literal">nullptr</span>) swapTrees(subTree1-&gt;left, subTree1-&gt;right);</span><br><span class="line">	<span class="keyword">if</span> (subTree2 != <span class="literal">nullptr</span>) swapTrees(subTree2-&gt;left, subTree2-&gt;right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>时间复杂度$$O(n).$$<blockquote>
<p>Tips:非递归写法自行实现。</p>
</blockquote>
</li>
<li><input disabled="" type="checkbox"> Page284,T47:计算左右子树的最大高度差。<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxHeightDifference</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> maxHeightDifference(root-&gt;left,root-&gt;right); &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxHeightDifference</span><span class="params">(binaryTreeNode&lt;E&gt;* subTree1, binaryTreeNode&lt;E&gt;* subTree2)</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="keyword">int</span> linkedBinaryTree&lt;E&gt;::maxHeightDifference(binaryTreeNode&lt;E&gt;* subTree1, binaryTreeNode&lt;E&gt;* subTree2) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (subTree1 == <span class="literal">nullptr</span>) <span class="keyword">return</span> height(subTree2);</span><br><span class="line">	<span class="keyword">if</span> (subTree2 == <span class="literal">nullptr</span>) <span class="keyword">return</span> height(subTree1);</span><br><span class="line">	<span class="keyword">int</span> h1 = height(subTree1);</span><br><span class="line">	<span class="keyword">int</span> h2 = height(subTree2);</span><br><span class="line">	<span class="keyword">return</span> max(<span class="built_in">abs</span>(h1 - h2), max(maxHeightDifference(subTree1-&gt;left, subTree1-&gt;right), maxHeightDifference(subTree2-&gt;left, subTree2-&gt;right)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>时间复杂度:<br>$$T(h) = 2T(h-1)+h$$<br>$$ = 4T(h-2)+2\times(h-1)+h$$<br>$$……$$<br>$$ = 2^hT(0)+h+2^2 \times(h-1)+2^4 \times(h-2)+…..2^{h-1} \times 1 $$<br>$$ h = \log n,T(0) = \varTheta (1) $$<br>$$ 得T(h) = O(n^2\times \log n). $$</li>
<li><input disabled="" type="checkbox"> Page284,T48:</li>
</ul>
<h2 id="信号放大器"><a href="#信号放大器" class="headerlink" title="信号放大器"></a>信号放大器</h2><ul>
<li><p><input disabled="" type="checkbox">  信号放大器使得节点的信号值与源点相同。</p>
</li>
<li><p>关于信号放大器的细节参见教材。</p>
</li>
<li><p>信号是一种抽象概念，它可以指代诸多事物。</p>
</li>
<li><p>书本上的信号放大器以二叉树表示，实际中网络会更加庞大复杂，此时树可以是多叉树。具体实现可以用孩子-兄弟表示法等等。</p>
</li>
<li><p>信号放大器每个节点有: $$degradeToLeaf(i) = \max\limits_{j是i的一个孩子}\lbrace degradeToLeaf(j)+degradeFromParent(j) \rbrace$$</p>
</li>
<li><p>当某点degradeToLeaf大于容忍值时，应该在此点放置信号放大器。</p>
</li>
<li><p>算法伪码如下(书上那个不叫伪代码吧…)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> node = <span class="number">0</span> --&gt; n <span class="keyword">do</span></span><br><span class="line">	degradeToLeaf(node) &lt;-- <span class="number">0</span></span><br><span class="line">end <span class="keyword">for</span></span><br><span class="line"><span class="keyword">for</span> child of each node <span class="keyword">do</span></span><br><span class="line">	<span class="keyword">if</span> degradeToLeaf(i)+degradeFromParent(j) &gt; 容忍值 then</span><br><span class="line">		degradeToLeaf(i) &lt;-- max&#123; degradeToLeaf(i),degradeFromParent(j) &#125;	</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		degradeToLeaf(i) &lt;-- max&#123; degradeToLeaf(i),degradeFromParent(j)+degradeToLeaf(j) &#125;</span><br><span class="line">	end <span class="keyword">if</span></span><br></pre></td></tr></table></figure></li>
<li><p>接下来照搬书上的源代码。</p>
</li>
<li><p>每个节点的数据域定义</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="并查集及其应用-某OJ上的奇妙经历"><a href="#并查集及其应用-某OJ上的奇妙经历" class="headerlink" title="并查集及其应用: 某OJ上的奇妙经历"></a>并查集及其应用: 某OJ上的奇妙经历</h2></li>
<li><p><input disabled="" type="checkbox">  并查集解决的是一类不相交集合的合并和查找问题。</p>
</li>
<li><p>书上的代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// O(fu)</span></span><br><span class="line"><span class="keyword">int</span>* parent;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initialize</span><span class="params">(<span class="keyword">int</span> numberOfElements)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	parent = <span class="keyword">new</span> <span class="keyword">int</span>[numberOfElements + <span class="number">1</span>];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= numberOfElements; i++) parent[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> theElement)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">while</span> (parent[theElement] != <span class="number">0</span>)</span><br><span class="line">		theElement = parent[theElement];</span><br><span class="line">	<span class="keyword">return</span> theElement;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unite</span><span class="params">(<span class="keyword">int</span> rootA, <span class="keyword">int</span> rootB)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	parent[rootB] = rootA;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入元素个数:&quot;</span>;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	initialize(n);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入操作 1)查找 2)合并:&quot;</span>;</span><br><span class="line">	<span class="keyword">int</span> opt;</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; opt) &#123;</span><br><span class="line">		<span class="keyword">if</span> (opt == <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="keyword">int</span> theElement;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入待查找的元素:&quot;</span>;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; theElement;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; theElement &lt;&lt; <span class="string">&quot; 的根是:&quot;</span> &lt;&lt; find(theElement) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(opt == <span class="number">2</span>)&#123;</span><br><span class="line">			<span class="keyword">int</span> theElementA, theElementB;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入两个元素，合并它们所属的集合:&quot;</span>;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; theElementA &gt;&gt; theElementB;</span><br><span class="line">			<span class="keyword">int</span> rootA = find(theElementA);</span><br><span class="line">			<span class="keyword">int</span> rootB = find(theElementB);</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;合并集合 &quot;</span> &lt;&lt; rootA &lt;&lt; <span class="string">&quot; 和 &quot;</span> &lt;&lt; rootB &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">			unite(rootA, rootB);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入操作 1)查找 2)合并:&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Tips:未考虑程序鲁棒性。自行补充。</p>
</blockquote>
</li>
<li><p>时间复杂度: $$ O(fu) ，f是查找次数，u是合并次数。$$</p>
</li>
<li><p>重量规则和高度规则解决的实际上是如何选择合并后根节点的问题。</p>
</li>
<li><p>基于路径压缩和重量规则的实现。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// O(f)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// node</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">unionFindNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> parent;</span><br><span class="line">	<span class="keyword">bool</span> root;</span><br><span class="line">	unionFindNode() : parent(<span class="number">1</span>), root(<span class="literal">true</span>) &#123;&#125;</span><br><span class="line">&#125;*node;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initialize</span><span class="params">(<span class="keyword">int</span> numberOfElements)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	node = <span class="keyword">new</span> unionFindNode[numberOfElements + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find1</span><span class="params">(<span class="keyword">int</span> theElement)</span> <span class="comment">// without path compression</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">while</span> (!node[theElement].root)</span><br><span class="line">		theElement = node[theElement].parent;</span><br><span class="line">	<span class="keyword">return</span> theElement;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find2</span><span class="params">(<span class="keyword">int</span> theElement)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> theRoot = theElement;</span><br><span class="line">	<span class="keyword">while</span> (!node[theRoot].root)</span><br><span class="line">		theRoot = node[theRoot].parent;</span><br><span class="line">	<span class="keyword">while</span> (theElement != theRoot) &#123;</span><br><span class="line">		<span class="keyword">int</span> parentNode = node[theElement].parent;</span><br><span class="line">		node[theElement].parent = theRoot;</span><br><span class="line">		theElement = parentNode;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> theRoot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unite</span><span class="params">(<span class="keyword">int</span> rootA, <span class="keyword">int</span> rootB)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (node[rootA].parent &lt; node[rootB].parent) &#123;</span><br><span class="line">		node[rootB].parent += node[rootA].parent;</span><br><span class="line">		node[rootA].parent = rootB;</span><br><span class="line">		node[rootA].root = <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		node[rootA].parent += node[rootB].parent;</span><br><span class="line">		node[rootB].parent = rootA;</span><br><span class="line">		node[rootB].root = <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; 输入元素个数:&quot;</span>;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	initialize(n);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入操作 1)查找 2)合并:&quot;</span>;</span><br><span class="line">	<span class="keyword">int</span> opt;</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; opt) &#123;</span><br><span class="line">		<span class="keyword">if</span> (opt == <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="keyword">int</span> theElement;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入待查找的元素:&quot;</span>;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; theElement;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; theElement &lt;&lt; <span class="string">&quot; 的根是:&quot;</span> &lt;&lt; find2(theElement) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (opt == <span class="number">2</span>) &#123;</span><br><span class="line">			<span class="keyword">int</span> theElementA, theElementB;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入两个元素，合并它们所属的集合:&quot;</span>;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; theElementA &gt;&gt; theElementB;</span><br><span class="line">			<span class="keyword">int</span> rootA = find2(theElementA);</span><br><span class="line">			<span class="keyword">int</span> rootB = find2(theElementB);</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;合并集合 &quot;</span> &lt;&lt; rootA &lt;&lt; <span class="string">&quot; 和 &quot;</span> &lt;&lt; rootB &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">			unite(rootA, rootB);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入操作 1)查找 2)合并:&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>使用启发式合并(重量规则)和路径压缩后为:$$O(f)，假设f&gt; u。$$</p>
</li>
<li><p>仅使用启发式合并为$$O(f\log n)。$$</p>
</li>
<li><p><input disabled="" type="checkbox">  切题环节:此部分不推荐花大量时间做，可以当作兴趣。<del>放在这纯粹是好玩</del>。</p>
</li>
<li><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1213"><strong>How many tables(HDUOJ)</strong></a>:ACM省选热身赛</p>
</li>
<li><p>参考题解</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1000</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> friends[maxn];</span><br><span class="line"><span class="keyword">int</span> M;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initialize</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= M; i++) friends[i] = i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> aFriend)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> theRoot = aFriend;</span><br><span class="line">	<span class="keyword">while</span> (theRoot != friends[theRoot])</span><br><span class="line">		theRoot = friends[theRoot];</span><br><span class="line">	<span class="keyword">while</span> (aFriend != theRoot) &#123;</span><br><span class="line">		<span class="keyword">int</span> itsParent = friends[aFriend];</span><br><span class="line">		friends[aFriend] = theRoot;</span><br><span class="line">		aFriend = itsParent;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> theRoot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unite</span><span class="params">(<span class="keyword">int</span> rootA, <span class="keyword">int</span> rootB)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (rootA == rootB) <span class="keyword">return</span>;</span><br><span class="line">	friends[rootB] = rootA;</span><br><span class="line">	M--; <span class="comment">// after each unite: M--</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">	<span class="keyword">while</span> (T--) &#123;</span><br><span class="line">		<span class="keyword">int</span> N;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; M &gt;&gt; N;</span><br><span class="line">		initialize();</span><br><span class="line">		<span class="keyword">while</span> (N--) &#123;</span><br><span class="line">			<span class="keyword">int</span> fA, fB;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; fA &gt;&gt; fB;</span><br><span class="line">			<span class="keyword">int</span> rootA = find(fA);</span><br><span class="line">			<span class="keyword">int</span> rootB = find(fB);</span><br><span class="line">			unite(rootA, rootB);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; M &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Tips:此题没有用重量规则。</p>
</blockquote>
</li>
<li><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1232"><strong>畅通工程(HDUOJ)</strong></a>:浙大研究生复试上机考</p>
</li>
<li><p>参考题解</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">roadNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> parent;</span><br><span class="line">	<span class="keyword">bool</span> root;</span><br><span class="line">	roadNode() : parent(<span class="number">1</span>), root(<span class="literal">true</span>) &#123;&#125;</span><br><span class="line">&#125;*towns;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initiaize</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	towns = <span class="keyword">new</span> roadNode[N + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> theTown)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> theRoot = theTown;</span><br><span class="line">	<span class="keyword">while</span> (!towns[theRoot].root)</span><br><span class="line">		theRoot = towns[theRoot].parent;</span><br><span class="line">	<span class="keyword">while</span> (theTown != theRoot) &#123;</span><br><span class="line">		<span class="keyword">int</span> parentTown = towns[theTown].parent;</span><br><span class="line">		towns[theTown].parent = theRoot;</span><br><span class="line">		theTown = parentTown;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> theRoot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unite</span><span class="params">(<span class="keyword">int</span> theTown1, <span class="keyword">int</span> theTown2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (theTown1 == theTown2) <span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">if</span> (towns[theTown1].parent &lt; towns[theTown2].parent) &#123;</span><br><span class="line">		towns[theTown2].parent += towns[theTown1].parent;</span><br><span class="line">		towns[theTown1].parent = theTown2;</span><br><span class="line">		towns[theTown1].root = <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		towns[theTown1].parent += towns[theTown2].parent;</span><br><span class="line">		towns[theTown2].parent = theTown1;</span><br><span class="line">		towns[theTown2].root = <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	N--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line">	<span class="keyword">while</span> (N) &#123;</span><br><span class="line">		initiaize();</span><br><span class="line">		<span class="keyword">int</span> M;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; M;</span><br><span class="line">		<span class="keyword">while</span> (M--) &#123;</span><br><span class="line">			<span class="keyword">int</span> t1, t2;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; t1 &gt;&gt; t2;</span><br><span class="line">			<span class="keyword">int</span> root1 = find(t1);</span><br><span class="line">			<span class="keyword">int</span> root2 = find(t2);</span><br><span class="line"> 			unite(root1, root2);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; N - <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">delete</span>[]towns;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Tips:用scanf读入速度更快。(大约是cin的$\dfrac {1}{4}$)</p>
</blockquote>
</li>
<li><p><a href="https://leetcode-cn.com/problems/longest-consecutive-sequence/"><strong>最长连续序列</strong></a>:leetcode</p>
</li>
<li><p>参考题解</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">waiting <span class="keyword">for</span> supplement......</span><br></pre></td></tr></table></figure></li>
<li><p><a href="https://leetcode-cn.com/problems/number-of-islands/"><strong>岛屿数量</strong></a>:leetcode</p>
</li>
<li><p>参考题解1:Oh首先想到的难道真的是UF吗……康康BFS</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numIslands</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> offset[<span class="number">4</span>][<span class="number">2</span>] = &#123; &#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125; &#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; grid.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; grid[i].size(); j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">                    grid[i][j] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                    <span class="built_in">queue</span>&lt;<span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; land;</span><br><span class="line">                    land.push(<span class="built_in">make_pair</span>(i, j));</span><br><span class="line">                    <span class="keyword">while</span> (!land.empty()) &#123;</span><br><span class="line">                        <span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; xy = land.front();</span><br><span class="line">                        land.pop();</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</span><br><span class="line">                            <span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; newXy;</span><br><span class="line">                            newXy.first = xy.first + offset[k][<span class="number">0</span>];</span><br><span class="line">                            newXy.second = xy.second + offset[k][<span class="number">1</span>];</span><br><span class="line">                            <span class="keyword">if</span> (newXy.first &gt;= <span class="number">0</span> &amp;&amp; newXy.first &lt; grid.size() &amp;&amp; newXy.second &gt;= <span class="number">0</span> &amp;&amp; newXy.second &lt; grid[i].size()) &#123;</span><br><span class="line">                                <span class="keyword">if</span> (grid[newXy.first][newXy.second] == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">                                    land.push(newXy);</span><br><span class="line">                                    grid[newXy.first][newXy.second] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    cnt++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li><p>时间复杂度:$$O(n^2).$$</p>
</li>
<li><p>哦那试试DFS?</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt;&amp; grid,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x &lt; <span class="number">0</span> || x &gt;= grid.size() || y &lt; <span class="number">0</span> || y &gt;= grid[x].size() || grid[x][y] == <span class="string">&#x27;0&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line">        grid[x][y] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        dfs(grid,x,y+<span class="number">1</span>);</span><br><span class="line">        dfs(grid,x+<span class="number">1</span>,y);</span><br><span class="line">        dfs(grid,x,y<span class="number">-1</span>);</span><br><span class="line">        dfs(grid,x<span class="number">-1</span>,y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numIslands</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; grid.size();i++)&#123;</span><br><span class="line">           <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; grid[i].size();j++)&#123;</span><br><span class="line">               <span class="keyword">if</span>(grid[i][j] == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">                   dfs(grid,i,j);</span><br><span class="line">                   cnt++;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li><p>时间复杂度$$O(n^2).$$</p>
</li>
<li><p>并查集写法</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">waiting <span class="keyword">for</span> supplement......</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="习题答案，P295，296"><a href="#习题答案，P295，296" class="headerlink" title="习题答案，P295，296"></a>习题答案，P295，296</h2><h2 id="优先级队列"><a href="#优先级队列" class="headerlink" title="优先级队列"></a>优先级队列</h2><ul>
<li><p><input disabled="" type="checkbox">  优先级队列中的各个元素按照优先级(根据一定规则得到的重要程度)排列。</p>
</li>
<li><p>书上的基本实现</p>
</li>
<li><p>定制的异常类</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> EXCEPTION_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EXCEPTION_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">illegalOperation</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	illegalOperation(<span class="keyword">const</span> <span class="built_in">string</span>&amp; errMsg = <span class="string">&quot;operation error!&quot;</span>) : error(errMsg) &#123;&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="built_in">string</span> error;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></li>
<li><p>抽象类</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MAX_PRIORITY_QUEUE_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_PRIORITY_QUEUE_H_</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">maxPriorityQueue</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">virtual</span> ~maxPriorityQueue() &#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> T&amp; <span class="title">top</span><span class="params">()</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">const</span> T&amp; theElement)</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></li>
<li><p>大根堆(小根堆一样的方法)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MAXHEAP_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXHEAP_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;maxPriorityQueue.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;exception.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::copy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @copyright: all rights reserved.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @author: Joe-sdu</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @date: Nov.18.2020</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">maxHeap</span> :</span> <span class="keyword">public</span> maxPriorityQueue&lt;T&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	maxHeap();</span><br><span class="line">	~maxHeap() &#123; <span class="keyword">delete</span>[]heap; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> heapSize == <span class="number">0</span>; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> heapSize; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function">T&amp; <span class="title">top</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">const</span> T&amp; theElement)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">initialize</span><span class="params">(T* theHeap, <span class="keyword">int</span> theSize)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	T* heap;</span><br><span class="line">	<span class="keyword">int</span> heapSize;</span><br><span class="line">	<span class="keyword">int</span> arrLength;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">changeLength1D</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">maxHeap&lt;T&gt;::maxHeap() <span class="comment">// avoid dangling pointer</span></span><br><span class="line">&#123;</span><br><span class="line">	heap = <span class="keyword">new</span> T[<span class="number">1</span>];</span><br><span class="line">	heapSize = <span class="number">0</span>;</span><br><span class="line">	arrLength = <span class="number">1</span>; <span class="comment">// default 1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">void</span> maxHeap&lt;T&gt;::changeLength1D()</span><br><span class="line">&#123;</span><br><span class="line">	T* temp = <span class="keyword">new</span> T[<span class="number">2</span> * arrLength];</span><br><span class="line">	copy(heap, heap + arrLength, temp);</span><br><span class="line">	arrLength *= <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">delete</span>[]heap;</span><br><span class="line">	heap = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">void</span> maxHeap&lt;T&gt;::pop()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (heapSize == <span class="number">0</span>) <span class="keyword">throw</span> illegalOperation(<span class="string">&quot;can&#x27;t pop from an empty tree!&quot;</span>);</span><br><span class="line">	heap[<span class="number">1</span>].~T();</span><br><span class="line">	T lastElement = heap[heapSize--];</span><br><span class="line">	<span class="keyword">int</span> currNode = <span class="number">1</span>, child = <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">while</span> (child &lt;= heapSize) &#123;</span><br><span class="line">		<span class="keyword">if</span> (child &lt; heapSize &amp;&amp; heap[child] &lt; heap[child + <span class="number">1</span>]) child++;</span><br><span class="line">		<span class="keyword">if</span> (lastElement &gt;= heap[child]) <span class="keyword">break</span>;</span><br><span class="line">		heap[currNode] = heap[child];</span><br><span class="line">		currNode = child;</span><br><span class="line">		child *= <span class="number">2</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	heap[currNode] = lastElement;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">T&amp; maxHeap&lt;T&gt;::top() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (heapSize == <span class="number">0</span>) <span class="keyword">throw</span> illegalOperation(<span class="string">&quot;heap is empty!&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> heap[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">void</span> maxHeap&lt;T&gt;::push(<span class="keyword">const</span> T&amp; theElement)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (heapSize == arrLength - <span class="number">1</span>) changeLength1D();</span><br><span class="line">	<span class="keyword">int</span> currNode = ++heapSize;</span><br><span class="line">	<span class="keyword">while</span> (currNode != <span class="number">1</span> &amp;&amp; heap[currNode / <span class="number">2</span>] &lt; theElement) &#123;</span><br><span class="line">		heap[currNode] = heap[currNode / <span class="number">2</span>];</span><br><span class="line">		currNode /= <span class="number">2</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	heap[currNode] = theElement;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">void</span> maxHeap&lt;T&gt;::initialize(T* theHeap, <span class="keyword">int</span> theSize)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">delete</span>[]heap;</span><br><span class="line">	heap = theHeap;</span><br><span class="line">	heapSize = theSize;</span><br><span class="line">	arrLength = theSize + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> root = theSize / <span class="number">2</span>; root &gt;= <span class="number">1</span>; root--) &#123;</span><br><span class="line">		T rootElement = heap[root];</span><br><span class="line">		<span class="keyword">int</span> child = <span class="number">2</span> * root;</span><br><span class="line">		<span class="keyword">while</span> (child &lt;= heapSize) &#123;</span><br><span class="line">			<span class="keyword">if</span> (child &lt; heapSize &amp;&amp; heap[child] &lt; heap[child + <span class="number">1</span>]) child++;</span><br><span class="line">			<span class="keyword">if</span> (rootElement &gt;= heap[child]) <span class="keyword">break</span>;</span><br><span class="line">			heap[child / <span class="number">2</span>] = heap[child];</span><br><span class="line">			child *= <span class="number">2</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		heap[child / <span class="number">2</span>] = rootElement;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></li>
<li><p>各方法时间复杂度:</p>
</li>
<li><p>empty、size和top均为$$\varTheta(1).$$</p>
</li>
<li><p>pop和push均为$$O(\log n).$$</p>
</li>
<li><p>initialize为$$O(n).$$</p>
</li>
<li><p>大根堆的各项操作的性质都挺好。</p>
</li>
<li><p><input disabled="" type="checkbox">  完善我们的大根堆</p>
</li>
<li><p>赋值构造函数和拷贝控制成员</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">maxHeap&lt;T&gt;::maxHeap(<span class="keyword">const</span> maxHeap&lt;T&gt;&amp; theHeap)</span><br><span class="line">&#123;</span><br><span class="line">	heapSize = theHeap.heap;</span><br><span class="line">	arrLength = theHeap.arrLength;</span><br><span class="line">	heap = <span class="keyword">new</span> T[arrLength];</span><br><span class="line">	copy(theHeap.heap, theHeap.heap + heapSize + <span class="number">2</span>, heap);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">maxHeap&lt;T&gt;&amp; maxHeap&lt;T&gt;::<span class="keyword">operator</span>=(<span class="keyword">const</span> maxHeap&lt;T&gt;&amp; theHeap)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">delete</span>[]heap;</span><br><span class="line">	heapSize = theHeap.heapSize;</span><br><span class="line">	arrLength = theHeap.arrLength;</span><br><span class="line">	heap = <span class="keyword">new</span> T[arrLength];</span><br><span class="line">	copy(theHeap.heap, theHeap.heap + heapSize + <span class="number">2</span>, heap);</span><br><span class="line">	<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="习题答案P305、306"><a href="#习题答案P305、306" class="headerlink" title="习题答案P305、306"></a>习题答案P305、306</h2></li>
<li><p><input disabled="" type="checkbox">  Page305、306，T6-9、11直接采用上面给出的类就可以解决。</p>
<blockquote>
<p>Tips: 要打印出6.2所说的树形很简单，循环控制格式就行。</p>
</blockquote>
</li>
<li><p><input disabled="" type="checkbox">  Page306，T12</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">void</span> maxHeap&lt;T&gt;::changeMax(<span class="keyword">const</span> T&amp; newElement)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (heapSize == <span class="number">0</span>) <span class="keyword">throw</span> illegalOperation(<span class="string">&quot;can&#x27;t carry out this operation on an empty tree!&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span> (newElement &gt;= heap[<span class="number">1</span>]) &#123;</span><br><span class="line">		heap[<span class="number">1</span>] = newElement;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	heap[<span class="number">1</span>] = newElement;</span><br><span class="line">	<span class="keyword">int</span> currNode = <span class="number">1</span>, child = <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">while</span> (child &lt;= heapSize) &#123;</span><br><span class="line">		<span class="keyword">if</span> (child &lt; heapSize &amp;&amp; heap[child] &lt; heap[child + <span class="number">1</span>]) child++;</span><br><span class="line">		<span class="keyword">if</span> (newElement &gt;= heap[child]) <span class="keyword">break</span>;</span><br><span class="line">		heap[currNode] = heap[child];</span><br><span class="line">		currNode = child;</span><br><span class="line">		child *= <span class="number">2</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	heap[currNode] = newElement;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Tips:记得加入公有声明changeMax。</p>
</blockquote>
</li>
<li><p><input disabled="" type="checkbox">  最大高度优先左高树</p>
</li>
<li><p>一棵树被称为高度优先左高树，当且仅当它每个节点左孩子的s值都不小于右孩子的s值。s值是从该节点到外部节点的最短路径。</p>
</li>
<li><p>书上给出的maxHblt的实现就很好了，我们直接给出再增补方法。</p>
</li>
<li><p>实现用到了队列，请自行参考队列章节文章。</p>
</li>
<li><p>书上的实现</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p><input disabled="" type="checkbox">  堆排序</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> HEAPSORT_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HEAPSORT_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;maxHeap.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">auto heapSort(T* arr, int theSize) -&gt; T*</span><br><span class="line">&#123;</span><br><span class="line">	maxHeap&lt;T&gt; theHeap;</span><br><span class="line">	T* b = <span class="keyword">new</span> T[theSize + <span class="number">1</span>];</span><br><span class="line">	theHeap.initialize(arr, theSize);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = theSize; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">		b[i] = theHeap.top();</span><br><span class="line">		theHeap.pop();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></li>
<li><p>时间复杂度:$$O(n\log n)$$</p>
</li>
<li><p><input disabled="" type="checkbox">  机器调度</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MACHINE_SCHEDULE_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MACHINE_SCHEDULE_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;heapSort.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;minHeap.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">jobNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> jobId, time;</span><br><span class="line">	jobNode(<span class="keyword">int</span> id = <span class="number">1</span>, <span class="keyword">int</span> initT = <span class="number">0</span>) : jobId(id), time(initT) &#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">operator</span> <span class="title">int</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> time; &#125;</span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span>&gt;=(<span class="keyword">const</span> jobNode&amp; job) &#123; <span class="keyword">return</span> time &gt;= job.time; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">machineNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> machineId, avail;</span><br><span class="line">	machineNode(<span class="keyword">int</span> id = <span class="number">1</span>, <span class="keyword">int</span> initT = <span class="number">0</span>) : machineId(id), avail(initT) &#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">operator</span> <span class="title">int</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> avail; &#125;</span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span>&lt;=(<span class="keyword">const</span> machineNode&amp; machine) &#123; <span class="keyword">return</span> avail &lt;= machine.avail; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">makeSchedule</span><span class="params">(jobNode jobs[], <span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (n &lt;= m) &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;shecdule each job to 1 machine!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	jobNode* jobTemp = heapSort(jobs, n);</span><br><span class="line">	minHeap&lt;machineNode&gt; mHeap;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) mHeap.push(machineNode(i, <span class="number">0</span>));</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">		machineNode temp = mHeap.top();</span><br><span class="line">		mHeap.pop();</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;schedule &quot;</span> &lt;&lt; jobTemp[i].jobId &lt;&lt; <span class="string">&quot;  to &quot;</span> &lt;&lt; temp.machineId &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		temp.avail += jobTemp[i].time;</span><br><span class="line">		mHeap.push(temp);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>Tips:注意和书上实现的区别。minHeap自行实现(VS下用CF全局换，小于改大于，小于等于改大于等于即可)。</p>
</blockquote>
</li>
<li><p><input disabled="" type="checkbox">  霍夫曼编码</p>
</li>
<li><p>实现一个霍夫曼编码的过程要借助很多前面实现过的依赖类。但我们只给出新方法，其余类可以自己查找。</p>
</li>
<li><p>书上给的方法并不完整，而且有些细微错误。这里会根据自己的理解给出修改。同时也会适应前面写过的类。</p>
</li>
<li><p>我们实现的makeTree(参见此博文上方)会销毁掉传入的两棵树，所以huffman的方法和书上也对应有修改。</p>
</li>
<li><p>huffman Tree Node类型声明</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> HUFFMAN_NODE_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HUFFMAN_NODE_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;linkedBinaryTree.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">huffmanNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	T weight;</span><br><span class="line">	linkedBinaryTree&lt;<span class="keyword">int</span>&gt;* tree;</span><br><span class="line">	huffmanNode() : weight(<span class="number">0</span>), tree(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">operator</span> <span class="title">T</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> weight; &#125;</span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span>&lt;=(<span class="keyword">const</span> huffmanNode&amp; theNode) &#123; <span class="keyword">return</span> weight &lt;= theNode.weight; &#125;</span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span>&gt;(<span class="keyword">const</span> huffmanNode&amp; theNode) &#123; <span class="keyword">return</span> weight &gt; theNode.weight; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></li>
<li><p>huffman方法的实现</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> HUFFMANTREE_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HUFFMANTREE_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;linkedBinaryTree.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;huffmanNode.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;minHeap.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* @copyright: allrights reserved</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* @author: Joe-sdu</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* @date: Nov.19.2020</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function">linkedBinaryTree&lt;<span class="keyword">int</span>&gt;* <span class="title">huffmanTree</span><span class="params">(T weight[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	huffmanNode&lt;T&gt;* hNode = <span class="keyword">new</span> huffmanNode&lt;T&gt;[n + <span class="number">1</span>];</span><br><span class="line">	linkedBinaryTree&lt;<span class="keyword">int</span>&gt; emptyTree;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		hNode[i].weight = weight[i];</span><br><span class="line">		hNode[i].tree = <span class="keyword">new</span> linkedBinaryTree&lt;<span class="keyword">int</span>&gt;;</span><br><span class="line">		hNode[i].tree-&gt;makeTree(i, emptyTree, emptyTree);</span><br><span class="line">	&#125;</span><br><span class="line">	minHeap&lt;huffmanNode&lt;T&gt;&gt; heap;</span><br><span class="line">	heap.initialize(hNode, n);</span><br><span class="line">	huffmanNode&lt;T&gt;x, y, w;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">		x = heap.top(); heap.pop();</span><br><span class="line">		y = heap.top(); heap.pop();</span><br><span class="line">		w.weight = x.weight + y.weight;</span><br><span class="line">		w.tree = <span class="keyword">new</span> linkedBinaryTree&lt;<span class="keyword">int</span>&gt;;</span><br><span class="line">		w.tree-&gt;makeTree(<span class="number">0</span>, *x.tree, *y.tree);</span><br><span class="line">		heap.push(w);</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;合并树 &quot;</span> &lt;&lt; x.weight &lt;&lt; <span class="string">&quot; 和 &quot;</span> &lt;&lt; y.weight &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> heap.top().tree;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></li>
<li><p>时间复杂度: $$O(n \log n).$$</p>
</li>
</ul>
<h2 id="竞赛树"><a href="#竞赛树" class="headerlink" title="竞赛树"></a>竞赛树</h2><ul>
<li>这里给出最小赢者树的实现和输者树的实现。最大赢者树自行实现。</li>
<li>定制异常类<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> EXCEPTION_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EXCEPTION_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">illegalCompetition</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	illegalCompetition(<span class="keyword">const</span> <span class="built_in">string</span>&amp; errorMsg = <span class="string">&quot;can&#x27;t carry out this operation!&quot;</span>) : error(errorMsg) &#123;&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="built_in">string</span> error;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></li>
<li>竞赛树抽象类<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> WINNERTREE_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WINNERTREE_H_</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">winnerTree</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">virtual</span> ~winnerTree() &#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(T* thePlayer, <span class="keyword">int</span> numberOfPlayers)</span> </span>= <span class="number">0</span>;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">rePlay</span><span class="params">(<span class="keyword">int</span> thePlayer)</span> </span>= <span class="number">0</span>;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">winner</span><span class="params">()</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></li>
<li>赢者树实现<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> COMPLETE_WINNERTREE_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> COMPLETE_WINNERTREE_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;winnerTree.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;exception.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* @copyright: all rights reserved. </span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* @author: Joe-sdu</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* @date:Nov.20.2020</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">completeWinnerTree</span> :</span> <span class="keyword">public</span> winnerTree&lt;T&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	completeWinnerTree(T* thePlayers, <span class="keyword">int</span> theNumberOfPlayers) &#123; initialize(thePlayers, theNumberOfPlayers); &#125;</span><br><span class="line">	~completeWinnerTree() &#123; <span class="keyword">delete</span>[]tree; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">rePlay</span><span class="params">(<span class="keyword">int</span> thePlayer)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">winner</span><span class="params">(<span class="keyword">int</span> index)</span> <span class="keyword">const</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">winner</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> tree[<span class="number">1</span>]; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">outputStatus</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">int</span> offset;</span><br><span class="line">	<span class="keyword">int</span> numberOfPlayers;</span><br><span class="line">	<span class="keyword">int</span> lowExt;</span><br><span class="line">	T* players;  <span class="comment">// preserve players</span></span><br><span class="line">	<span class="keyword">int</span>* tree; <span class="comment">// preserve players&#x27; index</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">initialize</span><span class="params">(T* thePlayers, <span class="keyword">int</span> numberOfPlayers)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">play</span><span class="params">(<span class="keyword">int</span> matchNode, <span class="keyword">int</span> leftPlayer, <span class="keyword">int</span> rightPlayer)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">		1.The essensial point is: Players can be changed in main function, that is:</span></span><br><span class="line"><span class="comment">		they share a same block of memory.</span></span><br><span class="line"><span class="comment">		2.To get a winner we should first find their fighting field, which will soon</span></span><br><span class="line"><span class="comment">		welcome their new winner.</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">void</span> completeWinnerTree&lt;T&gt;::initialize(T* thePlayers, <span class="keyword">int</span> theNumberOfPlayers)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (theNumberOfPlayers &lt; <span class="number">2</span>) <span class="keyword">throw</span> illegalCompetition(<span class="string">&quot;can&#x27;t compete with player less than 2!&quot;</span>);</span><br><span class="line">	players = thePlayers;</span><br><span class="line">	numberOfPlayers = theNumberOfPlayers;</span><br><span class="line">	tree = <span class="keyword">new</span> <span class="keyword">int</span>[numberOfPlayers];</span><br><span class="line">	<span class="comment">// calculate offset，2^floor(log(n-1))</span></span><br><span class="line">	<span class="comment">// could use cmath file</span></span><br><span class="line">	<span class="keyword">int</span> s;</span><br><span class="line">	<span class="keyword">for</span> (s = <span class="number">1</span>; <span class="number">2</span> * s &lt;= numberOfPlayers - <span class="number">1</span>; s += s);</span><br><span class="line">	offset = <span class="number">2</span> * s - <span class="number">1</span>;</span><br><span class="line">	lowExt = <span class="number">2</span> * (numberOfPlayers - s);</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">2</span>; i &lt;= lowExt; i += <span class="number">2</span>) play((offset + i) / <span class="number">2</span>, i - <span class="number">1</span>, i);</span><br><span class="line">	<span class="keyword">if</span> (numberOfPlayers % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">		play(numberOfPlayers / <span class="number">2</span>, tree[numberOfPlayers - <span class="number">1</span>], lowExt + <span class="number">1</span>);</span><br><span class="line">		i = lowExt + <span class="number">3</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> i = lowExt + <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">for</span> (; i &lt;= numberOfPlayers; i += <span class="number">2</span>) play((numberOfPlayers - <span class="number">1</span> + i - lowExt) / <span class="number">2</span>, i - <span class="number">1</span>, i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">void</span> completeWinnerTree&lt;T&gt;::play(<span class="keyword">int</span> matchNode, <span class="keyword">int</span> leftPlayer, <span class="keyword">int</span> rightPlayer)</span><br><span class="line">&#123;</span><br><span class="line">	tree[matchNode] = players[leftPlayer] &lt;= players[rightPlayer] ?</span><br><span class="line">		leftPlayer : rightPlayer;</span><br><span class="line">	<span class="keyword">while</span> (matchNode % <span class="number">2</span> == <span class="number">1</span> &amp;&amp; matchNode &gt; <span class="number">1</span>) &#123;</span><br><span class="line">		tree[matchNode / <span class="number">2</span>] = players[tree[matchNode<span class="number">-1</span>]] &lt;= players[tree[matchNode]] ?</span><br><span class="line">			tree[matchNode - <span class="number">1</span>] : tree[matchNode];</span><br><span class="line">		matchNode /= <span class="number">2</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">void</span> completeWinnerTree&lt;T&gt;::rePlay(<span class="keyword">int</span> thePlayer)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (thePlayer &lt; <span class="number">1</span> || thePlayer &gt; numberOfPlayers) <span class="keyword">throw</span> illegalCompetition(<span class="string">&quot;thePlayer does not exist!&quot;</span>);</span><br><span class="line">	<span class="keyword">int</span> matchNode, leftPlayer, rightPlayer;</span><br><span class="line">	<span class="keyword">if</span> (thePlayer &lt;= lowExt) &#123;</span><br><span class="line">		matchNode = (offset + thePlayer) / <span class="number">2</span>;</span><br><span class="line">		leftPlayer = <span class="number">2</span> * matchNode - offset;</span><br><span class="line">		rightPlayer = leftPlayer + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		matchNode = (thePlayer - lowExt + numberOfPlayers - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">		<span class="keyword">if</span> (<span class="number">2</span> * matchNode == numberOfPlayers - <span class="number">1</span>) &#123;</span><br><span class="line">			leftPlayer = tree[<span class="number">2</span> * matchNode];</span><br><span class="line">			rightPlayer = leftPlayer + <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			leftPlayer = <span class="number">2</span> * matchNode - numberOfPlayers + <span class="number">1</span> + lowExt;</span><br><span class="line">			rightPlayer = leftPlayer + <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	tree[matchNode] = players[leftPlayer] &lt;= players[rightPlayer] ?</span><br><span class="line">		leftPlayer : rightPlayer;</span><br><span class="line">	<span class="keyword">if</span> (matchNode == numberOfPlayers - <span class="number">1</span> &amp;&amp; numberOfPlayers % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">		matchNode /= <span class="number">2</span>;</span><br><span class="line">		tree[matchNode] = players[tree[numberOfPlayers - <span class="number">1</span>]] &lt;= players[lowExt + <span class="number">1</span>] ?</span><br><span class="line">			tree[numberOfPlayers - <span class="number">1</span>] : lowExt + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (matchNode &gt; <span class="number">1</span>) &#123;</span><br><span class="line">		matchNode /= <span class="number">2</span>;</span><br><span class="line">		tree[matchNode] = players[tree[<span class="number">2</span> * matchNode]] &lt;= players[tree[<span class="number">2</span> * matchNode + <span class="number">1</span>]] ?</span><br><span class="line">			tree[<span class="number">2</span> * matchNode] : tree[<span class="number">2</span> * matchNode + <span class="number">1</span>];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">int</span> completeWinnerTree&lt;T&gt;::winner(<span class="keyword">int</span> index) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= numberOfPlayers) <span class="keyword">throw</span> illegalCompetition(<span class="string">&quot;index out of range!&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> tree[index];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">void</span> completeWinnerTree&lt;T&gt;::outputStatus() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;**************************************&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;|             WINNER TREE            |&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;**************************************&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;|             number:&quot;</span> &lt;&lt; numberOfPlayers &lt;&lt; <span class="string">&quot;               |&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;|		                     |&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;|             winner:&quot;</span> &lt;&lt; winner() &lt;&lt;   <span class="string">&quot;               |&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;|                                    |&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;|             value: &quot;</span> &lt;&lt; players[winner()] &lt;&lt; <span class="string">&quot;               |&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;|                                    |&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;**************************************&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></li>
<li>赢者树排序<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> WINNERSORT_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WINNERSORT_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;completeWinnerTree.h&quot;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = INT_MAX;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">winnerSort</span><span class="params">(T *players,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	T* temp = <span class="keyword">new</span> T[n + <span class="number">1</span>];</span><br><span class="line">	<span class="function">completeWinnerTree&lt;T&gt; <span class="title">sortTree</span><span class="params">(players, n)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123; <span class="comment">// order by type T, asc</span></span><br><span class="line">		<span class="keyword">int</span> tempWinner = sortTree.winner();</span><br><span class="line">		temp[i] = players[tempWinner];</span><br><span class="line">		players[tempWinner] = INF;</span><br><span class="line">		sortTree.rePlay(tempWinner);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) players[i] = temp[i];</span><br><span class="line">	<span class="keyword">delete</span>[]temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></li>
<li>时间复杂度:$$O(n\log n).$$</li>
<li>FF<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> FIRSTFIT_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FIRSTFIT_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;completeWinnerTree.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">binType</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> unUsedCapacity;</span><br><span class="line">	<span class="comment">// &lt;= standardize for owning weight</span></span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span>&lt;=(<span class="keyword">const</span> binType&amp; theBin) &#123; <span class="keyword">return</span> unUsedCapacity &gt;= theBin.unUsedCapacity; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">firstFit</span><span class="params">(<span class="keyword">int</span> weight[], <span class="keyword">int</span> numberOfGoods, <span class="keyword">int</span> numberOfBin, <span class="keyword">int</span> capacityOfBin)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// initialize bins by using winner tree</span></span><br><span class="line">	binType* bins = <span class="keyword">new</span> binType[numberOfBin + <span class="number">1</span>];</span><br><span class="line">	<span class="comment">// sita(numberOfBin)</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= numberOfBin; i++) bins[i].unUsedCapacity = capacityOfBin;</span><br><span class="line">	<span class="function">completeWinnerTree&lt;binType&gt; <span class="title">binTree</span><span class="params">(bins, numberOfBin)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// O(nlogn)</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= numberOfGoods; i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> child = <span class="number">2</span>;</span><br><span class="line">		<span class="keyword">while</span> (child &lt; numberOfBin) &#123; <span class="comment">// numberOfGoods = inner nodes</span></span><br><span class="line">			<span class="keyword">if</span> (bins[binTree.winner(child)].unUsedCapacity &lt; weight[i]) child++;</span><br><span class="line">			child *= <span class="number">2</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// find last path, two situations in total</span></span><br><span class="line">		<span class="keyword">int</span> binId;</span><br><span class="line">		child /= <span class="number">2</span>;</span><br><span class="line">		<span class="keyword">if</span> (child &lt; numberOfBin) &#123;</span><br><span class="line">			binId = binTree.winner(child);</span><br><span class="line">			<span class="keyword">if</span> (binId &gt; <span class="number">1</span> &amp;&amp; bins[binId - <span class="number">1</span>].unUsedCapacity &gt;= weight[i])</span><br><span class="line">				--binId;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> binId = binTree.winner(child / <span class="number">2</span>);</span><br><span class="line">		bins[binId].unUsedCapacity -= weight[i];</span><br><span class="line">		binTree.rePlay(binTree.winner(binId));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= numberOfBin; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (bins[i].unUsedCapacity != capacityOfBin) &#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Use bin[&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;], costs:&quot;</span> &lt;&lt; capacityOfBin - bins[i].unUsedCapacity &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">			cnt++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Use &quot;</span> &lt;&lt; cnt &lt;&lt; <span class="string">&quot; bins.&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">delete</span>[]bins;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="搜索树"><a href="#搜索树" class="headerlink" title="搜索树"></a>搜索树</h2><ul>
<li>二叉搜索树</li>
<li>节点定义<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> BSTREENODE_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BSTREENODE_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">pair</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K,<span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bsTreeNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="built_in">pair</span>&lt;<span class="keyword">const</span> K, E&gt; element;</span><br><span class="line">	bsTreeNode* left, * right;</span><br><span class="line">	bsTreeNode() &#123;&#125;</span><br><span class="line">	bsTreeNode(<span class="keyword">const</span> <span class="built_in">pair</span>&lt;<span class="keyword">const</span> K, E&gt;&amp; thePair) : element(thePair),left(<span class="literal">nullptr</span>),right(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">	bsTreeNode(<span class="keyword">const</span> <span class="built_in">pair</span>&lt;<span class="keyword">const</span> K, E&gt;&amp; thePair, bsTreeNode&lt;K, E&gt;* theLeft, bsTreeNode&lt;K, E&gt;* theRight)</span><br><span class="line">		: element(thePair), left(theLeft), right(theRight) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> BSTREE_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BSTREE_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bsTreeNode.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">pair</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">abs</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* @copyright :all rights reserved.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* @author: Joe-sdu.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* @date: Nov.22.2020.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K,<span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">bsTree</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	bsTree() &#123; root = <span class="literal">nullptr</span>; treeSize = <span class="number">0</span>; &#125;</span><br><span class="line">	~bsTree() &#123; postOrderDelete(root); root = <span class="literal">nullptr</span>; treeSize = <span class="number">0</span>; &#125;</span><br><span class="line">	pair&lt;const K, E&gt;* find(const K&amp; theKey) const;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">const</span> <span class="built_in">pair</span>&lt;<span class="keyword">const</span> K, E&gt;&amp; thePair)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">erase</span><span class="params">(<span class="keyword">const</span> K&amp; theKey)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">height</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> height(root); &#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">preOrderOutput</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; preOrderOutput(root); &#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">ascend</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; inOrderOutput(root); &#125;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">checkBalance</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> checkBalance(root); &#125;;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	bsTreeNode&lt;K, E&gt;* root;</span><br><span class="line">	<span class="keyword">int</span> treeSize;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">height</span><span class="params">(bsTreeNode&lt;K, E&gt;* subTree)</span> <span class="keyword">const</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">preOrderOutput</span><span class="params">(bsTreeNode&lt;K,E&gt;* subTree)</span> <span class="keyword">const</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">postOrderDelete</span><span class="params">(bsTreeNode&lt;K,E&gt;* subTree)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">inOrderOutput</span><span class="params">(bsTreeNode&lt;K, E&gt;* subTree)</span> <span class="keyword">const</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">checkBalance</span><span class="params">(bsTreeNode&lt;K, E&gt;* subTree)</span> <span class="keyword">const</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K,<span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="built_in">pair</span>&lt;<span class="keyword">const</span> K, E&gt;* bsTree&lt;K, E&gt;::find(<span class="keyword">const</span> K&amp; theKey) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">	bsTreeNode&lt;K, E&gt;* currNode = root, * trailNode = <span class="literal">nullptr</span>;</span><br><span class="line">	<span class="keyword">while</span> (currNode != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">		trailNode = currNode;</span><br><span class="line">		<span class="keyword">if</span> (theKey &lt; currNode-&gt;element.first) currNode = currNode-&gt;left;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (theKey &gt; currNode-&gt;element.first) currNode = currNode-&gt;right;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">return</span> &amp;currNode-&gt;element;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="keyword">void</span> bsTree&lt;K, E&gt;::insert(<span class="keyword">const</span> <span class="built_in">pair</span>&lt;<span class="keyword">const</span> K, E&gt;&amp; thePair)</span><br><span class="line">&#123; </span><br><span class="line">	bsTreeNode&lt;K, E&gt;* currNode = root, *trailNode = <span class="literal">nullptr</span>;</span><br><span class="line">	<span class="keyword">while</span> (currNode != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">		trailNode = currNode;</span><br><span class="line">		<span class="keyword">if</span> (thePair.first &lt; currNode-&gt;element.first) currNode = currNode-&gt;left;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (thePair.first &gt; currNode-&gt;element.first) currNode = currNode-&gt;right;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			currNode-&gt;element.second = thePair.second;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	bsTreeNode&lt;K, E&gt;* newNode = <span class="keyword">new</span> bsTreeNode&lt;K, E&gt;(thePair);</span><br><span class="line">	<span class="keyword">if</span> (root == <span class="literal">nullptr</span>) root = newNode;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (thePair.first &lt; trailNode-&gt;element.first) trailNode-&gt;left = newNode;</span><br><span class="line">		<span class="keyword">else</span> trailNode-&gt;right = newNode;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K,<span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="keyword">void</span> bsTree&lt;K, E&gt;::erase(<span class="keyword">const</span> K&amp; theKey)</span><br><span class="line">&#123;</span><br><span class="line">	bsTreeNode&lt;K, E&gt;* currNode = root, * trailNode = <span class="literal">nullptr</span>;</span><br><span class="line">	<span class="keyword">while</span> (currNode != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">		trailNode = currNode;</span><br><span class="line">		<span class="keyword">if</span> (theKey &lt; currNode-&gt;element.first) currNode = currNode-&gt;left;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (theKey &gt; currNode-&gt;element.first) currNode = currNode-&gt;right;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (currNode == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">if</span> (currNode-&gt;left != <span class="literal">nullptr</span> &amp;&amp; currNode-&gt;right != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">		bsTreeNode&lt;K, E&gt;* subCurrNode = currNode-&gt;left, * subTrailNode = currNode;</span><br><span class="line">		<span class="keyword">while</span> (subCurrNode-&gt;right != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">			subTrailNode = subCurrNode;</span><br><span class="line">			subCurrNode = subCurrNode-&gt;right;</span><br><span class="line">		&#125;</span><br><span class="line">		bsTreeNode&lt;K, E&gt;* newNode = bsTreeNode&lt;K, E&gt;(subCurrNode-&gt;element, currNode-&gt;left, currNode-&gt;right);</span><br><span class="line">		<span class="keyword">if</span> (trailNode == <span class="literal">nullptr</span>) root = newNode;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (currNode = trailNode-&gt;left) trailNode = newNode;</span><br><span class="line">		<span class="keyword">else</span> trailNode-&gt;right = newNode;</span><br><span class="line">		<span class="keyword">if</span> (currNode == subTrailNode) trailNode = newNode;</span><br><span class="line">		<span class="keyword">else</span> trailNode = subTrailNode;</span><br><span class="line">		<span class="keyword">delete</span> currNode;</span><br><span class="line">		currNode = subCurrNode;</span><br><span class="line">	&#125;</span><br><span class="line">	bsTreeNode&lt;K, E&gt;* newNode;</span><br><span class="line">	<span class="keyword">if</span> (currNode-&gt;left != <span class="literal">nullptr</span>) newNode = currNode-&gt;left;</span><br><span class="line">	<span class="keyword">else</span> newNode = currNode-&gt;right;</span><br><span class="line">	<span class="keyword">if</span> (currNode == root) root = newNode;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (currNode == trailNode-&gt;left) trailNode-&gt;left = newNode;</span><br><span class="line">	<span class="keyword">else</span> trailNode-&gt;right = newNode;</span><br><span class="line">	<span class="keyword">delete</span> currNode;</span><br><span class="line">	treeSize--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K,<span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="keyword">int</span> bsTree&lt;K, E&gt;::height(bsTreeNode&lt;K, E&gt;* subTree) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (subTree == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> h1, h2;</span><br><span class="line">	<span class="keyword">return</span> (h1 = height(subTree-&gt;left)) &lt; (h2 = height(subTree-&gt;right)) ? ++h2 : ++h1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K,<span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="keyword">void</span> bsTree&lt;K, E&gt;::preOrderOutput(bsTreeNode&lt;K, E&gt;* subTree) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (subTree != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; subTree-&gt;element.second &lt;&lt; <span class="string">&quot;: &quot;</span> &lt;&lt; subTree-&gt;element.second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		preOrderOutput(subTree-&gt;left);</span><br><span class="line">		preOrderOutput(subTree-&gt;right);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K,<span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="keyword">void</span> bsTree&lt;K, E&gt;::postOrderDelete(bsTreeNode&lt;K, E&gt;* subTree)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (subTree != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">		postOrderDelete(subTree-&gt;left);</span><br><span class="line">		postOrderDelete(subTree-&gt;right);</span><br><span class="line">		<span class="keyword">delete</span> subTree;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="keyword">void</span> bsTree&lt;K, E&gt;::inOrderOutput(bsTreeNode&lt;K, E&gt;* subTree) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (subTree != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">		inOrderOutput(subTree-&gt;left);</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; subTree-&gt;element.second &lt;&lt; <span class="string">&quot;: &quot;</span> &lt;&lt; subTree-&gt;element.second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		inOrderOutput(subTree-&gt;right);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K,<span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="keyword">bool</span> bsTree&lt;K,E&gt;::checkBalance(bsTreeNode&lt;K,E&gt;* subTree) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (subTree == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">abs</span>(height(subTree-&gt;left) - height(subTree-&gt;right)) &lt;= <span class="number">1</span> </span><br><span class="line">		&amp;&amp; checkBalance(subTree-&gt;left) &amp;&amp; checkBalance(subTree-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></li>
<li>索引二叉搜索树</li>
<li>节点定义<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 换了标识符的写法</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __INDEX_BSTREE_NODE_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __INDEX_BSTREE_NODE_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">pair</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">indexBsTreeNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="built_in">pair</span>&lt;<span class="keyword">const</span> K, E&gt; element;</span><br><span class="line">	<span class="keyword">int</span> leftSize;</span><br><span class="line">	indexBsTreeNode&lt;K, E&gt;* left, * right;</span><br><span class="line">	indexBsTreeNode() :element(<span class="built_in">pair</span>&lt;<span class="keyword">const</span> K, E&gt;(<span class="number">0</span>, <span class="number">0</span>)), leftSize(<span class="number">0</span>), left(<span class="literal">nullptr</span>), right(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">	indexBsTreeNode(<span class="keyword">const</span> <span class="built_in">pair</span>&lt;<span class="keyword">const</span> K, E&gt;&amp; thePair)</span><br><span class="line">		: element(thePair), leftSize(<span class="number">0</span>), left(<span class="literal">nullptr</span>), right(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">	indexBsTreeNode(<span class="keyword">const</span> <span class="built_in">pair</span>&lt;<span class="keyword">const</span> K, E&gt;&amp; thePair, indexBsTreeNode&lt;K, E&gt;* theLeft, indexBsTreeNode&lt;K, E&gt;* theRight)</span><br><span class="line">		: element(thePair), leftSize(<span class="number">0</span>), left(theLeft), right(theRight) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></li>
<li>类的部分实现<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _INDEX_BSTREE_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _INDEX_BSTREE_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;exception&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;indexBsTreeNode.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">pair</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">queue</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::bad_alloc;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* @copyright: all rights reserved.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* @author: Joe-sdu.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* @date: Nov.25.2020.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="keyword">class</span> <span class="title">FLAG</span> &#123;</span> ROOT, LEFT, RIGHT &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">indexBsTree</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	indexBsTree() : root(<span class="literal">nullptr</span>), treeSize(<span class="number">0</span>) &#123;&#125;</span><br><span class="line">	~indexBsTree() &#123; distroy(root); &#125;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> treeSize == <span class="number">0</span>; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> treeSize; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">height</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> height(root); &#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">getLeftSize</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> root-&gt;leftSize; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">preOrder</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">inOrder</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">postOrder</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">levelOrder</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">printTree</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">const</span> <span class="built_in">pair</span>&lt;<span class="keyword">const</span> K, E&gt;&amp; thePair)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">erase</span><span class="params">(<span class="keyword">const</span> K&amp; theKey)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">distroy</span><span class="params">()</span> </span>&#123; distroy(root); &#125;</span><br><span class="line">	pair&lt;const K, E&gt;* iterativeGet(int theIndex) const;</span><br><span class="line">	pair&lt;const K, E&gt;* get(int theIndex) const;</span><br><span class="line">	pair&lt;const K, E&gt;* maximum() const;</span><br><span class="line">	pair&lt;const K, E&gt;* minimum() const;</span><br><span class="line">	pair&lt;const K, E&gt;* search(const K&amp; theKey) const;</span><br><span class="line">	pair&lt;const K, E&gt;* iterativeSearch(const K&amp; theKey) const;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	indexBsTreeNode&lt;K, E&gt;* root;</span><br><span class="line">	<span class="keyword">int</span> treeSize;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">getIndex</span><span class="params">(indexBsTreeNode&lt;K, E&gt;* tree)</span> <span class="keyword">const</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">height</span><span class="params">(indexBsTreeNode&lt;K, E&gt;* tree)</span> <span class="keyword">const</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(indexBsTreeNode&lt;K, E&gt;* tree)</span> <span class="keyword">const</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">inOrder</span><span class="params">(indexBsTreeNode&lt;K, E&gt;* tree)</span> <span class="keyword">const</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">postOrder</span><span class="params">(indexBsTreeNode&lt;K, E&gt;* tree)</span> <span class="keyword">const</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">levelOrder</span><span class="params">(indexBsTreeNode&lt;K, E&gt;* tree)</span> <span class="keyword">const</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">distroy</span><span class="params">(indexBsTreeNode&lt;K, E&gt;*&amp; tree)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">printTree</span><span class="params">(indexBsTreeNode&lt;K, E&gt;* tree, <span class="keyword">const</span> K&amp; theKey, FLAG f)</span> <span class="keyword">const</span></span>;</span><br><span class="line">	indexBsTreeNode&lt;K, E&gt;* maximum(indexBsTreeNode&lt;K, E&gt;* tree) const;</span><br><span class="line">	indexBsTreeNode&lt;K, E&gt;* minimum(indexBsTreeNode&lt;K, E&gt;* tree) const;</span><br><span class="line">	indexBsTreeNode&lt;K, E&gt;* insert(indexBsTreeNode&lt;K, E&gt;*&amp; tree, const pair&lt;const K, E&gt;&amp; thePair);</span><br><span class="line">	indexBsTreeNode&lt;K, E&gt;* erase(indexBsTreeNode&lt;K, E&gt;*&amp; tree, const K&amp; theKey);</span><br><span class="line">	indexBsTreeNode&lt;K, E&gt;* search(indexBsTreeNode&lt;K,E&gt;* tree, const K&amp; theKey) const;</span><br><span class="line">	indexBsTreeNode&lt;K, E&gt;* get(indexBsTreeNode&lt;K, E&gt;* tree, int theIndex) const;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K,<span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="keyword">int</span> indexBsTree&lt;K, E&gt;::getIndex(indexBsTreeNode&lt;K, E&gt;* tree) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (!tree) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">return</span> tree-&gt;leftSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="keyword">int</span> indexBsTree&lt;K, E&gt;::height(indexBsTreeNode&lt;K, E&gt;* tree) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (!tree) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> h1 = height(tree-&gt;left);</span><br><span class="line">	<span class="keyword">int</span> h2 = height(tree-&gt;right);</span><br><span class="line">	<span class="keyword">return</span> h1 &lt; h2 ? ++h2 : ++h1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="keyword">void</span> indexBsTree&lt;K, E&gt;::preOrder() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">	preOrder(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="keyword">void</span> indexBsTree&lt;K, E&gt;::preOrder(indexBsTreeNode&lt;K, E&gt;* tree) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (tree) &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Key: &quot;</span> &lt;&lt; tree-&gt;element.first &lt;&lt; <span class="string">&quot; Value: &quot;</span> &lt;&lt; tree-&gt;element.second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		preOrder(tree-&gt;left);</span><br><span class="line">		preOrder(tree-&gt;right);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="keyword">void</span> indexBsTree&lt;K, E&gt;::inOrder() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">	inOrder(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="keyword">void</span> indexBsTree&lt;K, E&gt;::inOrder(indexBsTreeNode&lt;K, E&gt;* tree) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (tree) &#123;</span><br><span class="line">		inOrder(tree-&gt;left);</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Key: &quot;</span> &lt;&lt; tree-&gt;element.first &lt;&lt; <span class="string">&quot; Value: &quot;</span> &lt;&lt; tree-&gt;element.second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		inOrder(tree-&gt;right);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="keyword">void</span> indexBsTree&lt;K, E&gt;::postOrder() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">	postOrder(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="keyword">void</span> indexBsTree&lt;K, E&gt;::postOrder(indexBsTreeNode&lt;K, E&gt;* tree) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (tree) &#123;</span><br><span class="line">		postOrder(tree-&gt;left);</span><br><span class="line">		postOrder(tree-&gt;right);</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Key: &quot;</span> &lt;&lt; tree-&gt;element.first &lt;&lt; <span class="string">&quot; Value: &quot;</span> &lt;&lt; tree-&gt;element.second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="keyword">void</span> indexBsTree&lt;K, E&gt;::levelOrder() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">	levelOrder(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="keyword">void</span> indexBsTree&lt;K, E&gt;::levelOrder(indexBsTreeNode&lt;K, E&gt;* tree) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (!tree) <span class="keyword">return</span>;</span><br><span class="line">	<span class="built_in">queue</span>&lt;indexBsTreeNode&lt;K, E&gt;*&gt; nodeBucket;</span><br><span class="line">	nodeBucket.push(tree);</span><br><span class="line">	<span class="keyword">while</span> (!nodeBucket.empty()) &#123;</span><br><span class="line">		indexBsTreeNode&lt;K, E&gt;* currNode = nodeBucket.front();</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Key: &quot;</span> &lt;&lt; tree-&gt;element.first &lt;&lt; <span class="string">&quot; Value: &quot;</span> &lt;&lt; tree-&gt;element.second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		nodeBucket.pop();</span><br><span class="line">		<span class="keyword">if</span> (currNode-&gt;left) nodeBucket.push(currNode-&gt;left);</span><br><span class="line">		<span class="keyword">if</span> (currNode-&gt;right) nodeBucket.push(currNode-&gt;right);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="keyword">void</span> indexBsTree&lt;K, E&gt;::printTree() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">	printTree(root, root-&gt;element.first, FLAG::ROOT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="keyword">void</span> indexBsTree&lt;K, E&gt;::printTree(indexBsTreeNode&lt;K, E&gt;* tree, <span class="keyword">const</span> K&amp; theKey, FLAG f) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (!tree) <span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">if</span> (f == FLAG::ROOT) <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;根节点: &quot;</span> &lt;&lt; tree-&gt;element.first &lt;&lt; <span class="string">&quot;  值:&quot;</span> &lt;&lt; tree-&gt;element.second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (f == FLAG::LEFT)</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; theKey &lt;&lt; <span class="string">&quot; 的左孩子: &quot;</span> &lt;&lt; tree-&gt;element.first &lt;&lt; <span class="string">&quot; 值:&quot;</span> &lt;&lt; tree-&gt;element.second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; theKey &lt;&lt; <span class="string">&quot; 的右孩子: &quot;</span> &lt;&lt; tree-&gt;element.first &lt;&lt; <span class="string">&quot; 值:&quot;</span> &lt;&lt; tree-&gt;element.second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	printTree(tree-&gt;left, tree-&gt;element.first, FLAG::LEFT);</span><br><span class="line">	printTree(tree-&gt;right, tree-&gt;element.first, FLAG::RIGHT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="keyword">void</span> indexBsTree&lt;K, E&gt;::insert(<span class="keyword">const</span> <span class="built_in">pair</span>&lt;<span class="keyword">const</span> K, E&gt;&amp; thePair)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (!search(root, thePair.first)) treeSize++;</span><br><span class="line">	root = insert(root, thePair);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> E&gt;</span><br><span class="line">indexBsTreeNode&lt;K, E&gt;* indexBsTree&lt;K, E&gt;::insert(indexBsTreeNode&lt;K, E&gt;*&amp; tree, <span class="keyword">const</span> <span class="built_in">pair</span>&lt;<span class="keyword">const</span> K, E&gt;&amp; thePair)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (!tree) &#123;</span><br><span class="line">		<span class="keyword">try</span> &#123; tree = <span class="keyword">new</span> indexBsTreeNode&lt;K, E&gt;(thePair); &#125;</span><br><span class="line">		<span class="keyword">catch</span> (bad_alloc &amp; error) &#123; <span class="built_in">cout</span> &lt;&lt; error.what(); &#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (tree-&gt;element.first &gt; thePair.first) tree-&gt;left = insert(tree-&gt;left, thePair);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (tree-&gt;element.first &lt; thePair.first) tree-&gt;right = insert(tree-&gt;right, thePair);</span><br><span class="line">	<span class="keyword">else</span> tree-&gt;element.second = thePair.second;</span><br><span class="line">	tree-&gt;leftSize = getIndex(tree-&gt;left) + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> tree;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K,<span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="keyword">void</span> indexBsTree&lt;K, E&gt;::erase(<span class="keyword">const</span> K&amp; theKey)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (search(root, theKey)) treeSize--;</span><br><span class="line">	erase(root, theKey);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K,<span class="keyword">typename</span> E&gt;</span><br><span class="line">indexBsTreeNode&lt;K, E&gt;* indexBsTree&lt;K, E&gt;::erase(indexBsTreeNode&lt;K, E&gt;*&amp; tree, <span class="keyword">const</span> K&amp; theKey)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (!tree) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">	<span class="keyword">if</span> (tree-&gt;element.first &lt; theKey) tree-&gt;right = erase(tree-&gt;right, theKey);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (tree-&gt;element.first &gt; theKey) tree-&gt;left = erase(tree-&gt;left, theKey);</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (tree-&gt;left &amp;&amp; tree-&gt;right) &#123;</span><br><span class="line">			<span class="built_in">pair</span>&lt;<span class="keyword">const</span> K, E&gt; thePair = maximum(tree-&gt;left)-&gt;element;</span><br><span class="line">			tree-&gt;left = erase(tree-&gt;left, thePair.first);</span><br><span class="line">			indexBsTreeNode&lt;K, E&gt;* newNode = <span class="keyword">new</span> indexBsTreeNode&lt;K,E&gt;(thePair, tree-&gt;left, tree-&gt;right);</span><br><span class="line">			<span class="keyword">delete</span> tree;</span><br><span class="line">			tree = newNode;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;aaa&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			indexBsTreeNode&lt;K, E&gt;* deleteNode = tree;</span><br><span class="line">			tree = tree-&gt;left ? tree-&gt;left : tree-&gt;right;</span><br><span class="line">			<span class="keyword">delete</span> deleteNode;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(tree) tree-&gt;leftSize = getIndex(tree-&gt;left) + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> tree;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="keyword">void</span> indexBsTree&lt;K, E&gt;::distroy(indexBsTreeNode&lt;K, E&gt;*&amp; tree)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (!tree) <span class="keyword">return</span>;</span><br><span class="line">	distroy(tree-&gt;left);</span><br><span class="line">	distroy(tree-&gt;right);</span><br><span class="line">	<span class="keyword">delete</span> tree;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K,<span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="built_in">pair</span>&lt;<span class="keyword">const</span> K, E&gt;* indexBsTree&lt;K, E&gt;::iterativeGet(<span class="keyword">int</span> theIndex) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">	indexBsTreeNode&lt;K, E&gt;* currNode = root;</span><br><span class="line">	<span class="keyword">while</span> (currNode) &#123;</span><br><span class="line">		<span class="keyword">if</span> (currNode-&gt;leftSize &lt; theIndex) &#123;</span><br><span class="line">			theIndex -= currNode-&gt;leftSize + <span class="number">1</span>;</span><br><span class="line">			currNode = currNode-&gt;right;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (currNode-&gt;leftSize &gt; theIndex) currNode = currNode-&gt;left;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">return</span> &amp;currNode-&gt;element;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K,<span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="built_in">pair</span>&lt;<span class="keyword">const</span> K, E&gt;* indexBsTree&lt;K, E&gt;::get(<span class="keyword">int</span> theIndex) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">	indexBsTreeNode&lt;K, E&gt;* temp = get(root, theIndex);</span><br><span class="line">	<span class="keyword">return</span> temp ? &amp;temp-&gt;element : <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K,<span class="keyword">typename</span> E&gt;</span><br><span class="line">indexBsTreeNode&lt;K, E&gt;* indexBsTree&lt;K, E&gt;::get(indexBsTreeNode&lt;K, E&gt;* tree, <span class="keyword">int</span> theIndex) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (!tree) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">	<span class="keyword">if</span> (tree-&gt;leftSize == theIndex) <span class="keyword">return</span> tree;</span><br><span class="line">	<span class="keyword">return</span> tree-&gt;leftSize &gt; theIndex ? get(tree-&gt;left, theIndex) : get(tree-&gt;right, theIndex - tree-&gt;leftSize - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K,<span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="built_in">pair</span>&lt;<span class="keyword">const</span> K, E&gt;* indexBsTree&lt;K, E&gt;::maximum() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (!root) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">	indexBsTreeNode&lt;K, E&gt;* temp = maximum(root);</span><br><span class="line">	<span class="keyword">return</span> temp ? &amp;temp-&gt;element : <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K,<span class="keyword">typename</span> E&gt;</span><br><span class="line">indexBsTreeNode&lt;K,E&gt;* indexBsTree&lt;K, E&gt;::maximum(indexBsTreeNode&lt;K, E&gt;* tree) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> tree-&gt;right ? maximum(tree-&gt;right) : tree;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K,<span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="built_in">pair</span>&lt;<span class="keyword">const</span> K, E&gt;* indexBsTree&lt;K, E&gt;::minimum() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (!root) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">	indexBsTreeNode&lt;K, E&gt;* temp = minimum(root);</span><br><span class="line">	<span class="keyword">return</span> temp ? &amp;temp-&gt;element : <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K,<span class="keyword">typename</span> E&gt;</span><br><span class="line">indexBsTreeNode&lt;K, E&gt;* indexBsTree&lt;K, E&gt;::minimum(indexBsTreeNode&lt;K, E&gt;* tree) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> tree-&gt;left ? minimum(tree-&gt;left) : tree;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K,<span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="built_in">pair</span>&lt;<span class="keyword">const</span> K, E&gt;* indexBsTree&lt;K,E&gt;::search(<span class="keyword">const</span> K&amp; theKey) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">	indexBsTreeNode&lt;K, E&gt;* temp = search(root, theKey);</span><br><span class="line">	<span class="keyword">return</span> temp ? &amp;temp-&gt;element : <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> E&gt;</span><br><span class="line">indexBsTreeNode&lt;K, E&gt;* indexBsTree&lt;K, E&gt;::search(indexBsTreeNode&lt;K, E&gt;* tree, <span class="keyword">const</span> K&amp; theKey) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (!tree) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">	<span class="keyword">if</span> (tree-&gt;element.first == theKey) <span class="keyword">return</span> tree;</span><br><span class="line">	<span class="keyword">return</span> tree-&gt;element.first &lt; theKey ? search(tree-&gt;left,theKey) : search(tree-&gt;right,theKey);</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K,<span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="built_in">pair</span>&lt;<span class="keyword">const</span> K, E&gt;* indexBsTree&lt;K, E&gt;::iterativeSearch(<span class="keyword">const</span> K&amp; theKey) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">	indexBsTreeNode&lt;K, E&gt;* currNode = root;</span><br><span class="line">	<span class="keyword">while</span> (currNode) &#123;</span><br><span class="line">		<span class="keyword">if</span> (currNode-&gt;element.first &lt; theKey) currNode = currNode-&gt;right;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (currNode-&gt;element.first &gt; theKey) currNode = currNode-&gt;left;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">return</span> &amp;currNode-&gt;element;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<h2 id="AVL树"><a href="#AVL树" class="headerlink" title="AVL树"></a>AVL树</h2></li>
<li>节点定义<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _AVLTREE_NODE_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _AVLTREE_NODE_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">pair</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K,<span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">avlTreeNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="built_in">pair</span>&lt;<span class="keyword">const</span> K, E&gt; element;</span><br><span class="line">	<span class="keyword">int</span> height;</span><br><span class="line">	avlTreeNode&lt;K, E&gt;* left, * right;</span><br><span class="line">	avlTreeNode() &#123;&#125;</span><br><span class="line">	avlTreeNode(<span class="keyword">const</span> <span class="built_in">pair</span>&lt;<span class="keyword">const</span> K, E&gt;&amp; thePair) : element(thePair), height(<span class="number">0</span>), left(<span class="literal">nullptr</span>), right(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">	avlTreeNode(<span class="keyword">const</span> <span class="built_in">pair</span>&lt;<span class="keyword">const</span> K, E&gt;&amp; thePair, avlTreeNode&lt;K, E&gt;* theLeft, avlTreeNode&lt;K, E&gt;* theRight)</span><br><span class="line">		: element(thePair), height(<span class="number">0</span>), left(theLeft), right(theRight) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></li>
<li>类实现<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _AVLTREE_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _AVLTREE_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;exception&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;avlTreeNode.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">pair</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::max;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::bad_alloc;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">queue</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="keyword">class</span> <span class="title">FLAG</span> :</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> &#123; ROOT, LEFT, RIGHT &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* @copyright: all rights reserved.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* @author: Joe-sdu.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* @date: Nov.26.2020.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K,<span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">avlTree</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	avlTree() : root(<span class="literal">nullptr</span>),treeSize(<span class="number">0</span>) &#123;&#125;</span><br><span class="line">	~avlTree() &#123; dispose(root); treeSize = <span class="number">0</span>; &#125;;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">height</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> treeSize == <span class="number">0</span>; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> treeSize; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">preOrder</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">inOrder</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">postOrder</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">levelOrder</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">printTree</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">const</span> <span class="built_in">pair</span>&lt;<span class="keyword">const</span> K, E&gt;&amp; thePair)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">erase</span><span class="params">(<span class="keyword">const</span> K&amp; theKey)</span></span>;</span><br><span class="line">	pair&lt;const K, E&gt;* maximun() const;</span><br><span class="line">	pair&lt;const K, E&gt;* minimun() const;</span><br><span class="line">	pair&lt;const K, E&gt;* search(const K&amp; theKey) const;</span><br><span class="line">	pair&lt;const K, E&gt;* iterativeSearch(const K&amp; theKey) const;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	avlTreeNode&lt;K, E&gt;* root;</span><br><span class="line">	<span class="keyword">int</span> treeSize;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">height</span><span class="params">(avlTreeNode&lt;K, E&gt;* tree)</span> <span class="keyword">const</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(avlTreeNode&lt;K, E&gt;* tree)</span> <span class="keyword">const</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">inOrder</span><span class="params">(avlTreeNode&lt;K, E&gt;* tree)</span> <span class="keyword">const</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">postOrder</span><span class="params">(avlTreeNode&lt;K, E&gt;* tree)</span> <span class="keyword">const</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">levelOrder</span><span class="params">(avlTreeNode&lt;K, E&gt;* tree)</span> <span class="keyword">const</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">dispose</span><span class="params">(avlTreeNode&lt;K, E&gt;*&amp; tree)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">printTree</span><span class="params">(avlTreeNode&lt;K, E&gt;* tree, <span class="keyword">const</span> K&amp; theKey, FLAG f)</span> <span class="keyword">const</span></span>;</span><br><span class="line">	avlTreeNode&lt;K, E&gt;* llRotate(avlTreeNode&lt;K, E&gt;*&amp; tree);</span><br><span class="line">	avlTreeNode&lt;K, E&gt;* rrRotate(avlTreeNode&lt;K, E&gt;*&amp; tree);</span><br><span class="line">	avlTreeNode&lt;K, E&gt;* lrRotate(avlTreeNode&lt;K, E&gt;*&amp; tree);</span><br><span class="line">	avlTreeNode&lt;K, E&gt;* rlRotate(avlTreeNode&lt;K, E&gt;*&amp; tree);</span><br><span class="line">	avlTreeNode&lt;K, E&gt;* insert(avlTreeNode&lt;K, E&gt;*&amp; tree, const pair&lt;const K, E&gt;&amp; thePair);</span><br><span class="line">	avlTreeNode&lt;K, E&gt;* maximun(avlTreeNode&lt;K,E&gt;* tree) const;</span><br><span class="line">	avlTreeNode&lt;K, E&gt;* minimun(avlTreeNode&lt;K,E&gt;* tree) const;</span><br><span class="line">	avlTreeNode&lt;K, E&gt;* erase(avlTreeNode&lt;K, E&gt;*&amp; tree, const K&amp; theKey);</span><br><span class="line">	avlTreeNode&lt;K, E&gt;* search(avlTreeNode&lt;K,E&gt;* tree, const K&amp; theKey) const;</span><br><span class="line">	avlTreeNode&lt;K, E&gt;* iterativeSearch(avlTreeNode&lt;K,E&gt;* tree, const K&amp; theKey) const;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K,<span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="keyword">int</span> avlTree&lt;K, E&gt;::height() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> height(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K,<span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="keyword">int</span> avlTree&lt;K, E&gt;::height(avlTreeNode&lt;K, E&gt;* tree) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> tree ? tree-&gt;height : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K,<span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="keyword">void</span> avlTree&lt;K, E&gt;::preOrder() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">	preOrder(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K,<span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="keyword">void</span> avlTree&lt;K, E&gt;::preOrder(avlTreeNode&lt;K, E&gt;* tree) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (tree != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Key: &quot;</span> &lt;&lt; tree-&gt;element.first &lt;&lt; <span class="string">&quot; Value: &quot;</span> &lt;&lt; tree-&gt;element.second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		preOrder(tree-&gt;left);</span><br><span class="line">		preOrder(tree-&gt;right);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K,<span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="keyword">void</span> avlTree&lt;K, E&gt;::inOrder() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">	inOrder(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K,<span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="keyword">void</span> avlTree&lt;K, E&gt;::inOrder(avlTreeNode&lt;K, E&gt;* tree) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (tree != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">		inOrder(tree-&gt;left);</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Key: &quot;</span> &lt;&lt; tree-&gt;element.first &lt;&lt; <span class="string">&quot; Value: &quot;</span> &lt;&lt; tree-&gt;element.second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		inOrder(tree-&gt;right);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K,<span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="keyword">void</span> avlTree&lt;K, E&gt;::postOrder() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">	postOrder(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K,<span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="keyword">void</span> avlTree&lt;K, E&gt;::postOrder(avlTreeNode&lt;K, E&gt;* tree) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (tree != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">		postOrder(tree-&gt;left);</span><br><span class="line">		postOrder(tree-&gt;right);</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Key: &quot;</span> &lt;&lt; tree-&gt;element.first &lt;&lt; <span class="string">&quot; Value: &quot;</span> &lt;&lt; tree-&gt;element.second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K,<span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="keyword">void</span> avlTree&lt;K, E&gt;::levelOrder() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">	levelOrder(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K,<span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="keyword">void</span> avlTree&lt;K, E&gt;::levelOrder(avlTreeNode&lt;K, E&gt;* tree) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (tree == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">	<span class="built_in">queue</span>&lt;avlTreeNode&lt;K, E&gt;*&gt; avlBucket;</span><br><span class="line">	avlBucket.push(tree);</span><br><span class="line">	<span class="keyword">while</span> (!avlBucket.empty()) &#123;</span><br><span class="line">		avlTreeNode&lt;K, E&gt;* currNode = avlBucket.top(); avlBucket.pop();</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Key: &quot;</span> &lt;&lt; tree-&gt;element.first &lt;&lt; <span class="string">&quot; Value: &quot;</span> &lt;&lt; tree-&gt;element.second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">if</span> (currNode-&gt;left != <span class="literal">nullptr</span>) avlBucket.push(tree-&gt;left);</span><br><span class="line">		<span class="keyword">if</span> (currNode-&gt;right != <span class="literal">nullptr</span>) avlBucket.push(tree-&gt;right);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K,<span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="keyword">void</span> avlTree&lt;K, E&gt;::printTree() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (root == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">	printTree(root, root-&gt;element.first, FLAG::ROOT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K,<span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="keyword">void</span> avlTree&lt;K, E&gt;::printTree(avlTreeNode&lt;K, E&gt;* tree, <span class="keyword">const</span> K&amp; theKey, FLAG f) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (tree == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">if</span> (f == FLAG::ROOT) <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;根节点 &quot;</span> &lt;&lt; <span class="string">&quot;Key: &quot;</span> &lt;&lt; tree-&gt;element.first &lt;&lt; <span class="string">&quot; Value: &quot;</span> &lt;&lt; tree-&gt;element.second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(f == FLAG::LEFT)</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; theKey &lt;&lt; <span class="string">&quot; 的左孩子 &quot;</span> &lt;&lt; <span class="string">&quot;Key: &quot;</span> &lt;&lt; tree-&gt;element.first &lt;&lt; <span class="string">&quot; Value: &quot;</span> &lt;&lt; tree-&gt;element.second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; theKey &lt;&lt; <span class="string">&quot; 的右孩子 &quot;</span> &lt;&lt; <span class="string">&quot;Key: &quot;</span> &lt;&lt; tree-&gt;element.first &lt;&lt; <span class="string">&quot; Value: &quot;</span> &lt;&lt; tree-&gt;element.second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	printTree(tree-&gt;left, tree-&gt;element.first, FLAG::LEFT);</span><br><span class="line">	printTree(tree-&gt;right, tree-&gt;element.first, FLAG::RIGHT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K,<span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="keyword">void</span> avlTree&lt;K, E&gt;::dispose(avlTreeNode&lt;K, E&gt;*&amp; tree)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (tree == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">	dispose(tree-&gt;left);</span><br><span class="line">	dispose(tree-&gt;right);</span><br><span class="line">	<span class="keyword">delete</span> tree;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K,<span class="keyword">typename</span> E&gt;</span><br><span class="line">avlTreeNode&lt;K,E&gt;* avlTree&lt;K, E&gt;::llRotate(avlTreeNode&lt;K, E&gt;*&amp; tree)</span><br><span class="line">&#123;</span><br><span class="line">	avlTreeNode&lt;K, E&gt;* leftNode = tree-&gt;left;</span><br><span class="line">	tree-&gt;left = leftNode-&gt;right;</span><br><span class="line">	leftNode-&gt;right = tree;</span><br><span class="line">	tree-&gt;height = max(height(tree-&gt;left), height(tree-&gt;right)) + <span class="number">1</span>;</span><br><span class="line">	leftNode-&gt;height = max(height(leftNode-&gt;left), height(leftNode-&gt;right)) + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> leftNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K,<span class="keyword">typename</span> E&gt;</span><br><span class="line">avlTreeNode&lt;K, E&gt;* avlTree&lt;K, E&gt;::rrRotate(avlTreeNode&lt;K, E&gt;*&amp; tree)</span><br><span class="line">&#123;</span><br><span class="line">	avlTreeNode&lt;K, E&gt;* rightNode = tree-&gt;right;</span><br><span class="line">	tree-&gt;right = rightNode-&gt;left;</span><br><span class="line">	rightNode-&gt;left = tree;</span><br><span class="line">	tree-&gt;height = max(height(tree-&gt;left), height(tree-&gt;right)) + <span class="number">1</span>;</span><br><span class="line">	rightNode-&gt;height = max(height(rightNode-&gt;left), height(rightNode-&gt;right)) + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> rightNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K,<span class="keyword">typename</span> E&gt;</span><br><span class="line">avlTreeNode&lt;K, E&gt;* avlTree&lt;K, E&gt;::lrRotate(avlTreeNode&lt;K, E&gt;*&amp; tree)</span><br><span class="line">&#123;</span><br><span class="line">	tree-&gt;left = rrRotate(tree-&gt;left);</span><br><span class="line">	<span class="keyword">return</span> llRotate(tree);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K,<span class="keyword">typename</span> E&gt;</span><br><span class="line">avlTreeNode&lt;K, E&gt;* avlTree&lt;K, E&gt;::rlRotate(avlTreeNode&lt;K, E&gt;*&amp; tree)</span><br><span class="line">&#123;</span><br><span class="line">	tree-&gt;right = llRotate(tree-&gt;right);</span><br><span class="line">	<span class="keyword">return</span> rrRotate(tree);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K,<span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="keyword">void</span> avlTree&lt;K, E&gt;::insert(<span class="keyword">const</span> <span class="built_in">pair</span>&lt;<span class="keyword">const</span> K, E&gt;&amp; thePair)</span><br><span class="line">&#123;</span><br><span class="line">	avlTreeNode&lt;K, E&gt;* temp;</span><br><span class="line">	<span class="keyword">if</span> ((temp = search(root, thePair.first)) != <span class="literal">nullptr</span>) temp-&gt;element.second = thePair.second;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		root = insert(root, thePair);</span><br><span class="line">		treeSize++;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K,<span class="keyword">typename</span> E&gt;</span><br><span class="line">avlTreeNode&lt;K, E&gt;* avlTree&lt;K, E&gt;::insert(avlTreeNode&lt;K, E&gt;*&amp; tree, <span class="keyword">const</span> <span class="built_in">pair</span>&lt;<span class="keyword">const</span> K, E&gt;&amp; thePair)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (tree == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			tree = <span class="keyword">new</span> avlTreeNode&lt;K, E&gt;(thePair);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (bad_alloc error) &#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; error.what();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (thePair.first &lt; tree-&gt;element.first) &#123;</span><br><span class="line">		tree-&gt;left = insert(tree-&gt;left, thePair);</span><br><span class="line">		<span class="keyword">if</span> (height(tree-&gt;left) - height(tree-&gt;right) == <span class="number">2</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (thePair.first &lt; tree-&gt;left-&gt;element.first) tree = llRotate(tree);</span><br><span class="line">			<span class="keyword">else</span> tree = lrRotate(tree);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		tree-&gt;right = insert(tree-&gt;right, thePair);</span><br><span class="line">		<span class="keyword">if</span> (height(tree-&gt;right) - height(tree-&gt;left) == <span class="number">2</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (thePair.first &gt; tree-&gt;right-&gt;element.first) tree = rrRotate(tree);</span><br><span class="line">			<span class="keyword">else</span> tree = rlRotate(tree);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	tree-&gt;height = max(height(tree-&gt;left), height(tree-&gt;right)) + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> tree;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K,<span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="keyword">void</span> avlTree&lt;K, E&gt;::erase(<span class="keyword">const</span> K&amp; theKey)</span><br><span class="line">&#123;</span><br><span class="line">	avlTreeNode&lt;K, E&gt;* temp;</span><br><span class="line">	<span class="keyword">if</span> ((temp = search(root, theKey)) == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		root = erase(root, theKey);</span><br><span class="line">		treeSize--;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> E&gt;</span><br><span class="line">avlTreeNode&lt;K, E&gt;* avlTree&lt;K, E&gt;::erase(avlTreeNode&lt;K, E&gt;*&amp; tree, <span class="keyword">const</span> K&amp; theKey)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (theKey &lt; tree-&gt;element.first) &#123;</span><br><span class="line">		tree-&gt;left = erase(tree-&gt;left, theKey);</span><br><span class="line">		<span class="keyword">if</span> (height(tree-&gt;right) - height(tree-&gt;left) == <span class="number">2</span>) &#123;</span><br><span class="line">			avlTreeNode&lt;K, E&gt;* rNode = tree-&gt;right;</span><br><span class="line">			<span class="keyword">if</span> (height(rNode-&gt;right) &gt; height(rNode-&gt;left)) tree = rrRotate(tree);</span><br><span class="line">			<span class="keyword">else</span> tree = rlRotate(tree);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(theKey &gt; tree-&gt;element.first)&#123;</span><br><span class="line">		tree-&gt;right = erase(tree-&gt;right, theKey);</span><br><span class="line">		<span class="keyword">if</span> (height(tree-&gt;left) - height(tree-&gt;right) == <span class="number">2</span>) &#123;</span><br><span class="line">			avlTreeNode&lt;K, E&gt;* lNode = tree-&gt;left;</span><br><span class="line">			<span class="keyword">if</span> (height(lNode-&gt;left) &gt; height(lNode-&gt;right)) tree = llRotate(tree);</span><br><span class="line">			<span class="keyword">else</span> tree = lrRotate(tree);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (tree-&gt;left != <span class="literal">nullptr</span> &amp;&amp; tree-&gt;right != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (height(tree-&gt;left) &gt; height(tree-&gt;right)) &#123;</span><br><span class="line">				avlTreeNode&lt;K, E&gt;* maxNode = maximun(tree-&gt;left);</span><br><span class="line">				pair&lt;const int, int&gt; element(maxNode-&gt;element.first, maxNode-&gt;element.second);</span><br><span class="line">				tree-&gt;left = erase(tree-&gt;left, maxNode-&gt;element.first);</span><br><span class="line">				avlTreeNode&lt;K, E&gt;* newNode = <span class="keyword">new</span> avlTreeNode&lt;K, E&gt;(element, tree-&gt;left, tree-&gt;right);</span><br><span class="line">				<span class="keyword">delete</span> tree;</span><br><span class="line">				tree = newNode;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				avlTreeNode&lt;K, E&gt;* minNode = minimun(tree-&gt;right);</span><br><span class="line">				pair&lt;const int, int&gt; element(minNode-&gt;element.first, minNode-&gt;element.second);</span><br><span class="line">				tree-&gt;right = erase(tree-&gt;right, minNode-&gt;element.first);</span><br><span class="line">				avlTreeNode&lt;K, E&gt;* newNode = <span class="keyword">new</span> avlTreeNode&lt;K, E&gt;(element, tree-&gt;left, tree-&gt;right);</span><br><span class="line">				<span class="keyword">delete</span> tree;</span><br><span class="line">				tree = newNode;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			avlTreeNode&lt;K, E&gt;* deleteNode = tree;</span><br><span class="line">			tree = tree-&gt;left ? tree-&gt;left : tree-&gt;right;</span><br><span class="line">			<span class="keyword">delete</span> deleteNode;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> tree;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K,<span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="built_in">pair</span>&lt;<span class="keyword">const</span> K, E&gt;* avlTree&lt;K,E&gt;::maximun() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">	avlTreeNode&lt;K, E&gt;* temp = maximun(root);</span><br><span class="line">	<span class="keyword">return</span> temp-&gt;element;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K,<span class="keyword">typename</span> E&gt;</span><br><span class="line">avlTreeNode&lt;K, E&gt;* avlTree&lt;K, E&gt;::maximun(avlTreeNode&lt;K, E&gt;* tree) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (tree-&gt;right == <span class="literal">nullptr</span>) <span class="keyword">return</span> tree;</span><br><span class="line">	<span class="keyword">return</span> maximun(tree-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K,<span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="built_in">pair</span>&lt;<span class="keyword">const</span> K, E&gt;* avlTree&lt;K, E&gt;::minimun() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">	avlTreeNode&lt;K, E&gt;* temp = minimun(root);</span><br><span class="line">	<span class="keyword">return</span> *temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K,<span class="keyword">typename</span> E&gt;</span><br><span class="line">avlTreeNode&lt;K, E&gt;* avlTree&lt;K, E&gt;::minimun(avlTreeNode&lt;K, E&gt;* tree) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (tree-&gt;left == <span class="literal">nullptr</span>) <span class="keyword">return</span> tree;</span><br><span class="line">	<span class="keyword">return</span> minimun(tree-&gt;left);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K,<span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="built_in">pair</span>&lt;<span class="keyword">const</span> K, E&gt;* avlTree&lt;K, E&gt;::search(<span class="keyword">const</span> K&amp; theKey) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">	avlTreeNode&lt;K, E&gt;* temp;</span><br><span class="line">	<span class="keyword">if</span> ((temp = search(root, theKey)) != <span class="literal">nullptr</span>) <span class="keyword">return</span> &amp;temp-&gt;element;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K,<span class="keyword">typename</span> E&gt;</span><br><span class="line">avlTreeNode&lt;K, E&gt;* avlTree&lt;K, E&gt;::search(avlTreeNode&lt;K, E&gt;* tree, <span class="keyword">const</span> K&amp; theKey) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (tree == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">	<span class="keyword">if</span> (theKey &lt; tree-&gt;element.first) <span class="keyword">return</span> search(tree-&gt;left, theKey);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (theKey &gt; tree-&gt;element.first) <span class="keyword">return</span> search(tree-&gt;right, theKey);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> tree;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K,<span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="built_in">pair</span>&lt;<span class="keyword">const</span> K, E&gt;* avlTree&lt;K, E&gt;::iterativeSearch(<span class="keyword">const</span> K&amp; theKey) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">	avlTreeNode&lt;K, E&gt;* temp;</span><br><span class="line">	<span class="keyword">if</span> ((temp = iterativeSearch(root, theKey) != <span class="literal">nullptr</span>)) <span class="keyword">return</span> &amp;temp-&gt;element;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K,<span class="keyword">typename</span> E&gt;</span><br><span class="line">avlTreeNode&lt;K, E&gt;* avlTree&lt;K, E&gt;::iterativeSearch(avlTreeNode&lt;K, E&gt;* tree, <span class="keyword">const</span> K&amp; theKey) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">while</span> (tree != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (theKey &lt; tree-&gt;element.first) tree = tree-&gt;left;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (theKey &gt; tree-&gt;element.first) tree = tree-&gt;right;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">return</span> tree;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<h2 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h2></li>
</ul>
<h2 id="分裂树"><a href="#分裂树" class="headerlink" title="分裂树"></a>分裂树</h2><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><ul>
<li><input disabled="" type="checkbox"> D堆</li>
<li>D堆是一种与大小根堆相比具有常数时间优势的数据结构，当然其带来的空间浪费也更多。</li>
</ul>
<h2 id="ACM中的树略讲及切题"><a href="#ACM中的树略讲及切题" class="headerlink" title="ACM中的树略讲及切题"></a>ACM中的树略讲及切题</h2><ul>
<li><p><input disabled="" type="checkbox">  李超线段树</p>
</li>
<li><p><input disabled="" type="checkbox">  珂朵莉树</p>
</li>
<li><p><input disabled="" type="checkbox">  动态树</p>
</li>
<li><p><input disabled="" type="checkbox">  析合树</p>
</li>
<li><p><input disabled="" type="checkbox">  划分树 </p>
</li>
</ul>
<h2 id="朋友推荐的好听的歌"><a href="#朋友推荐的好听的歌" class="headerlink" title="朋友推荐的好听的歌!"></a>朋友推荐的好听的歌!</h2><div align="middle"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1396205229&auto=1&height=66"></iframe></div>]]></content>
      <categories>
        <category>数据结构与算法习题答案(机械工业出版社)</category>
      </categories>
  </entry>
</search>
